
c:/Users/Owner/Documents/SummerIoTBootCamp/IoT/TF-AtticFanController/AtticFanController_v3/target/1.5.2/argon/AtticFanController_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000045c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d85e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003de78  000d85e4  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000500  2003e2f0  2003e2f0  0002e2f0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8a5c  000d8a5c  00028a5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8a84  000d8a84  00028a84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e2de5  00000000  00000000  00028a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000122c3  00000000  00000000  0010b86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002109d  00000000  00000000  0011db30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002880  00000000  00000000  0013ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004a40  00000000  00000000  0014144d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038863  00000000  00000000  00145e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002cb79  00000000  00000000  0017e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105984  00000000  00000000  001ab269  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d7ec  00000000  00000000  002b0bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fc85 	bl	d7940 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fc8a 	bl	d7956 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003de78 	.word	0x2003de78
   d404c:	000d85e4 	.word	0x000d85e4
   d4050:	2003e2f0 	.word	0x2003e2f0
   d4054:	2003e2f0 	.word	0x2003e2f0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fa39 	bl	d64d4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d85d4 	.word	0x000d85d4
   d4084:	000d8590 	.word	0x000d8590

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8ee 	b.w	d4268 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fabd 	bl	d460c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b9df 	b.w	d6458 <_post_loop>

000d409a <_ZdlPv>:
   d409a:	f001 bedb 	b.w	d5e54 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bed9 	b.w	d5e54 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fe46 	bl	d5d3c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5b1d 	.word	0x000d5b1d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ca:	b510      	push	{r4, lr}
   d40cc:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40ce:	6800      	ldr	r0, [r0, #0]
   d40d0:	b108      	cbz	r0, d40d6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d2:	f001 febf 	bl	d5e54 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}
	...

000d40dc <_Z15ML04_TIME_DELAYm>:
  }
  return;
}

void ML04_TIME_DELAY(unsigned long int inDelay)
{
   d40dc:	b570      	push	{r4, r5, r6, lr}
   d40de:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40e0:	f001 fd24 	bl	d5b2c <HAL_Timer_Get_Milli_Seconds>
  startMillis=millis();
   d40e4:	4b09      	ldr	r3, [pc, #36]	; (d410c <_Z15ML04_TIME_DELAYm+0x30>)
  currMillis=0;
   d40e6:	4c0a      	ldr	r4, [pc, #40]	; (d4110 <_Z15ML04_TIME_DELAYm+0x34>)
  return;
}

void ML04_TIME_DELAY(unsigned long int inDelay)
{
  startMillis=millis();
   d40e8:	6018      	str	r0, [r3, #0]
  currMillis=0;
   d40ea:	2300      	movs	r3, #0
   d40ec:	6023      	str	r3, [r4, #0]
  totDelay=startMillis + inDelay;
   d40ee:	4b09      	ldr	r3, [pc, #36]	; (d4114 <_Z15ML04_TIME_DELAYm+0x38>)
   d40f0:	4428      	add	r0, r5
   d40f2:	6018      	str	r0, [r3, #0]
   d40f4:	461d      	mov	r5, r3
//  Serial.printf("ML04_TIME_DELAY milliseconds > %i\n",currMillis);
  while(currMillis < totDelay)
   d40f6:	4626      	mov	r6, r4
   d40f8:	6822      	ldr	r2, [r4, #0]
   d40fa:	682b      	ldr	r3, [r5, #0]
   d40fc:	429a      	cmp	r2, r3
   d40fe:	d203      	bcs.n	d4108 <_Z15ML04_TIME_DELAYm+0x2c>
   d4100:	f001 fd14 	bl	d5b2c <HAL_Timer_Get_Milli_Seconds>
  {
    currMillis=millis();
   d4104:	6030      	str	r0, [r6, #0]
{
  startMillis=millis();
  currMillis=0;
  totDelay=startMillis + inDelay;
//  Serial.printf("ML04_TIME_DELAY milliseconds > %i\n",currMillis);
  while(currMillis < totDelay)
   d4106:	e7f7      	b.n	d40f8 <_Z15ML04_TIME_DELAYm+0x1c>
   d4108:	bd70      	pop	{r4, r5, r6, pc}
   d410a:	bf00      	nop
   d410c:	2003e354 	.word	0x2003e354
   d4110:	2003e2f8 	.word	0x2003e2f8
   d4114:	2003e368 	.word	0x2003e368

000d4118 <_ZN5Print6printfIIEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4118:	460a      	mov	r2, r1
   d411a:	2100      	movs	r1, #0
   d411c:	f002 b911 	b.w	d6342 <_ZN5Print11printf_implEbPKcz>

000d4120 <_Z22ML01_MANUAL_OPS_SCREENb>:
MainLoopBottom:
  ML04_TIME_DELAY(BUTTON_PRESS_DELAY);     
}  //****************************    end  M A I N  L O O P  **********************************

void ML01_MANUAL_OPS_SCREEN(bool inManMode)
{
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
  display.clearDisplay();
   d4124:	4832      	ldr	r0, [pc, #200]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4126:	f001 f8e3 	bl	d52f0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d412a:	2101      	movs	r1, #1
   d412c:	4830      	ldr	r0, [pc, #192]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d412e:	f001 fc39 	bl	d59a4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4132:	2101      	movs	r1, #1
   d4134:	482e      	ldr	r0, [pc, #184]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4136:	f001 fc3a 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d413a:	2200      	movs	r2, #0
   d413c:	4611      	mov	r1, r2
   d413e:	482c      	ldr	r0, [pc, #176]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4140:	f001 fc2d 	bl	d599e <_ZN12Adafruit_GFX9setCursorEss>
  display.setRotation(ORIENT_PORTRAIT);
   d4144:	2103      	movs	r1, #3
   d4146:	482a      	ldr	r0, [pc, #168]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4148:	f001 fc39 	bl	d59be <_ZN12Adafruit_GFX11setRotationEh>
  display.printf("<BUTTON>\n");
   d414c:	4929      	ldr	r1, [pc, #164]	; (d41f4 <_Z22ML01_MANUAL_OPS_SCREENb+0xd4>)
   d414e:	4828      	ldr	r0, [pc, #160]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4150:	f7ff ffe2 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.printf("      MODE\n");
   d4154:	4928      	ldr	r1, [pc, #160]	; (d41f8 <_Z22ML01_MANUAL_OPS_SCREENb+0xd8>)
   d4156:	4826      	ldr	r0, [pc, #152]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4158:	f7ff ffde 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.printf("<YELLOW>\n");
   d415c:	4927      	ldr	r1, [pc, #156]	; (d41fc <_Z22ML01_MANUAL_OPS_SCREENb+0xdc>)
   d415e:	4824      	ldr	r0, [pc, #144]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4160:	f7ff ffda 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  switch (inManMode)
   d4164:	b1dc      	cbz	r4, d419e <_Z22ML01_MANUAL_OPS_SCREENb+0x7e>
   d4166:	2c01      	cmp	r4, #1
   d4168:	d137      	bne.n	d41da <_Z22ML01_MANUAL_OPS_SCREENb+0xba>
      display.setTextColor(WHITE);
      display.printf("    MANUAL\n");
      display.printf("<RED> AUTO\n");
      break;
    case ON:
      display.setTextColor(WHITE);
   d416a:	4621      	mov	r1, r4
   d416c:	4820      	ldr	r0, [pc, #128]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d416e:	f001 fc1e 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
      display.printf("      OFF\n");
   d4172:	4923      	ldr	r1, [pc, #140]	; (d4200 <_Z22ML01_MANUAL_OPS_SCREENb+0xe0>)
   d4174:	481e      	ldr	r0, [pc, #120]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4176:	f7ff ffcf 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.printf("    ");
   d417a:	4922      	ldr	r1, [pc, #136]	; (d4204 <_Z22ML01_MANUAL_OPS_SCREENb+0xe4>)
   d417c:	481c      	ldr	r0, [pc, #112]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d417e:	f7ff ffcb 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(BLACK,WHITE);
   d4182:	4622      	mov	r2, r4
   d4184:	2100      	movs	r1, #0
   d4186:	481a      	ldr	r0, [pc, #104]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4188:	f001 fc14 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
      display.printf("MANUAL\n");
   d418c:	491e      	ldr	r1, [pc, #120]	; (d4208 <_Z22ML01_MANUAL_OPS_SCREENb+0xe8>)
   d418e:	4818      	ldr	r0, [pc, #96]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4190:	f7ff ffc2 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(WHITE);
   d4194:	4621      	mov	r1, r4
   d4196:	4816      	ldr	r0, [pc, #88]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d4198:	f001 fc09 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
   d419c:	e018      	b.n	d41d0 <_Z22ML01_MANUAL_OPS_SCREENb+0xb0>
  display.printf("      MODE\n");
  display.printf("<YELLOW>\n");
  switch (inManMode)
  {
    case OFF:
      display.setTextColor(WHITE);
   d419e:	2101      	movs	r1, #1
   d41a0:	4813      	ldr	r0, [pc, #76]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41a2:	f001 fc04 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
      display.printf("      ");
   d41a6:	4919      	ldr	r1, [pc, #100]	; (d420c <_Z22ML01_MANUAL_OPS_SCREENb+0xec>)
   d41a8:	4811      	ldr	r0, [pc, #68]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41aa:	f7ff ffb5 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(BLACK,WHITE);
   d41ae:	2201      	movs	r2, #1
   d41b0:	4621      	mov	r1, r4
   d41b2:	480f      	ldr	r0, [pc, #60]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41b4:	f001 fbfe 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
      display.printf("OFF\n");
   d41b8:	4915      	ldr	r1, [pc, #84]	; (d4210 <_Z22ML01_MANUAL_OPS_SCREENb+0xf0>)
   d41ba:	480d      	ldr	r0, [pc, #52]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41bc:	f7ff ffac 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(WHITE);
   d41c0:	2101      	movs	r1, #1
   d41c2:	480b      	ldr	r0, [pc, #44]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41c4:	f001 fbf3 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
      display.printf("    MANUAL\n");
   d41c8:	4912      	ldr	r1, [pc, #72]	; (d4214 <_Z22ML01_MANUAL_OPS_SCREENb+0xf4>)
   d41ca:	4809      	ldr	r0, [pc, #36]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41cc:	f7ff ffa4 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.printf("      OFF\n");
      display.printf("    ");
      display.setTextColor(BLACK,WHITE);
      display.printf("MANUAL\n");
      display.setTextColor(WHITE);
      display.printf("<RED> AUTO\n");
   d41d0:	4911      	ldr	r1, [pc, #68]	; (d4218 <_Z22ML01_MANUAL_OPS_SCREENb+0xf8>)
   d41d2:	4807      	ldr	r0, [pc, #28]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41d4:	f7ff ffa0 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      break;
   d41d8:	e004      	b.n	d41e4 <_Z22ML01_MANUAL_OPS_SCREENb+0xc4>
   d41da:	4b10      	ldr	r3, [pc, #64]	; (d421c <_Z22ML01_MANUAL_OPS_SCREENb+0xfc>)
    default:
      display.println(ErrMsgManOLED);
   d41dc:	4804      	ldr	r0, [pc, #16]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
   d41de:	6819      	ldr	r1, [r3, #0]
   d41e0:	f002 f883 	bl	d62ea <_ZN5Print7printlnEPKc>
      break;
  }
  display.display();
   d41e4:	4802      	ldr	r0, [pc, #8]	; (d41f0 <_Z22ML01_MANUAL_OPS_SCREENb+0xd0>)
  return;
}
   d41e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    default:
      display.println(ErrMsgManOLED);
      break;
  }
  display.display();
   d41ea:	f001 b9a3 	b.w	d5534 <_ZN16Adafruit_SSD13067displayEv>
   d41ee:	bf00      	nop
   d41f0:	2003e330 	.word	0x2003e330
   d41f4:	000d79dc 	.word	0x000d79dc
   d41f8:	000d79e6 	.word	0x000d79e6
   d41fc:	000d79f2 	.word	0x000d79f2
   d4200:	000d7a1b 	.word	0x000d7a1b
   d4204:	000d79fe 	.word	0x000d79fe
   d4208:	000d7a07 	.word	0x000d7a07
   d420c:	000d79fc 	.word	0x000d79fc
   d4210:	000d7a21 	.word	0x000d7a21
   d4214:	000d7a03 	.word	0x000d7a03
   d4218:	000d7a0f 	.word	0x000d7a0f
   d421c:	2003e358 	.word	0x2003e358

000d4220 <_Z32ML05_WRONG_BUTTON_DISPLAY_SCREENb>:
  }
//  Serial.printf("ML04_TIME_DELAY milliseconds > %i\n",currMillis);
  return;

}  void ML05_WRONG_BUTTON_DISPLAY_SCREEN(bool inMode)
  {
   d4220:	b510      	push	{r4, lr}
  display.clearDisplay();
   d4222:	4c0f      	ldr	r4, [pc, #60]	; (d4260 <_Z32ML05_WRONG_BUTTON_DISPLAY_SCREENb+0x40>)
   d4224:	4620      	mov	r0, r4
   d4226:	f001 f863 	bl	d52f0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d422a:	4620      	mov	r0, r4
   d422c:	2101      	movs	r1, #1
   d422e:	f001 fbb9 	bl	d59a4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4232:	4620      	mov	r0, r4
   d4234:	2101      	movs	r1, #1
   d4236:	f001 fbba 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d423a:	2200      	movs	r2, #0
   d423c:	4611      	mov	r1, r2
   d423e:	4620      	mov	r0, r4
   d4240:	f001 fbad 	bl	d599e <_ZN12Adafruit_GFX9setCursorEss>
  display.setRotation(ORIENT_PORTRAIT);
   d4244:	4620      	mov	r0, r4
   d4246:	2103      	movs	r1, #3
   d4248:	f001 fbb9 	bl	d59be <_ZN12Adafruit_GFX11setRotationEh>
  display.printf("");
   d424c:	4620      	mov	r0, r4
   d424e:	4905      	ldr	r1, [pc, #20]	; (d4264 <_Z32ML05_WRONG_BUTTON_DISPLAY_SCREENb+0x44>)
   d4250:	f7ff ff62 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.display();
   d4254:	4620      	mov	r0, r4
  }
   d4256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.setRotation(ORIENT_PORTRAIT);
  display.printf("");
  display.display();
   d425a:	f001 b96b 	b.w	d5534 <_ZN16Adafruit_SSD13067displayEv>
   d425e:	bf00      	nop
   d4260:	2003e330 	.word	0x2003e330
   d4264:	000d838f 	.word	0x000d838f

000d4268 <setup>:
Adafruit_SSD1306 display(OLED_RESET); // object for OLED display methods 
Adafruit_BME280 bme;  // object for BME sensor's variables

SYSTEM_MODE(SEMI_AUTOMATIC); // Allows project flashing while Argon is disconnected from any wifi internet
void setup() 
{
   d4268:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d426a:	f002 fa33 	bl	d66d4 <_Z16_fetch_usbserialv>
   d426e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4272:	f002 fa23 	bl	d66bc <_ZN9USBSerial5beginEl>

// 1) Initialize the I2C addr 0x3C (for the 128x64) for the OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  
   d4276:	223c      	movs	r2, #60	; 0x3c
   d4278:	2102      	movs	r1, #2
   d427a:	4831      	ldr	r0, [pc, #196]	; (d4340 <setup+0xd8>)
   d427c:	f001 f888 	bl	d5390 <_ZN16Adafruit_SSD13065beginEhh>
  display.display(); // show Adafruit splashscreen to OLED
   d4280:	482f      	ldr	r0, [pc, #188]	; (d4340 <setup+0xd8>)
   d4282:	f001 f957 	bl	d5534 <_ZN16Adafruit_SSD13067displayEv>
  delay(1000);  // maintain display for 1 second
   d4286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d428a:	f002 f8a7 	bl	d63dc <delay>
  
  Serial.printf("PROGRAM AtticFanController_v2\n");
   d428e:	f002 fa21 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4292:	492c      	ldr	r1, [pc, #176]	; (d4344 <setup+0xdc>)
   d4294:	f7ff ff40 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
 /*
  * 2) BME 280sensor : BME 280 .begin method to activate sensor 
  */
  
    // while(!Serial);    // time to get serial running
    delay (1000);
   d4298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d429c:	f002 f89e 	bl	d63dc <delay>
    Serial.println(F("BME280 test"));   // "F" in println statement: Reference to FLASH memory on SD card)
   d42a0:	f002 fa18 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42a4:	4928      	ldr	r1, [pc, #160]	; (d4348 <setup+0xe0>)
   d42a6:	f002 f82a 	bl	d62fe <_ZN5Print7printlnEPK19__FlashStringHelper>
    status = bme.begin(0x76);  
   d42aa:	2176      	movs	r1, #118	; 0x76
   d42ac:	4827      	ldr	r0, [pc, #156]	; (d434c <setup+0xe4>)
   d42ae:	f000 fe3b 	bl	d4f28 <_ZN15Adafruit_BME2805beginEh>
   d42b2:	4b27      	ldr	r3, [pc, #156]	; (d4350 <setup+0xe8>)
   d42b4:	7018      	strb	r0, [r3, #0]
    if (!status) {
   d42b6:	bb60      	cbnz	r0, d4312 <setup+0xaa>
        Serial.println("Could not find a valid BME280 sensor, check wiring, address, sensor ID!");
   d42b8:	f002 fa0c 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42bc:	4925      	ldr	r1, [pc, #148]	; (d4354 <setup+0xec>)
   d42be:	f002 f814 	bl	d62ea <_ZN5Print7printlnEPKc>
        Serial.print("SensorID was: 0x"); Serial.println(bme.sensorID(),HEX);
   d42c2:	f002 fa07 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42c6:	4924      	ldr	r1, [pc, #144]	; (d4358 <setup+0xf0>)
   d42c8:	f001 fffc 	bl	d62c4 <_ZN5Print5printEPKc>
   d42cc:	f002 fa02 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42d0:	4604      	mov	r4, r0
   d42d2:	481e      	ldr	r0, [pc, #120]	; (d434c <setup+0xe4>)
   d42d4:	f000 fabe 	bl	d4854 <_ZN15Adafruit_BME2808sensorIDEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d42d8:	2210      	movs	r2, #16
   d42da:	4601      	mov	r1, r0
   d42dc:	4620      	mov	r0, r4
   d42de:	f002 f810 	bl	d6302 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42e2:	4620      	mov	r0, r4
   d42e4:	f001 fff5 	bl	d62d2 <_ZN5Print7printlnEv>
        Serial.println("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085");
   d42e8:	f002 f9f4 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42ec:	491b      	ldr	r1, [pc, #108]	; (d435c <setup+0xf4>)
   d42ee:	f001 fffc 	bl	d62ea <_ZN5Print7printlnEPKc>
        Serial.println("   ID of 0x56-0x58 represents a BMP 280,");
   d42f2:	f002 f9ef 	bl	d66d4 <_Z16_fetch_usbserialv>
   d42f6:	491a      	ldr	r1, [pc, #104]	; (d4360 <setup+0xf8>)
   d42f8:	f001 fff7 	bl	d62ea <_ZN5Print7printlnEPKc>
        Serial.println("        ID of 0x60 represents a BME 280.");
   d42fc:	f002 f9ea 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4300:	4918      	ldr	r1, [pc, #96]	; (d4364 <setup+0xfc>)
   d4302:	f001 fff2 	bl	d62ea <_ZN5Print7printlnEPKc>
        Serial.println("        ID of 0x61 represents a BME 680.");
   d4306:	f002 f9e5 	bl	d66d4 <_Z16_fetch_usbserialv>
   d430a:	4917      	ldr	r1, [pc, #92]	; (d4368 <setup+0x100>)
   d430c:	f001 ffed 	bl	d62ea <_ZN5Print7printlnEPKc>
   d4310:	e7fe      	b.n	d4310 <setup+0xa8>
        while (1);
    }
    else {
      Serial.println("BME280 Up and Running");
   d4312:	f002 f9df 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4316:	4915      	ldr	r1, [pc, #84]	; (d436c <setup+0x104>)
   d4318:	f001 ffe7 	bl	d62ea <_ZN5Print7printlnEPKc>
    }

// *************************  DECLARE PROGRAM PIN MODES ************************************
pinMode(MAN_MODE_BTN_D10,INPUT_PULLDOWN); // YELLOW button: Manual fan control 
   d431c:	2103      	movs	r1, #3
   d431e:	200a      	movs	r0, #10
   d4320:	f002 fcdc 	bl	d6cdc <pinMode>
pinMode(AUTO_MODE_BTN_D11,INPUT_PULLDOWN);  // RED button: Automatic fan control 
   d4324:	2103      	movs	r1, #3
   d4326:	200b      	movs	r0, #11
   d4328:	f002 fcd8 	bl	d6cdc <pinMode>
pinMode(FAN_ACTIVATION_D7,OUTPUT);  // Relay switch pin providing power for fan
   d432c:	2007      	movs	r0, #7
   d432e:	2101      	movs	r1, #1
   d4330:	f002 fcd4 	bl	d6cdc <pinMode>

// Display initial OLED screen in MANUAL operation display mode (with switch position OFF)
ML01_MANUAL_OPS_SCREEN(OFF);  
   d4334:	2000      	movs	r0, #0
}
   d4336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
pinMode(MAN_MODE_BTN_D10,INPUT_PULLDOWN); // YELLOW button: Manual fan control 
pinMode(AUTO_MODE_BTN_D11,INPUT_PULLDOWN);  // RED button: Automatic fan control 
pinMode(FAN_ACTIVATION_D7,OUTPUT);  // Relay switch pin providing power for fan

// Display initial OLED screen in MANUAL operation display mode (with switch position OFF)
ML01_MANUAL_OPS_SCREEN(OFF);  
   d433a:	f7ff bef1 	b.w	d4120 <_Z22ML01_MANUAL_OPS_SCREENb>
   d433e:	bf00      	nop
   d4340:	2003e330 	.word	0x2003e330
   d4344:	000d7a26 	.word	0x000d7a26
   d4348:	000d7a45 	.word	0x000d7a45
   d434c:	2003e374 	.word	0x2003e374
   d4350:	2003e31c 	.word	0x2003e31c
   d4354:	000d7a51 	.word	0x000d7a51
   d4358:	000d7a99 	.word	0x000d7a99
   d435c:	000d7aaa 	.word	0x000d7aaa
   d4360:	000d7af0 	.word	0x000d7af0
   d4364:	000d7b19 	.word	0x000d7b19
   d4368:	000d7b42 	.word	0x000d7b42
   d436c:	000d7b6b 	.word	0x000d7b6b

000d4370 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4370:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4372:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d4374:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d4378:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d437a:	f003 f81d 	bl	d73b8 <__aeabi_f2d>
   d437e:	462a      	mov	r2, r5
   d4380:	e9cd 0100 	strd	r0, r1, [sp]
   d4384:	2100      	movs	r1, #0
   d4386:	4620      	mov	r0, r4
   d4388:	f001 ffdb 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
    }
   d438c:	b003      	add	sp, #12
   d438e:	bd30      	pop	{r4, r5, pc}

000d4390 <_Z22ML02_2_AUTO_OPS_SCREENv>:
  display.display();
  return;
}

void ML02_2_AUTO_OPS_SCREEN()
{
   d4390:	b530      	push	{r4, r5, lr}
  display.setTextColor(WHITE);
   d4392:	4c2f      	ldr	r4, [pc, #188]	; (d4450 <_Z22ML02_2_AUTO_OPS_SCREENv+0xc0>)
   d4394:	4d2f      	ldr	r5, [pc, #188]	; (d4454 <_Z22ML02_2_AUTO_OPS_SCREENv+0xc4>)
  display.display();
  return;
}

void ML02_2_AUTO_OPS_SCREEN()
{
   d4396:	b085      	sub	sp, #20
  display.setTextColor(WHITE);
   d4398:	2101      	movs	r1, #1
   d439a:	4620      	mov	r0, r4
   d439c:	f001 fb07 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.println();
   d43a0:	4620      	mov	r0, r4
   d43a2:	f001 ff96 	bl	d62d2 <_ZN5Print7printlnEv>
  display.printf(" TEMP HUM\n");
   d43a6:	492c      	ldr	r1, [pc, #176]	; (d4458 <_Z22ML02_2_AUTO_OPS_SCREENv+0xc8>)
   d43a8:	4620      	mov	r0, r4
   d43aa:	f7ff feb5 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.printf(" SETTINGS\n");
   d43ae:	492b      	ldr	r1, [pc, #172]	; (d445c <_Z22ML02_2_AUTO_OPS_SCREENv+0xcc>)
   d43b0:	4620      	mov	r0, r4
   d43b2:	f7ff feb1 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d43b6:	a324      	add	r3, pc, #144	; (adr r3, d4448 <_Z22ML02_2_AUTO_OPS_SCREENv+0xb8>)
   d43b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d43c0:	4b27      	ldr	r3, [pc, #156]	; (d4460 <_Z22ML02_2_AUTO_OPS_SCREENv+0xd0>)
   d43c2:	2200      	movs	r2, #0
   d43c4:	e9cd 2300 	strd	r2, r3, [sp]
   d43c8:	2100      	movs	r1, #0
   d43ca:	4a26      	ldr	r2, [pc, #152]	; (d4464 <_Z22ML02_2_AUTO_OPS_SCREENv+0xd4>)
   d43cc:	4620      	mov	r0, r4
   d43ce:	f001 ffb8 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
  display.printf(" %2.0f   %2.0f\n",AUTO_MIN_TEMP,AUTO_MIN_HUM);
  display.printf(" SENSOR\n");
   d43d2:	4925      	ldr	r1, [pc, #148]	; (d4468 <_Z22ML02_2_AUTO_OPS_SCREENv+0xd8>)
   d43d4:	4620      	mov	r0, r4
   d43d6:	f7ff fe9f 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.setTextColor(BLACK,WHITE);
   d43da:	2201      	movs	r2, #1
   d43dc:	4620      	mov	r0, r4
   d43de:	2100      	movs	r1, #0
   d43e0:	f001 fae8 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
  display.printf(" %2.0f",temperature);
   d43e4:	4b21      	ldr	r3, [pc, #132]	; (d446c <_Z22ML02_2_AUTO_OPS_SCREENv+0xdc>)
   d43e6:	4922      	ldr	r1, [pc, #136]	; (d4470 <_Z22ML02_2_AUTO_OPS_SCREENv+0xe0>)
   d43e8:	ed93 0a00 	vldr	s0, [r3]
   d43ec:	4620      	mov	r0, r4
   d43ee:	f7ff ffbf 	bl	d4370 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.setTextColor(WHITE);
   d43f2:	4620      	mov	r0, r4
   d43f4:	2101      	movs	r1, #1
   d43f6:	f001 fada 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.printf("   ");
   d43fa:	491e      	ldr	r1, [pc, #120]	; (d4474 <_Z22ML02_2_AUTO_OPS_SCREENv+0xe4>)
   d43fc:	4620      	mov	r0, r4
   d43fe:	f7ff fe8b 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.setTextColor(BLACK,WHITE);
   d4402:	2201      	movs	r2, #1
   d4404:	4620      	mov	r0, r4
   d4406:	2100      	movs	r1, #0
   d4408:	f001 fad4 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
  display.printf("%2.0f\n",humidity);
   d440c:	4b1a      	ldr	r3, [pc, #104]	; (d4478 <_Z22ML02_2_AUTO_OPS_SCREENv+0xe8>)
   d440e:	491b      	ldr	r1, [pc, #108]	; (d447c <_Z22ML02_2_AUTO_OPS_SCREENv+0xec>)
   d4410:	ed93 0a00 	vldr	s0, [r3]
   d4414:	4620      	mov	r0, r4
   d4416:	f7ff ffab 	bl	d4370 <_ZN5Print6printfIIfEEEjPKcDpT_>
  display.setTextColor(WHITE);
   d441a:	4620      	mov	r0, r4
   d441c:	2101      	movs	r1, #1
   d441e:	f001 fac6 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.println(OpsMsgFrame);
   d4422:	6829      	ldr	r1, [r5, #0]
   d4424:	4620      	mov	r0, r4
   d4426:	f001 ff60 	bl	d62ea <_ZN5Print7printlnEPKc>
   d442a:	4b15      	ldr	r3, [pc, #84]	; (d4480 <_Z22ML02_2_AUTO_OPS_SCREENv+0xf0>)
  display.println(OpsMsgAutoMode);
   d442c:	4620      	mov	r0, r4
   d442e:	6819      	ldr	r1, [r3, #0]
   d4430:	f001 ff5b 	bl	d62ea <_ZN5Print7printlnEPKc>
  display.println(OpsMsgFrame);
   d4434:	6829      	ldr	r1, [r5, #0]
   d4436:	4620      	mov	r0, r4
  return;
}
   d4438:	b005      	add	sp, #20
   d443a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.setTextColor(BLACK,WHITE);
  display.printf("%2.0f\n",humidity);
  display.setTextColor(WHITE);
  display.println(OpsMsgFrame);
  display.println(OpsMsgAutoMode);
  display.println(OpsMsgFrame);
   d443e:	f001 bf54 	b.w	d62ea <_ZN5Print7printlnEPKc>
   d4442:	bf00      	nop
   d4444:	f3af 8000 	nop.w
   d4448:	00000000 	.word	0x00000000
   d444c:	4058c000 	.word	0x4058c000
   d4450:	2003e330 	.word	0x2003e330
   d4454:	2003e320 	.word	0x2003e320
   d4458:	000d7b81 	.word	0x000d7b81
   d445c:	000d7b8c 	.word	0x000d7b8c
   d4460:	40518000 	.word	0x40518000
   d4464:	000d7b97 	.word	0x000d7b97
   d4468:	000d7ba7 	.word	0x000d7ba7
   d446c:	2003e3b8 	.word	0x2003e3b8
   d4470:	000d7bb0 	.word	0x000d7bb0
   d4474:	000d79ff 	.word	0x000d79ff
   d4478:	2003e370 	.word	0x2003e370
   d447c:	000d7ba0 	.word	0x000d7ba0
   d4480:	2003e3c0 	.word	0x2003e3c0

000d4484 <_Z20ML02_AUTO_OPS_SCREENb>:
  display.display();
  return;
}

void ML02_AUTO_OPS_SCREEN(bool inAutoMode)
{
   d4484:	b510      	push	{r4, lr}
   d4486:	4604      	mov	r4, r0
  display.clearDisplay();
   d4488:	4829      	ldr	r0, [pc, #164]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d448a:	f000 ff31 	bl	d52f0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d448e:	2101      	movs	r1, #1
   d4490:	4827      	ldr	r0, [pc, #156]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d4492:	f001 fa87 	bl	d59a4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4496:	2101      	movs	r1, #1
   d4498:	4825      	ldr	r0, [pc, #148]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d449a:	f001 fa88 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   d449e:	2200      	movs	r2, #0
   d44a0:	4611      	mov	r1, r2
   d44a2:	4823      	ldr	r0, [pc, #140]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44a4:	f001 fa7b 	bl	d599e <_ZN12Adafruit_GFX9setCursorEss>
  display.setRotation(ORIENT_PORTRAIT);
   d44a8:	2103      	movs	r1, #3
   d44aa:	4821      	ldr	r0, [pc, #132]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44ac:	f001 fa87 	bl	d59be <_ZN12Adafruit_GFX11setRotationEh>
  display.printf("<BUTTON>\n");
   d44b0:	4920      	ldr	r1, [pc, #128]	; (d4534 <_Z20ML02_AUTO_OPS_SCREENb+0xb0>)
   d44b2:	481f      	ldr	r0, [pc, #124]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44b4:	f7ff fe30 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  display.printf("      MODE\n");
   d44b8:	491f      	ldr	r1, [pc, #124]	; (d4538 <_Z20ML02_AUTO_OPS_SCREENb+0xb4>)
   d44ba:	481d      	ldr	r0, [pc, #116]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44bc:	f7ff fe2c 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
  switch (inAutoMode)
   d44c0:	b19c      	cbz	r4, d44ea <_Z20ML02_AUTO_OPS_SCREENb+0x66>
   d44c2:	2c01      	cmp	r4, #1
   d44c4:	d129      	bne.n	d451a <_Z20ML02_AUTO_OPS_SCREENb+0x96>
      display.setTextColor(WHITE);
      display.printf("<YELLOW>\n");     
      ML02_2_AUTO_OPS_SCREEN();
      break;
    case ON:
      display.setTextColor(BLACK,WHITE);
   d44c6:	4622      	mov	r2, r4
   d44c8:	2100      	movs	r1, #0
   d44ca:	4819      	ldr	r0, [pc, #100]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44cc:	f001 fa72 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
      display.printf("<RED>");
   d44d0:	491a      	ldr	r1, [pc, #104]	; (d453c <_Z20ML02_AUTO_OPS_SCREENb+0xb8>)
   d44d2:	4817      	ldr	r0, [pc, #92]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44d4:	f7ff fe20 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(WHITE);
   d44d8:	4621      	mov	r1, r4
   d44da:	4815      	ldr	r0, [pc, #84]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44dc:	f001 fa67 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
      display.printf(" OFF\n");
   d44e0:	4917      	ldr	r1, [pc, #92]	; (d4540 <_Z20ML02_AUTO_OPS_SCREENb+0xbc>)
   d44e2:	4813      	ldr	r0, [pc, #76]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44e4:	f7ff fe18 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
   d44e8:	e010      	b.n	d450c <_Z20ML02_AUTO_OPS_SCREENb+0x88>
  display.printf("<BUTTON>\n");
  display.printf("      MODE\n");
  switch (inAutoMode)
  {
    case OFF:
      display.printf("<RED>");
   d44ea:	4914      	ldr	r1, [pc, #80]	; (d453c <_Z20ML02_AUTO_OPS_SCREENb+0xb8>)
   d44ec:	4810      	ldr	r0, [pc, #64]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44ee:	f7ff fe13 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(BLACK,WHITE);
   d44f2:	2201      	movs	r2, #1
   d44f4:	4621      	mov	r1, r4
   d44f6:	480e      	ldr	r0, [pc, #56]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d44f8:	f001 fa5c 	bl	d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>
      display.printf(" OFF\n");
   d44fc:	4910      	ldr	r1, [pc, #64]	; (d4540 <_Z20ML02_AUTO_OPS_SCREENb+0xbc>)
   d44fe:	480c      	ldr	r0, [pc, #48]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d4500:	f7ff fe0a 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      display.setTextColor(WHITE);
   d4504:	2101      	movs	r1, #1
   d4506:	480a      	ldr	r0, [pc, #40]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d4508:	f001 fa51 	bl	d59ae <_ZN12Adafruit_GFX12setTextColorEt>
    case ON:
      display.setTextColor(BLACK,WHITE);
      display.printf("<RED>");
      display.setTextColor(WHITE);
      display.printf(" OFF\n");
      display.printf("<YELLOW>\n");     
   d450c:	490d      	ldr	r1, [pc, #52]	; (d4544 <_Z20ML02_AUTO_OPS_SCREENb+0xc0>)
   d450e:	4808      	ldr	r0, [pc, #32]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d4510:	f7ff fe02 	bl	d4118 <_ZN5Print6printfIIEEEjPKcDpT_>
      ML02_2_AUTO_OPS_SCREEN();
   d4514:	f7ff ff3c 	bl	d4390 <_Z22ML02_2_AUTO_OPS_SCREENv>
      break;
   d4518:	e004      	b.n	d4524 <_Z20ML02_AUTO_OPS_SCREENb+0xa0>
   d451a:	4b0b      	ldr	r3, [pc, #44]	; (d4548 <_Z20ML02_AUTO_OPS_SCREENb+0xc4>)
    default:
      display.println(ErrMsgAutoOLED);
   d451c:	4804      	ldr	r0, [pc, #16]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
   d451e:	6819      	ldr	r1, [r3, #0]
   d4520:	f001 fee3 	bl	d62ea <_ZN5Print7printlnEPKc>
      break;
  }      
  display.display();
   d4524:	4802      	ldr	r0, [pc, #8]	; (d4530 <_Z20ML02_AUTO_OPS_SCREENb+0xac>)
  return;
}
   d4526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    default:
      display.println(ErrMsgAutoOLED);
      break;
  }      
  display.display();
   d452a:	f001 b803 	b.w	d5534 <_ZN16Adafruit_SSD13067displayEv>
   d452e:	bf00      	nop
   d4530:	2003e330 	.word	0x2003e330
   d4534:	000d79dc 	.word	0x000d79dc
   d4538:	000d79e6 	.word	0x000d79e6
   d453c:	000d7bb7 	.word	0x000d7bb7
   d4540:	000d7a20 	.word	0x000d7a20
   d4544:	000d79f2 	.word	0x000d79f2
   d4548:	2003e2fc 	.word	0x2003e2fc
   d454c:	00000000 	.word	0x00000000

000d4550 <_Z26ML03_CHECK_AUTO_THRESHOLDSv>:
  display.println(OpsMsgAutoMode);
  display.println(OpsMsgFrame);
  return;
}
void ML03_CHECK_AUTO_THRESHOLDS()
{
   d4550:	b538      	push	{r3, r4, r5, lr}
  temperature=bme.readTemperature() * (9.0/5.0) + 32.0;
   d4552:	4825      	ldr	r0, [pc, #148]	; (d45e8 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x98>)
   d4554:	4d25      	ldr	r5, [pc, #148]	; (d45ec <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x9c>)
  humidity=bme.readHumidity();
   d4556:	4c26      	ldr	r4, [pc, #152]	; (d45f0 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xa0>)
  display.println(OpsMsgFrame);
  return;
}
void ML03_CHECK_AUTO_THRESHOLDS()
{
  temperature=bme.readTemperature() * (9.0/5.0) + 32.0;
   d4558:	f000 fa4a 	bl	d49f0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d455c:	ee10 0a10 	vmov	r0, s0
   d4560:	f002 ff2a 	bl	d73b8 <__aeabi_f2d>
   d4564:	a31e      	add	r3, pc, #120	; (adr r3, d45e0 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x90>)
   d4566:	e9d3 2300 	ldrd	r2, r3, [r3]
   d456a:	f002 ff79 	bl	d7460 <__aeabi_dmul>
   d456e:	4b21      	ldr	r3, [pc, #132]	; (d45f4 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xa4>)
   d4570:	2200      	movs	r2, #0
   d4572:	f002 fdc3 	bl	d70fc <__adddf3>
   d4576:	f003 f985 	bl	d7884 <__aeabi_d2f>
   d457a:	6028      	str	r0, [r5, #0]
  humidity=bme.readHumidity();
   d457c:	481a      	ldr	r0, [pc, #104]	; (d45e8 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x98>)
   d457e:	f000 facf 	bl	d4b20 <_ZN15Adafruit_BME28012readHumidityEv>
   d4582:	ed84 0a00 	vstr	s0, [r4]
  Serial.printf("AUTOMode TEMPERATURE > %2.0f\n",temperature);
   d4586:	f002 f8a5 	bl	d66d4 <_Z16_fetch_usbserialv>
   d458a:	ed95 0a00 	vldr	s0, [r5]
   d458e:	491a      	ldr	r1, [pc, #104]	; (d45f8 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xa8>)
   d4590:	f7ff feee 	bl	d4370 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("AUTOMode HUMIDITY > %2.0f\n",humidity);
   d4594:	f002 f89e 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4598:	ed94 0a00 	vldr	s0, [r4]
   d459c:	4917      	ldr	r1, [pc, #92]	; (d45fc <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xac>)
   d459e:	f7ff fee7 	bl	d4370 <_ZN5Print6printfIIfEEEjPKcDpT_>
  if ((temperature >= AUTO_MIN_TEMP) || (humidity >= AUTO_MIN_HUM))
   d45a2:	ed95 7a00 	vldr	s14, [r5]
   d45a6:	eddf 7a16 	vldr	s15, [pc, #88]	; d4600 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xb0>
   d45aa:	4b16      	ldr	r3, [pc, #88]	; (d4604 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xb4>)
   d45ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d45b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45b4:	da08      	bge.n	d45c8 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x78>
   d45b6:	ed94 7a00 	vldr	s14, [r4]
   d45ba:	eddf 7a13 	vldr	s15, [pc, #76]	; d4608 <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0xb8>
   d45be:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d45c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45c6:	db01      	blt.n	d45cc <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x7c>
  {
    autoFanStatus=ON;
   d45c8:	2101      	movs	r1, #1
   d45ca:	e000      	b.n	d45ce <_Z26ML03_CHECK_AUTO_THRESHOLDSv+0x7e>
    digitalWrite(FAN_ACTIVATION_D7,HIGH);
  }
  else
  {
    autoFanStatus=OFF;
   d45cc:	2100      	movs	r1, #0
   d45ce:	7019      	strb	r1, [r3, #0]
    digitalWrite(FAN_ACTIVATION_D7,LOW);
   d45d0:	2007      	movs	r0, #7
  }
  return;
}
   d45d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(FAN_ACTIVATION_D7,HIGH);
  }
  else
  {
    autoFanStatus=OFF;
    digitalWrite(FAN_ACTIVATION_D7,LOW);
   d45d6:	f002 bb92 	b.w	d6cfe <digitalWrite>
   d45da:	bf00      	nop
   d45dc:	f3af 8000 	nop.w
   d45e0:	cccccccd 	.word	0xcccccccd
   d45e4:	3ffccccc 	.word	0x3ffccccc
   d45e8:	2003e374 	.word	0x2003e374
   d45ec:	2003e3b8 	.word	0x2003e3b8
   d45f0:	2003e370 	.word	0x2003e370
   d45f4:	40400000 	.word	0x40400000
   d45f8:	000d7bbd 	.word	0x000d7bbd
   d45fc:	000d7bdb 	.word	0x000d7bdb
   d4600:	428c0000 	.word	0x428c0000
   d4604:	2003e2f4 	.word	0x2003e2f4
   d4608:	42c60000 	.word	0x42c60000

000d460c <loop>:
}
/*****************************************************************************************
 *************************************  M A I N  L O O P  ********************************
 *****************************************************************************************/
void loop() 
{
   d460c:	b570      	push	{r4, r5, r6, lr}
  btnManualSt=digitalRead(MAN_MODE_BTN_D10);  // YELLOW button pressed
   d460e:	200a      	movs	r0, #10
   d4610:	f002 fb8e 	bl	d6d30 <digitalRead>
   d4614:	4c34      	ldr	r4, [pc, #208]	; (d46e8 <loop+0xdc>)
   d4616:	3000      	adds	r0, #0
   d4618:	bf18      	it	ne
   d461a:	2001      	movne	r0, #1
   d461c:	7020      	strb	r0, [r4, #0]
  btnAutoSt=digitalRead(AUTO_MODE_BTN_D11);  // RED button pressed
   d461e:	200b      	movs	r0, #11
   d4620:	f002 fb86 	bl	d6d30 <digitalRead>
   d4624:	4b31      	ldr	r3, [pc, #196]	; (d46ec <loop+0xe0>)
//  Serial.printf("btnManualSt > %i\n",btnManualSt);
  if (btnManualSt)
   d4626:	7822      	ldrb	r2, [r4, #0]
 *************************************  M A I N  L O O P  ********************************
 *****************************************************************************************/
void loop() 
{
  btnManualSt=digitalRead(MAN_MODE_BTN_D10);  // YELLOW button pressed
  btnAutoSt=digitalRead(AUTO_MODE_BTN_D11);  // RED button pressed
   d4628:	3000      	adds	r0, #0
   d462a:	bf18      	it	ne
   d462c:	2001      	movne	r0, #1
   d462e:	7018      	strb	r0, [r3, #0]
   d4630:	461d      	mov	r5, r3
//  Serial.printf("btnManualSt > %i\n",btnManualSt);
  if (btnManualSt)
   d4632:	b172      	cbz	r2, d4652 <loop+0x46>
  {
    if (autoMode == ON)  // Check for RED button pressed out of turn (AUTO mode) when already in manual mode
   d4634:	4b2e      	ldr	r3, [pc, #184]	; (d46f0 <loop+0xe4>)
   d4636:	781a      	ldrb	r2, [r3, #0]
   d4638:	b9ba      	cbnz	r2, d466a <loop+0x5e>
      ML05_WRONG_BUTTON_DISPLAY_SCREEN(autoMode);
      goto MainLoopBottom;
    }  
    else
    {
      manMode = !manMode;
   d463a:	4c2e      	ldr	r4, [pc, #184]	; (d46f4 <loop+0xe8>)
   d463c:	7820      	ldrb	r0, [r4, #0]
   d463e:	f080 0001 	eor.w	r0, r0, #1
   d4642:	7020      	strb	r0, [r4, #0]
      ML01_MANUAL_OPS_SCREEN(manMode);  
   d4644:	f7ff fd6c 	bl	d4120 <_Z22ML01_MANUAL_OPS_SCREENb>
    }

    if (manMode == OFF)
   d4648:	7821      	ldrb	r1, [r4, #0]
   d464a:	b929      	cbnz	r1, d4658 <loop+0x4c>
    {
//      Serial.printf("manMode O F F > %i\n",manMode);
      digitalWrite(FAN_ACTIVATION_D7,LOW);
   d464c:	2007      	movs	r0, #7
   d464e:	f002 fb56 	bl	d6cfe <digitalWrite>
    }
  }  // end if (btnManualSt)

  if (manMode == ON)
   d4652:	4b28      	ldr	r3, [pc, #160]	; (d46f4 <loop+0xe8>)
   d4654:	781b      	ldrb	r3, [r3, #0]
   d4656:	b11b      	cbz	r3, d4660 <loop+0x54>
  {
//    Serial.printf("manMode O N > %i\n",manMode);
    digitalWrite(FAN_ACTIVATION_D7,HIGH);
   d4658:	2101      	movs	r1, #1
   d465a:	2007      	movs	r0, #7
   d465c:	f002 fb4f 	bl	d6cfe <digitalWrite>
  }
  
  if (btnAutoSt)
   d4660:	782b      	ldrb	r3, [r5, #0]
   d4662:	b353      	cbz	r3, d46ba <loop+0xae>
  {
    if (manMode == ON)  // Check for RED button pressed out of turn (AUTO mode) when already in manual mode
   d4664:	4b23      	ldr	r3, [pc, #140]	; (d46f4 <loop+0xe8>)
   d4666:	781d      	ldrb	r5, [r3, #0]
   d4668:	b125      	cbz	r5, d4674 <loop+0x68>
    {
      manMode=OFF;
   d466a:	2000      	movs	r0, #0
   d466c:	7018      	strb	r0, [r3, #0]
      ML05_WRONG_BUTTON_DISPLAY_SCREEN(manMode);
   d466e:	f7ff fdd7 	bl	d4220 <_Z32ML05_WRONG_BUTTON_DISPLAY_SCREENb>
      goto MainLoopBottom;
   d4672:	e032      	b.n	d46da <loop+0xce>
    }      
    else
    {
      autoMode = !autoMode;
   d4674:	4c1e      	ldr	r4, [pc, #120]	; (d46f0 <loop+0xe4>)
   d4676:	7820      	ldrb	r0, [r4, #0]
   d4678:	f080 0001 	eor.w	r0, r0, #1
   d467c:	7020      	strb	r0, [r4, #0]
      ML02_AUTO_OPS_SCREEN(autoMode);
   d467e:	f7ff ff01 	bl	d4484 <_Z20ML02_AUTO_OPS_SCREENb>
      Serial.printf("AUTOMode  > %i\n",autoMode);
   d4682:	f002 f827 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4686:	4629      	mov	r1, r5
   d4688:	7823      	ldrb	r3, [r4, #0]
   d468a:	4a1b      	ldr	r2, [pc, #108]	; (d46f8 <loop+0xec>)
   d468c:	f001 fe59 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
    }

    if (autoMode == OFF)
   d4690:	7825      	ldrb	r5, [r4, #0]
   d4692:	b9ad      	cbnz	r5, d46c0 <loop+0xb4>
    {
//      ML02_AUTO_OPS_SCREEN(autoMode);
      if (autoFanStatus == ON)
   d4694:	4e19      	ldr	r6, [pc, #100]	; (d46fc <loop+0xf0>)
   d4696:	7833      	ldrb	r3, [r6, #0]
   d4698:	b1fb      	cbz	r3, d46da <loop+0xce>
      {
        Serial.printf("MAIN LOOP:AUTOMode is O F F > %i\n",autoMode);
   d469a:	f002 f81b 	bl	d66d4 <_Z16_fetch_usbserialv>
   d469e:	7823      	ldrb	r3, [r4, #0]
   d46a0:	4a17      	ldr	r2, [pc, #92]	; (d4700 <loop+0xf4>)
   d46a2:	4629      	mov	r1, r5
   d46a4:	f001 fe4d 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
        autoFanStatus = OFF;
        digitalWrite(FAN_ACTIVATION_D7,LOW);
   d46a8:	2007      	movs	r0, #7
   d46aa:	4629      	mov	r1, r5
    {
//      ML02_AUTO_OPS_SCREEN(autoMode);
      if (autoFanStatus == ON)
      {
        Serial.printf("MAIN LOOP:AUTOMode is O F F > %i\n",autoMode);
        autoFanStatus = OFF;
   d46ac:	7035      	strb	r5, [r6, #0]
        digitalWrite(FAN_ACTIVATION_D7,LOW);
   d46ae:	f002 fb26 	bl	d6cfe <digitalWrite>
        ML04_TIME_DELAY(POWER_OFF_DELAY);     
   d46b2:	f242 7010 	movw	r0, #10000	; 0x2710
   d46b6:	f7ff fd11 	bl	d40dc <_Z15ML04_TIME_DELAYm>
      }
    }
  }  // end if (btnAutoSt)

  if (autoMode == ON)
   d46ba:	4b0d      	ldr	r3, [pc, #52]	; (d46f0 <loop+0xe4>)
   d46bc:	781b      	ldrb	r3, [r3, #0]
   d46be:	b163      	cbz	r3, d46da <loop+0xce>
  {
    Serial.printf("AUTOMode is O N > %i execute ML03_CHECK_AUTO_THRESHOLDS()\n",autoMode);
   d46c0:	4c0b      	ldr	r4, [pc, #44]	; (d46f0 <loop+0xe4>)
   d46c2:	f002 f807 	bl	d66d4 <_Z16_fetch_usbserialv>
   d46c6:	7823      	ldrb	r3, [r4, #0]
   d46c8:	4a0e      	ldr	r2, [pc, #56]	; (d4704 <loop+0xf8>)
   d46ca:	2100      	movs	r1, #0
   d46cc:	f001 fe39 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
    ML03_CHECK_AUTO_THRESHOLDS();
   d46d0:	f7ff ff3e 	bl	d4550 <_Z26ML03_CHECK_AUTO_THRESHOLDSv>
    ML02_AUTO_OPS_SCREEN(autoMode);
   d46d4:	7820      	ldrb	r0, [r4, #0]
   d46d6:	f7ff fed5 	bl	d4484 <_Z20ML02_AUTO_OPS_SCREENb>
  }
MainLoopBottom:
  ML04_TIME_DELAY(BUTTON_PRESS_DELAY);     
   d46da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}  //****************************    end  M A I N  L O O P  **********************************
   d46de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.printf("AUTOMode is O N > %i execute ML03_CHECK_AUTO_THRESHOLDS()\n",autoMode);
    ML03_CHECK_AUTO_THRESHOLDS();
    ML02_AUTO_OPS_SCREEN(autoMode);
  }
MainLoopBottom:
  ML04_TIME_DELAY(BUTTON_PRESS_DELAY);     
   d46e2:	f7ff bcfb 	b.w	d40dc <_Z15ML04_TIME_DELAYm>
   d46e6:	bf00      	nop
   d46e8:	2003e36c 	.word	0x2003e36c
   d46ec:	2003e3bc 	.word	0x2003e3bc
   d46f0:	2003e30d 	.word	0x2003e30d
   d46f4:	2003e30c 	.word	0x2003e30c
   d46f8:	000d7bf6 	.word	0x000d7bf6
   d46fc:	2003e2f4 	.word	0x2003e2f4
   d4700:	000d7c06 	.word	0x000d7c06
   d4704:	000d7c28 	.word	0x000d7c28

000d4708 <_ZN16Adafruit_SSD1306D0Ev>:
   d4708:	b510      	push	{r4, lr}
   d470a:	2124      	movs	r1, #36	; 0x24
   d470c:	4604      	mov	r4, r0
   d470e:	f002 fb93 	bl	d6e38 <_ZdlPvj>
   d4712:	4620      	mov	r0, r4
   d4714:	bd10      	pop	{r4, pc}
	...

000d4718 <_GLOBAL__sub_I_btnManualSt>:
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.setRotation(ORIENT_PORTRAIT);
  display.printf("");
  display.display();
  }
   d4718:	b570      	push	{r4, r5, r6, lr}
bool btnManualSt, btnAutoSt;  // stores DigitalRead state
bool autoFanStatus=OFF;  // indicates if fan is turned ON or OFF
bool manMode=OFF, autoMode=OFF; // indicates which operation mode is currently in effect
bool status;  // checks if BME280 was activated succesfully
float temperature, humidity;  // stores data from BME sensor
String ErrMsgManOLED = "OLED DISPLAY SWITCH CASE ERROR--M A N U A L  MODE";
   d471a:	4e26      	ldr	r6, [pc, #152]	; (d47b4 <_GLOBAL__sub_I_btnManualSt+0x9c>)
   d471c:	4d26      	ldr	r5, [pc, #152]	; (d47b8 <_GLOBAL__sub_I_btnManualSt+0xa0>)
   d471e:	4c27      	ldr	r4, [pc, #156]	; (d47bc <_GLOBAL__sub_I_btnManualSt+0xa4>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4720:	f001 f974 	bl	d5a0c <HAL_Pin_Map>
   d4724:	4926      	ldr	r1, [pc, #152]	; (d47c0 <_GLOBAL__sub_I_btnManualSt+0xa8>)
   d4726:	4630      	mov	r0, r6
   d4728:	f001 fd77 	bl	d621a <_ZN6StringC1EPK19__FlashStringHelper>
   d472c:	4630      	mov	r0, r6
String ErrMsgAutoOLED = "OLED DISPLAY SWITCH CASE ERROR--A U T O MODE";
   d472e:	4e25      	ldr	r6, [pc, #148]	; (d47c4 <_GLOBAL__sub_I_btnManualSt+0xac>)
bool btnManualSt, btnAutoSt;  // stores DigitalRead state
bool autoFanStatus=OFF;  // indicates if fan is turned ON or OFF
bool manMode=OFF, autoMode=OFF; // indicates which operation mode is currently in effect
bool status;  // checks if BME280 was activated succesfully
float temperature, humidity;  // stores data from BME sensor
String ErrMsgManOLED = "OLED DISPLAY SWITCH CASE ERROR--M A N U A L  MODE";
   d4730:	462a      	mov	r2, r5
   d4732:	4621      	mov	r1, r4
   d4734:	f002 fb72 	bl	d6e1c <__aeabi_atexit>
String ErrMsgAutoOLED = "OLED DISPLAY SWITCH CASE ERROR--A U T O MODE";
   d4738:	4923      	ldr	r1, [pc, #140]	; (d47c8 <_GLOBAL__sub_I_btnManualSt+0xb0>)
   d473a:	4630      	mov	r0, r6
   d473c:	f001 fd6d 	bl	d621a <_ZN6StringC1EPK19__FlashStringHelper>
   d4740:	4630      	mov	r0, r6
String OpsMsgAutoMode = "OPEN WIDE ATTIC DOOR& WINDOWS";
   d4742:	4e22      	ldr	r6, [pc, #136]	; (d47cc <_GLOBAL__sub_I_btnManualSt+0xb4>)
bool autoFanStatus=OFF;  // indicates if fan is turned ON or OFF
bool manMode=OFF, autoMode=OFF; // indicates which operation mode is currently in effect
bool status;  // checks if BME280 was activated succesfully
float temperature, humidity;  // stores data from BME sensor
String ErrMsgManOLED = "OLED DISPLAY SWITCH CASE ERROR--M A N U A L  MODE";
String ErrMsgAutoOLED = "OLED DISPLAY SWITCH CASE ERROR--A U T O MODE";
   d4744:	462a      	mov	r2, r5
   d4746:	4621      	mov	r1, r4
   d4748:	f002 fb68 	bl	d6e1c <__aeabi_atexit>
String OpsMsgAutoMode = "OPEN WIDE ATTIC DOOR& WINDOWS";
   d474c:	4920      	ldr	r1, [pc, #128]	; (d47d0 <_GLOBAL__sub_I_btnManualSt+0xb8>)
   d474e:	4630      	mov	r0, r6
   d4750:	f001 fd63 	bl	d621a <_ZN6StringC1EPK19__FlashStringHelper>
   d4754:	4630      	mov	r0, r6
String OpsMsgFrame = "*********";
   d4756:	4e1f      	ldr	r6, [pc, #124]	; (d47d4 <_GLOBAL__sub_I_btnManualSt+0xbc>)
bool manMode=OFF, autoMode=OFF; // indicates which operation mode is currently in effect
bool status;  // checks if BME280 was activated succesfully
float temperature, humidity;  // stores data from BME sensor
String ErrMsgManOLED = "OLED DISPLAY SWITCH CASE ERROR--M A N U A L  MODE";
String ErrMsgAutoOLED = "OLED DISPLAY SWITCH CASE ERROR--A U T O MODE";
String OpsMsgAutoMode = "OPEN WIDE ATTIC DOOR& WINDOWS";
   d4758:	462a      	mov	r2, r5
   d475a:	4621      	mov	r1, r4
   d475c:	f002 fb5e 	bl	d6e1c <__aeabi_atexit>
String OpsMsgFrame = "*********";
   d4760:	491d      	ldr	r1, [pc, #116]	; (d47d8 <_GLOBAL__sub_I_btnManualSt+0xc0>)
   d4762:	4630      	mov	r0, r6
   d4764:	f001 fd59 	bl	d621a <_ZN6StringC1EPK19__FlashStringHelper>
   d4768:	4621      	mov	r1, r4

unsigned long int startMillis, currMillis, totDelay;
// ******************* end CONSTANTS & VARIABLES  ******************************

// ******************* Declare library class objects ***************************
Adafruit_SSD1306 display(OLED_RESET); // object for OLED display methods 
   d476a:	4c1c      	ldr	r4, [pc, #112]	; (d47dc <_GLOBAL__sub_I_btnManualSt+0xc4>)
bool status;  // checks if BME280 was activated succesfully
float temperature, humidity;  // stores data from BME sensor
String ErrMsgManOLED = "OLED DISPLAY SWITCH CASE ERROR--M A N U A L  MODE";
String ErrMsgAutoOLED = "OLED DISPLAY SWITCH CASE ERROR--A U T O MODE";
String OpsMsgAutoMode = "OPEN WIDE ATTIC DOOR& WINDOWS";
String OpsMsgFrame = "*********";
   d476c:	462a      	mov	r2, r5
   d476e:	4630      	mov	r0, r6
   d4770:	f002 fb54 	bl	d6e1c <__aeabi_atexit>

unsigned long int startMillis, currMillis, totDelay;
// ******************* end CONSTANTS & VARIABLES  ******************************

// ******************* Declare library class objects ***************************
Adafruit_SSD1306 display(OLED_RESET); // object for OLED display methods 
   d4774:	2104      	movs	r1, #4
   d4776:	4620      	mov	r0, r4
   d4778:	f000 fda4 	bl	d52c4 <_ZN16Adafruit_SSD1306C1Ea>
   d477c:	462a      	mov	r2, r5
   d477e:	4918      	ldr	r1, [pc, #96]	; (d47e0 <_GLOBAL__sub_I_btnManualSt+0xc8>)
   d4780:	4620      	mov	r0, r4
   d4782:	f002 fb4b 	bl	d6e1c <__aeabi_atexit>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4786:	4c17      	ldr	r4, [pc, #92]	; (d47e4 <_GLOBAL__sub_I_btnManualSt+0xcc>)
Adafruit_BME280 bme;  // object for BME sensor's variables
   d4788:	4817      	ldr	r0, [pc, #92]	; (d47e8 <_GLOBAL__sub_I_btnManualSt+0xd0>)
   d478a:	f000 f85d 	bl	d4848 <_ZN15Adafruit_BME280C1Ev>
   d478e:	2300      	movs	r3, #0
   d4790:	6023      	str	r3, [r4, #0]
   d4792:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4794:	71a3      	strb	r3, [r4, #6]
   d4796:	8123      	strh	r3, [r4, #8]
   d4798:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d479c:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d479e:	2002      	movs	r0, #2
   d47a0:	f001 fad4 	bl	d5d4c <set_system_mode>

SYSTEM_MODE(SEMI_AUTOMATIC); // Allows project flashing while Argon is disconnected from any wifi internet
   d47a4:	462a      	mov	r2, r5
   d47a6:	4620      	mov	r0, r4
   d47a8:	4910      	ldr	r1, [pc, #64]	; (d47ec <_GLOBAL__sub_I_btnManualSt+0xd4>)
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.setRotation(ORIENT_PORTRAIT);
  display.printf("");
  display.display();
  }
   d47aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

// ******************* Declare library class objects ***************************
Adafruit_SSD1306 display(OLED_RESET); // object for OLED display methods 
Adafruit_BME280 bme;  // object for BME sensor's variables

SYSTEM_MODE(SEMI_AUTOMATIC); // Allows project flashing while Argon is disconnected from any wifi internet
   d47ae:	f002 bb35 	b.w	d6e1c <__aeabi_atexit>
   d47b2:	bf00      	nop
   d47b4:	2003e358 	.word	0x2003e358
   d47b8:	2003e2f0 	.word	0x2003e2f0
   d47bc:	000d618d 	.word	0x000d618d
   d47c0:	000d7c63 	.word	0x000d7c63
   d47c4:	2003e2fc 	.word	0x2003e2fc
   d47c8:	000d7c95 	.word	0x000d7c95
   d47cc:	2003e3c0 	.word	0x2003e3c0
   d47d0:	000d7cc2 	.word	0x000d7cc2
   d47d4:	2003e320 	.word	0x2003e320
   d47d8:	000d7ce0 	.word	0x000d7ce0
   d47dc:	2003e330 	.word	0x2003e330
   d47e0:	000d40c9 	.word	0x000d40c9
   d47e4:	2003e310 	.word	0x2003e310
   d47e8:	2003e374 	.word	0x2003e374
   d47ec:	000d40cb 	.word	0x000d40cb

000d47f0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d47f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d47f2:	4602      	mov	r2, r0
   d47f4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d47f6:	7913      	ldrb	r3, [r2, #4]
   d47f8:	6895      	ldr	r5, [r2, #8]
   d47fa:	b133      	cbz	r3, d480a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d47fc:	b93d      	cbnz	r5, d480e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d47fe:	490c      	ldr	r1, [pc, #48]	; (d4830 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4800:	b004      	add	sp, #16
   d4802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4806:	f001 bd5d 	b.w	d62c4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d480a:	4b0a      	ldr	r3, [pc, #40]	; (d4834 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d480c:	e000      	b.n	d4810 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d480e:	4b0a      	ldr	r3, [pc, #40]	; (d4838 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4810:	7b16      	ldrb	r6, [r2, #12]
   d4812:	4c0a      	ldr	r4, [pc, #40]	; (d483c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4814:	490a      	ldr	r1, [pc, #40]	; (d4840 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
   d4816:	7b52      	ldrb	r2, [r2, #13]
   d4818:	9202      	str	r2, [sp, #8]
   d481a:	2e01      	cmp	r6, #1
   d481c:	bf08      	it	eq
   d481e:	4621      	moveq	r1, r4
   d4820:	9101      	str	r1, [sp, #4]
   d4822:	9500      	str	r5, [sp, #0]
   d4824:	4a07      	ldr	r2, [pc, #28]	; (d4844 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4826:	2100      	movs	r1, #0
   d4828:	f001 fd8b 	bl	d6342 <_ZN5Print11printf_implEbPKcz>
  }
   d482c:	b004      	add	sp, #16
   d482e:	bd70      	pop	{r4, r5, r6, pc}
   d4830:	000d7d09 	.word	0x000d7d09
   d4834:	000d838f 	.word	0x000d838f
   d4838:	000d7cf8 	.word	0x000d7cf8
   d483c:	000d7d01 	.word	0x000d7d01
   d4840:	000d7d05 	.word	0x000d7d05
   d4844:	000d7d1f 	.word	0x000d7d1f

000d4848 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4848:	22ff      	movs	r2, #255	; 0xff
   d484a:	7402      	strb	r2, [r0, #16]
   d484c:	7442      	strb	r2, [r0, #17]
   d484e:	7482      	strb	r2, [r0, #18]
   d4850:	74c2      	strb	r2, [r0, #19]
{ }
   d4852:	4770      	bx	lr

000d4854 <_ZN15Adafruit_BME2808sensorIDEv>:
*/
/**************************************************************************/
uint32_t Adafruit_BME280::sensorID(void)
{
	return _sensorID;
   d4854:	6880      	ldr	r0, [r0, #8]
   d4856:	4770      	bx	lr

000d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4858:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d485a:	4d09      	ldr	r5, [pc, #36]	; (d4880 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d485c:	6829      	ldr	r1, [r5, #0]
   d485e:	f011 0401 	ands.w	r4, r1, #1
   d4862:	d10a      	bne.n	d487a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4864:	4628      	mov	r0, r5
   d4866:	f7ff fc27 	bl	d40b8 <__cxa_guard_acquire>
   d486a:	b130      	cbz	r0, d487a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d486c:	4621      	mov	r1, r4
   d486e:	4805      	ldr	r0, [pc, #20]	; (d4884 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4870:	f001 fb4c 	bl	d5f0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4874:	4628      	mov	r0, r5
   d4876:	f7ff fc24 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d487a:	4802      	ldr	r0, [pc, #8]	; (d4884 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d487c:	bd38      	pop	{r3, r4, r5, pc}
   d487e:	bf00      	nop
   d4880:	2003e3d0 	.word	0x2003e3d0
   d4884:	2003e3d4 	.word	0x2003e3d4

000d4888 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d488c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4890:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4892:	4605      	mov	r5, r0
   d4894:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4896:	d106      	bne.n	d48a6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4898:	f7ff ffde 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d489c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d489e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d48a2:	f001 bc4f 	b.w	d6144 <_ZN8SPIClass8transferEh>
   d48a6:	2607      	movs	r6, #7
   d48a8:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d48aa:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d48ae:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d48b2:	2100      	movs	r1, #0
   d48b4:	b280      	uxth	r0, r0
   d48b6:	f002 fa22 	bl	d6cfe <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d48ba:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d48be:	fa08 f106 	lsl.w	r1, r8, r6
   d48c2:	4039      	ands	r1, r7
   d48c4:	b280      	uxth	r0, r0
   d48c6:	f002 fa1a 	bl	d6cfe <digitalWrite>
        digitalWrite(_sck, HIGH);
   d48ca:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d48ce:	2101      	movs	r1, #1
   d48d0:	b280      	uxth	r0, r0
   d48d2:	f002 fa14 	bl	d6cfe <digitalWrite>
        if (digitalRead(_miso))
   d48d6:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d48da:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d48dc:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d48de:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d48e0:	f002 fa26 	bl	d6d30 <digitalRead>
   d48e4:	b108      	cbz	r0, d48ea <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d48e6:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d48ea:	f116 36ff 	adds.w	r6, r6, #4294967295
   d48ee:	d2de      	bcs.n	d48ae <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d48f0:	4620      	mov	r0, r4
   d48f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48f6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d48f6:	b508      	push	{r3, lr}
        instance().endTransaction();
   d48f8:	f7ff ffae 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d48fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4900:	f001 bb41 	b.w	d5f86 <_ZN8SPIClass14endTransactionEv>

000d4904 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4904:	b510      	push	{r4, lr}
   d4906:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4908:	f7ff ffa6 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d490c:	4621      	mov	r1, r4
    }
   d490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4912:	f001 bb51 	b.w	d5fb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4918 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4918:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d491a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d491e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4920:	b085      	sub	sp, #20
   d4922:	4604      	mov	r4, r0
   d4924:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4926:	d121      	bne.n	d496c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4928:	7901      	ldrb	r1, [r0, #4]
   d492a:	6800      	ldr	r0, [r0, #0]
   d492c:	f001 ffef 	bl	d690e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4930:	6820      	ldr	r0, [r4, #0]
   d4932:	6803      	ldr	r3, [r0, #0]
   d4934:	4629      	mov	r1, r5
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	4798      	blx	r3
        _wire -> endTransmission();
   d493a:	6820      	ldr	r0, [r4, #0]
   d493c:	f001 fff2 	bl	d6924 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4940:	2203      	movs	r2, #3
   d4942:	7921      	ldrb	r1, [r4, #4]
   d4944:	6820      	ldr	r0, [r4, #0]
   d4946:	f001 ffdf 	bl	d6908 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d494a:	6820      	ldr	r0, [r4, #0]
   d494c:	6803      	ldr	r3, [r0, #0]
   d494e:	695b      	ldr	r3, [r3, #20]
   d4950:	4798      	blx	r3
        value <<= 8;
   d4952:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4954:	6820      	ldr	r0, [r4, #0]
   d4956:	6803      	ldr	r3, [r0, #0]
   d4958:	695b      	ldr	r3, [r3, #20]
   d495a:	4798      	blx	r3
   d495c:	4328      	orrs	r0, r5
        value <<= 8;
   d495e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4960:	6820      	ldr	r0, [r4, #0]
   d4962:	6803      	ldr	r3, [r0, #0]
   d4964:	695b      	ldr	r3, [r3, #20]
   d4966:	4798      	blx	r3
   d4968:	4305      	orrs	r5, r0
   d496a:	e039      	b.n	d49e0 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d496c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4970:	3301      	adds	r3, #1
   d4972:	d10e      	bne.n	d4992 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4974:	4b1c      	ldr	r3, [pc, #112]	; (d49e8 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4976:	4a1d      	ldr	r2, [pc, #116]	; (d49ec <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4978:	9300      	str	r3, [sp, #0]
   d497a:	9202      	str	r2, [sp, #8]
   d497c:	2300      	movs	r3, #0
   d497e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4980:	4668      	mov	r0, sp
   d4982:	f88d 3004 	strb.w	r3, [sp, #4]
   d4986:	f88d 200c 	strb.w	r2, [sp, #12]
   d498a:	f88d 300d 	strb.w	r3, [sp, #13]
   d498e:	f7ff ffb9 	bl	d4904 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4992:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4996:	2100      	movs	r1, #0
   d4998:	b280      	uxth	r0, r0
   d499a:	f002 f9b0 	bl	d6cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d499e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d49a2:	4620      	mov	r0, r4
   d49a4:	f7ff ff70 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d49a8:	2100      	movs	r1, #0
   d49aa:	4620      	mov	r0, r4
   d49ac:	f7ff ff6c 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d49b0:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d49b2:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d49b4:	4620      	mov	r0, r4
   d49b6:	f7ff ff67 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
   d49ba:	4328      	orrs	r0, r5
        value <<= 8;
   d49bc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d49be:	2100      	movs	r1, #0
   d49c0:	4620      	mov	r0, r4
   d49c2:	f7ff ff61 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
   d49c6:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d49c8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49cc:	2101      	movs	r1, #1
   d49ce:	b280      	uxth	r0, r0
   d49d0:	f002 f995 	bl	d6cfe <digitalWrite>
        if (_sck == -1)
   d49d4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d49d8:	3301      	adds	r3, #1
   d49da:	d101      	bne.n	d49e0 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d49dc:	f7ff ff8b 	bl	d48f6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d49e0:	4628      	mov	r0, r5
   d49e2:	b005      	add	sp, #20
   d49e4:	bd30      	pop	{r4, r5, pc}
   d49e6:	bf00      	nop
   d49e8:	000d7cf4 	.word	0x000d7cf4
   d49ec:	0007a120 	.word	0x0007a120

000d49f0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d49f0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d49f2:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d49f4:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d49f6:	f7ff ff8f 	bl	d4918 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d49fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d49fe:	d01e      	beq.n	d4a3e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4a00:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4a02:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4a44 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4a06:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4a0a:	0052      	lsls	r2, r2, #1
   d4a0c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4a10:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4a14:	435b      	muls	r3, r3
   d4a16:	4350      	muls	r0, r2
   d4a18:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4a1c:	131b      	asrs	r3, r3, #12
   d4a1e:	4353      	muls	r3, r2
   d4a20:	139b      	asrs	r3, r3, #14
   d4a22:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4a26:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4a2c:	3080      	adds	r0, #128	; 0x80
   d4a2e:	1200      	asrs	r0, r0, #8
   d4a30:	ee07 0a90 	vmov	s15, r0
   d4a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4a38:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4a3c:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4a3e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4a48 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4a42:	bd10      	pop	{r4, pc}
   d4a44:	42c80000 	.word	0x42c80000
   d4a48:	7fc00000 	.word	0x7fc00000

000d4a4c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a4c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4a4e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a52:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4a54:	b085      	sub	sp, #20
   d4a56:	4604      	mov	r4, r0
   d4a58:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4a5a:	d11d      	bne.n	d4a98 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a5c:	7901      	ldrb	r1, [r0, #4]
   d4a5e:	6800      	ldr	r0, [r0, #0]
   d4a60:	f001 ff55 	bl	d690e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a64:	6820      	ldr	r0, [r4, #0]
   d4a66:	6803      	ldr	r3, [r0, #0]
   d4a68:	4629      	mov	r1, r5
   d4a6a:	689b      	ldr	r3, [r3, #8]
   d4a6c:	4798      	blx	r3
        _wire -> endTransmission();
   d4a6e:	6820      	ldr	r0, [r4, #0]
   d4a70:	f001 ff58 	bl	d6924 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4a74:	2202      	movs	r2, #2
   d4a76:	7921      	ldrb	r1, [r4, #4]
   d4a78:	6820      	ldr	r0, [r4, #0]
   d4a7a:	f001 ff45 	bl	d6908 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4a7e:	6820      	ldr	r0, [r4, #0]
   d4a80:	6803      	ldr	r3, [r0, #0]
   d4a82:	695b      	ldr	r3, [r3, #20]
   d4a84:	4798      	blx	r3
   d4a86:	4605      	mov	r5, r0
   d4a88:	6820      	ldr	r0, [r4, #0]
   d4a8a:	6803      	ldr	r3, [r0, #0]
   d4a8c:	695b      	ldr	r3, [r3, #20]
   d4a8e:	4798      	blx	r3
   d4a90:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4a94:	b285      	uxth	r5, r0
   d4a96:	e035      	b.n	d4b04 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4a98:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a9c:	3301      	adds	r3, #1
   d4a9e:	d10e      	bne.n	d4abe <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4aa0:	4b1a      	ldr	r3, [pc, #104]	; (d4b0c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4aa2:	4a1b      	ldr	r2, [pc, #108]	; (d4b10 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4aa4:	9300      	str	r3, [sp, #0]
   d4aa6:	9202      	str	r2, [sp, #8]
   d4aa8:	2300      	movs	r3, #0
   d4aaa:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4aac:	4668      	mov	r0, sp
   d4aae:	f88d 3004 	strb.w	r3, [sp, #4]
   d4ab2:	f88d 200c 	strb.w	r2, [sp, #12]
   d4ab6:	f88d 300d 	strb.w	r3, [sp, #13]
   d4aba:	f7ff ff23 	bl	d4904 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4abe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ac2:	2100      	movs	r1, #0
   d4ac4:	b280      	uxth	r0, r0
   d4ac6:	f002 f91a 	bl	d6cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4aca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f7ff feda 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	4620      	mov	r0, r4
   d4ad8:	f7ff fed6 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
   d4adc:	2100      	movs	r1, #0
   d4ade:	4605      	mov	r5, r0
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff fed1 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
   d4ae6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4aea:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4aec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4af0:	2101      	movs	r1, #1
   d4af2:	b280      	uxth	r0, r0
   d4af4:	f002 f903 	bl	d6cfe <digitalWrite>
        if (_sck == -1)
   d4af8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4afc:	3301      	adds	r3, #1
   d4afe:	d101      	bne.n	d4b04 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4b00:	f7ff fef9 	bl	d48f6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4b04:	4628      	mov	r0, r5
   d4b06:	b005      	add	sp, #20
   d4b08:	bd30      	pop	{r4, r5, pc}
   d4b0a:	bf00      	nop
   d4b0c:	000d7cf4 	.word	0x000d7cf4
   d4b10:	0007a120 	.word	0x0007a120

000d4b14 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4b14:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4b16:	f7ff ff99 	bl	d4a4c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4b1a:	ba40      	rev16	r0, r0
}
   d4b1c:	b280      	uxth	r0, r0
   d4b1e:	bd08      	pop	{r3, pc}

000d4b20 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4b20:	b510      	push	{r4, lr}
   d4b22:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4b24:	f7ff ff64 	bl	d49f0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4b28:	21fd      	movs	r1, #253	; 0xfd
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff ff8e 	bl	d4a4c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4b30:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4b34:	d038      	beq.n	d4ba8 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b36:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b3a:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b3c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4b40:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4b42:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4b46:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4b4a:	fb02 3311 	mls	r3, r2, r1, r3
   d4b4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4b52:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4b54:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4b58:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4b5c:	4353      	muls	r3, r2
   d4b5e:	12db      	asrs	r3, r3, #11
   d4b60:	4342      	muls	r2, r0
   d4b62:	1292      	asrs	r2, r2, #10
   d4b64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4b68:	4353      	muls	r3, r2
   d4b6a:	129b      	asrs	r3, r3, #10
   d4b6c:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4b70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4b74:	4353      	muls	r3, r2
   d4b76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4b7a:	139b      	asrs	r3, r3, #14
   d4b7c:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4b7e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4b80:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4b84:	4352      	muls	r2, r2
   d4b86:	11d2      	asrs	r2, r2, #7
   d4b88:	434a      	muls	r2, r1
   d4b8a:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4b8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4b92:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4b96:	bfa8      	it	ge
   d4b98:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4b9c:	131b      	asrs	r3, r3, #12
   d4b9e:	ee00 3a10 	vmov	s0, r3
   d4ba2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4ba6:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4ba8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4bb0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4bac:	bd10      	pop	{r4, pc}
   d4bae:	bf00      	nop
   d4bb0:	7fc00000 	.word	0x7fc00000

000d4bb4 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bb4:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4bb6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4bba:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bbc:	b085      	sub	sp, #20
   d4bbe:	4604      	mov	r4, r0
   d4bc0:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4bc2:	d116      	bne.n	d4bf2 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4bc4:	7901      	ldrb	r1, [r0, #4]
   d4bc6:	6800      	ldr	r0, [r0, #0]
   d4bc8:	f001 fea1 	bl	d690e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4bcc:	6820      	ldr	r0, [r4, #0]
   d4bce:	6803      	ldr	r3, [r0, #0]
   d4bd0:	4629      	mov	r1, r5
   d4bd2:	689b      	ldr	r3, [r3, #8]
   d4bd4:	4798      	blx	r3
        _wire -> endTransmission();
   d4bd6:	6820      	ldr	r0, [r4, #0]
   d4bd8:	f001 fea4 	bl	d6924 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4bdc:	2201      	movs	r2, #1
   d4bde:	7921      	ldrb	r1, [r4, #4]
   d4be0:	6820      	ldr	r0, [r4, #0]
   d4be2:	f001 fe91 	bl	d6908 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4be6:	6820      	ldr	r0, [r4, #0]
   d4be8:	6803      	ldr	r3, [r0, #0]
   d4bea:	695b      	ldr	r3, [r3, #20]
   d4bec:	4798      	blx	r3
   d4bee:	b2c5      	uxtb	r5, r0
   d4bf0:	e02e      	b.n	d4c50 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4bf2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4bf6:	3301      	adds	r3, #1
   d4bf8:	d10e      	bne.n	d4c18 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4bfa:	4b17      	ldr	r3, [pc, #92]	; (d4c58 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4bfc:	4a17      	ldr	r2, [pc, #92]	; (d4c5c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4bfe:	9300      	str	r3, [sp, #0]
   d4c00:	9202      	str	r2, [sp, #8]
   d4c02:	2300      	movs	r3, #0
   d4c04:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c06:	4668      	mov	r0, sp
   d4c08:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c0c:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c10:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c14:	f7ff fe76 	bl	d4904 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4c18:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c1c:	2100      	movs	r1, #0
   d4c1e:	b280      	uxth	r0, r0
   d4c20:	f002 f86d 	bl	d6cfe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c24:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c28:	4620      	mov	r0, r4
   d4c2a:	f7ff fe2d 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4c2e:	2100      	movs	r1, #0
   d4c30:	4620      	mov	r0, r4
   d4c32:	f7ff fe29 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
   d4c36:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4c38:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c3c:	2101      	movs	r1, #1
   d4c3e:	b280      	uxth	r0, r0
   d4c40:	f002 f85d 	bl	d6cfe <digitalWrite>
        if (_sck == -1)
   d4c44:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c48:	3301      	adds	r3, #1
   d4c4a:	d101      	bne.n	d4c50 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4c4c:	f7ff fe53 	bl	d48f6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4c50:	4628      	mov	r0, r5
   d4c52:	b005      	add	sp, #20
   d4c54:	bd30      	pop	{r4, r5, pc}
   d4c56:	bf00      	nop
   d4c58:	000d7cf4 	.word	0x000d7cf4
   d4c5c:	0007a120 	.word	0x0007a120

000d4c60 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4c60:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4c62:	21f3      	movs	r1, #243	; 0xf3
   d4c64:	f7ff ffa6 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4c68:	f000 0001 	and.w	r0, r0, #1
   d4c6c:	bd08      	pop	{r3, pc}

000d4c6e <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c6e:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c70:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4c72:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c74:	f7ff ff4e 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c78:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4c7a:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	f7ff ff49 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4c82:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4c84:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff ff44 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c8c:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4c8e:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c90:	4620      	mov	r0, r4
   d4c92:	f7ff ff3f 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c96:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4c98:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	f7ff ff3a 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ca0:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4ca2:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f7ff ff35 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4caa:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4cac:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f7ff ff30 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cb4:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4cb6:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f7ff ff2b 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cbe:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4cc0:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f7ff ff26 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cc8:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4cca:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ccc:	4620      	mov	r0, r4
   d4cce:	f7ff ff21 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cd2:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4cd4:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	f7ff ff1c 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cdc:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4cde:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f7ff ff17 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4ce6:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4ce8:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cea:	4620      	mov	r0, r4
   d4cec:	f7ff ff62 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cf0:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4cf2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	f7ff ff0c 	bl	d4b14 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4cfc:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4cfe:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d00:	4620      	mov	r0, r4
   d4d02:	f7ff ff57 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d06:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d08:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	f7ff ff51 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
   d4d12:	21e5      	movs	r1, #229	; 0xe5
   d4d14:	4605      	mov	r5, r0
   d4d16:	4620      	mov	r0, r4
   d4d18:	f7ff ff4c 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
   d4d1c:	f000 000f 	and.w	r0, r0, #15
   d4d20:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d24:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4d26:	21e6      	movs	r1, #230	; 0xe6
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f7ff ff43 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
   d4d2e:	21e5      	movs	r1, #229	; 0xe5
   d4d30:	4605      	mov	r5, r0
   d4d32:	4620      	mov	r0, r4
   d4d34:	f7ff ff3e 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
   d4d38:	1100      	asrs	r0, r0, #4
   d4d3a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d3e:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4d40:	21e7      	movs	r1, #231	; 0xe7
   d4d42:	4620      	mov	r0, r4
   d4d44:	f7ff ff36 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
   d4d48:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d50 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4d52:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d56:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d58:	4604      	mov	r4, r0
   d4d5a:	460e      	mov	r6, r1
   d4d5c:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4d5e:	d111      	bne.n	d4d84 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d60:	7901      	ldrb	r1, [r0, #4]
   d4d62:	6800      	ldr	r0, [r0, #0]
   d4d64:	f001 fdd3 	bl	d690e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d68:	6820      	ldr	r0, [r4, #0]
   d4d6a:	6803      	ldr	r3, [r0, #0]
   d4d6c:	4631      	mov	r1, r6
   d4d6e:	689b      	ldr	r3, [r3, #8]
   d4d70:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4d72:	6820      	ldr	r0, [r4, #0]
   d4d74:	6803      	ldr	r3, [r0, #0]
   d4d76:	4629      	mov	r1, r5
   d4d78:	689b      	ldr	r3, [r3, #8]
   d4d7a:	4798      	blx	r3
        _wire -> endTransmission();
   d4d7c:	6820      	ldr	r0, [r4, #0]
   d4d7e:	f001 fdd1 	bl	d6924 <_ZN7TwoWire15endTransmissionEv>
   d4d82:	e02d      	b.n	d4de0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4d84:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d88:	3301      	adds	r3, #1
   d4d8a:	d10e      	bne.n	d4daa <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4d8c:	4b15      	ldr	r3, [pc, #84]	; (d4de4 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4d8e:	4a16      	ldr	r2, [pc, #88]	; (d4de8 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4d90:	9300      	str	r3, [sp, #0]
   d4d92:	9202      	str	r2, [sp, #8]
   d4d94:	2300      	movs	r3, #0
   d4d96:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d98:	4668      	mov	r0, sp
   d4d9a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d9e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4da2:	f88d 300d 	strb.w	r3, [sp, #13]
   d4da6:	f7ff fdad 	bl	d4904 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4daa:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dae:	2100      	movs	r1, #0
   d4db0:	b280      	uxth	r0, r0
   d4db2:	f001 ffa4 	bl	d6cfe <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4db6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4dba:	4620      	mov	r0, r4
   d4dbc:	f7ff fd64 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4dc0:	4629      	mov	r1, r5
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	f7ff fd60 	bl	d4888 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4dc8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dcc:	2101      	movs	r1, #1
   d4dce:	b280      	uxth	r0, r0
   d4dd0:	f001 ff95 	bl	d6cfe <digitalWrite>
    if (_sck == -1)
   d4dd4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4dd8:	3301      	adds	r3, #1
   d4dda:	d101      	bne.n	d4de0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4ddc:	f7ff fd8b 	bl	d48f6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4de0:	b004      	add	sp, #16
   d4de2:	bd70      	pop	{r4, r5, r6, pc}
   d4de4:	000d7cf4 	.word	0x000d7cf4
   d4de8:	0007a120 	.word	0x0007a120

000d4dec <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4dee:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4df2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4df6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4dfa:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4dfe:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4e02:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4e06:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4e0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4e0e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4e12:	f366 1347 	bfi	r3, r6, #5, #3
   d4e16:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4e1a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4e1e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4e22:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4e24:	f367 0302 	bfi	r3, r7, #0, #3
   d4e28:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4e2c:	f006 0207 	and.w	r2, r6, #7
   d4e30:	21f2      	movs	r1, #242	; 0xf2
   d4e32:	f7ff ff8d 	bl	d4d50 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4e36:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4e3a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e3e:	f002 0107 	and.w	r1, r2, #7
   d4e42:	009b      	lsls	r3, r3, #2
   d4e44:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e48:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	21f5      	movs	r1, #245	; 0xf5
   d4e50:	f7ff ff7e 	bl	d4d50 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4e54:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e58:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e5c:	f002 0107 	and.w	r1, r2, #7
   d4e60:	009b      	lsls	r3, r3, #2
   d4e62:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e66:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	21f4      	movs	r1, #244	; 0xf4
}
   d4e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e72:	f7ff bf6d 	b.w	d4d50 <_ZN15Adafruit_BME2806write8Ehh>

000d4e76 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e76:	b530      	push	{r4, r5, lr}
   d4e78:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e7a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4e7e:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4e80:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4e82:	d103      	bne.n	d4e8c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4e84:	6820      	ldr	r0, [r4, #0]
   d4e86:	f001 fd0b 	bl	d68a0 <_ZN7TwoWire5beginEv>
   d4e8a:	e022      	b.n	d4ed2 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4e8c:	2101      	movs	r1, #1
   d4e8e:	b280      	uxth	r0, r0
   d4e90:	f001 ff35 	bl	d6cfe <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4e94:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e98:	2101      	movs	r1, #1
   d4e9a:	b280      	uxth	r0, r0
   d4e9c:	f001 ff1e 	bl	d6cdc <pinMode>
        if (_sck == -1) {
   d4ea0:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4ea4:	1c43      	adds	r3, r0, #1
   d4ea6:	d104      	bne.n	d4eb2 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4ea8:	f7ff fcd6 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4eac:	f001 f838 	bl	d5f20 <_ZN8SPIClass5beginEv>
   d4eb0:	e00f      	b.n	d4ed2 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4eb2:	2101      	movs	r1, #1
   d4eb4:	b280      	uxth	r0, r0
   d4eb6:	f001 ff11 	bl	d6cdc <pinMode>
            pinMode(_mosi, OUTPUT);
   d4eba:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4ebe:	2101      	movs	r1, #1
   d4ec0:	b280      	uxth	r0, r0
   d4ec2:	f001 ff0b 	bl	d6cdc <pinMode>
            pinMode(_miso, INPUT);
   d4ec6:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4eca:	2100      	movs	r1, #0
   d4ecc:	b280      	uxth	r0, r0
   d4ece:	f001 ff05 	bl	d6cdc <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4ed2:	21d0      	movs	r1, #208	; 0xd0
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	f7ff fe6d 	bl	d4bb4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4eda:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4edc:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4ede:	d120      	bne.n	d4f22 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	22b6      	movs	r2, #182	; 0xb6
   d4ee4:	21e0      	movs	r1, #224	; 0xe0
   d4ee6:	f7ff ff33 	bl	d4d50 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4eea:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4eee:	f001 fa75 	bl	d63dc <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	f7ff feb4 	bl	d4c60 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ef8:	4605      	mov	r5, r0
   d4efa:	b108      	cbz	r0, d4f00 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4efc:	2064      	movs	r0, #100	; 0x64
   d4efe:	e7f6      	b.n	d4eee <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4f00:	4620      	mov	r0, r4
   d4f02:	f7ff feb4 	bl	d4c6e <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4f06:	2305      	movs	r3, #5
   d4f08:	9300      	str	r3, [sp, #0]
   d4f0a:	461a      	mov	r2, r3
   d4f0c:	2103      	movs	r1, #3
   d4f0e:	4620      	mov	r0, r4
   d4f10:	9502      	str	r5, [sp, #8]
   d4f12:	9501      	str	r5, [sp, #4]
   d4f14:	f7ff ff6a 	bl	d4dec <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4f18:	2064      	movs	r0, #100	; 0x64
   d4f1a:	f001 fa5f 	bl	d63dc <delay>
   d4f1e:	2001      	movs	r0, #1
   d4f20:	e000      	b.n	d4f24 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4f22:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4f24:	b005      	add	sp, #20
   d4f26:	bd30      	pop	{r4, r5, pc}

000d4f28 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f28:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4f2a:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f2c:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4f2e:	f001 ff4f 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d4f32:	6020      	str	r0, [r4, #0]
	return init();
   d4f34:	4620      	mov	r0, r4
}
   d4f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4f3a:	f7ff bf9c 	b.w	d4e76 <_ZN15Adafruit_BME2804initEv>

000d4f3e <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4f3e:	f000 bd65 	b.w	d5a0c <HAL_Pin_Map>
	...

000d4f44 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4f46:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f48:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4f4c:	2c02      	cmp	r4, #2
   d4f4e:	d008      	beq.n	d4f62 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4f50:	2c03      	cmp	r4, #3
   d4f52:	d00f      	beq.n	d4f74 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4f54:	2c01      	cmp	r4, #1
   d4f56:	d170      	bne.n	d503a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4f58:	8904      	ldrh	r4, [r0, #8]
   d4f5a:	3c01      	subs	r4, #1
   d4f5c:	1aa2      	subs	r2, r4, r2
   d4f5e:	b212      	sxth	r2, r2
      break;
   d4f60:	e00c      	b.n	d4f7c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f62:	8944      	ldrh	r4, [r0, #10]
   d4f64:	3c01      	subs	r4, #1
   d4f66:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4f68:	8904      	ldrh	r4, [r0, #8]
   d4f6a:	1ae4      	subs	r4, r4, r3
   d4f6c:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f6e:	b212      	sxth	r2, r2
      x -= (w-1);
   d4f70:	b209      	sxth	r1, r1
      break;
   d4f72:	e062      	b.n	d503a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4f74:	8944      	ldrh	r4, [r0, #10]
   d4f76:	1ae4      	subs	r4, r4, r3
   d4f78:	1a61      	subs	r1, r4, r1
   d4f7a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4f7c:	2a00      	cmp	r2, #0
   d4f7e:	db5b      	blt.n	d5038 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4f80:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f84:	4294      	cmp	r4, r2
   d4f86:	f340 8090 	ble.w	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f8a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f8c:	bfbe      	ittt	lt
   d4f8e:	185b      	addlt	r3, r3, r1
   d4f90:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4f92:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f94:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4f98:	18cc      	adds	r4, r1, r3
   d4f9a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4f9c:	bfc4      	itt	gt
   d4f9e:	1a43      	subgt	r3, r0, r1
   d4fa0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4fa2:	2b00      	cmp	r3, #0
   d4fa4:	f340 8081 	ble.w	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4fa8:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4faa:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4fac:	4f3f      	ldr	r7, [pc, #252]	; (d50ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4fae:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fb2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4fb6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4fb8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fbc:	d017      	beq.n	d4fee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4fbe:	f1c1 0108 	rsb	r1, r1, #8
   d4fc2:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fc4:	493a      	ldr	r1, [pc, #232]	; (d50b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4fc6:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fc8:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4fca:	bf3f      	itttt	cc
   d4fcc:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4fd0:	21ff      	movcc	r1, #255	; 0xff
   d4fd2:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4fd6:	400e      	andcc	r6, r1
   d4fd8:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4fda:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fdc:	bf0c      	ite	eq
   d4fde:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4fe0:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fe2:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4fe4:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fe6:	d360      	bcc.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4fe8:	1a18      	subs	r0, r3, r0
   d4fea:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4fec:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4fee:	2b07      	cmp	r3, #7
   d4ff0:	d917      	bls.n	d5022 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4ff2:	2d01      	cmp	r5, #1
   d4ff4:	bf0c      	ite	eq
   d4ff6:	20ff      	moveq	r0, #255	; 0xff
   d4ff8:	2000      	movne	r0, #0
   d4ffa:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4ffe:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5000:	3a08      	subs	r2, #8
   d5002:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d5004:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d5006:	f801 0c80 	strb.w	r0, [r1, #-128]
   d500a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d500e:	d8f7      	bhi.n	d5000 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d5010:	f1a3 0208 	sub.w	r2, r3, #8
   d5014:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d5018:	3201      	adds	r2, #1
   d501a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d501e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5022:	2b00      	cmp	r3, #0
   d5024:	d041      	beq.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5026:	4a23      	ldr	r2, [pc, #140]	; (d50b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5028:	5cd2      	ldrb	r2, [r2, r3]
   d502a:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d502c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d502e:	bf0c      	ite	eq
   d5030:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d5032:	4393      	bicne	r3, r2
   d5034:	7023      	strb	r3, [r4, #0]
   d5036:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5038:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d503a:	2a00      	cmp	r2, #0
   d503c:	db35      	blt.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d503e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5042:	4294      	cmp	r4, r2
   d5044:	dd31      	ble.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5046:	2900      	cmp	r1, #0
    w += x;
   d5048:	bfbc      	itt	lt
   d504a:	18c9      	addlt	r1, r1, r3
   d504c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d504e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5052:	bfb8      	it	lt
   d5054:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5056:	18ce      	adds	r6, r1, r3
   d5058:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d505a:	bfc4      	itt	gt
   d505c:	1a63      	subgt	r3, r4, r1
   d505e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5060:	2b00      	cmp	r3, #0
   d5062:	dd22      	ble.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5064:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d5066:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d506a:	4810      	ldr	r0, [pc, #64]	; (d50ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d506c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5070:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d5072:	2001      	movs	r0, #1
   d5074:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d5078:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d507a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d507c:	d109      	bne.n	d5092 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d507e:	3b01      	subs	r3, #1
   d5080:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d5082:	1c5c      	adds	r4, r3, #1
   d5084:	d011      	beq.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5086:	f811 0b01 	ldrb.w	r0, [r1], #1
   d508a:	4310      	orrs	r0, r2
   d508c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5090:	e7f5      	b.n	d507e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d5092:	43d2      	mvns	r2, r2
   d5094:	b2d2      	uxtb	r2, r2
   d5096:	3b01      	subs	r3, #1
   d5098:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d509a:	1c58      	adds	r0, r3, #1
   d509c:	d005      	beq.n	d50aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d509e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d50a2:	4010      	ands	r0, r2
   d50a4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d50a8:	e7f5      	b.n	d5096 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d50aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50ac:	2003de88 	.word	0x2003de88
   d50b0:	2003de80 	.word	0x2003de80
   d50b4:	2003de78 	.word	0x2003de78

000d50b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d50ba:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d50bc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d50c0:	2c02      	cmp	r4, #2
   d50c2:	d008      	beq.n	d50d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d50c4:	2c03      	cmp	r4, #3
   d50c6:	d00f      	beq.n	d50e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d50c8:	2c01      	cmp	r4, #1
   d50ca:	d112      	bne.n	d50f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d50cc:	8904      	ldrh	r4, [r0, #8]
   d50ce:	1ae4      	subs	r4, r4, r3
   d50d0:	1aa2      	subs	r2, r4, r2
   d50d2:	b212      	sxth	r2, r2
      break;
   d50d4:	e06d      	b.n	d51b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50d6:	8904      	ldrh	r4, [r0, #8]
   d50d8:	3c01      	subs	r4, #1
   d50da:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50dc:	8944      	ldrh	r4, [r0, #10]
   d50de:	1ae4      	subs	r4, r4, r3
   d50e0:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50e2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50e4:	b212      	sxth	r2, r2
      break;
   d50e6:	e004      	b.n	d50f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d50e8:	8944      	ldrh	r4, [r0, #10]
   d50ea:	3c01      	subs	r4, #1
   d50ec:	1a61      	subs	r1, r4, r1
   d50ee:	b209      	sxth	r1, r1
      break;
   d50f0:	e05f      	b.n	d51b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d50f2:	2900      	cmp	r1, #0
   d50f4:	db5c      	blt.n	d51b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d50f6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d50fa:	428c      	cmp	r4, r1
   d50fc:	f340 8091 	ble.w	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d5100:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d5102:	bfbc      	itt	lt
   d5104:	18d2      	addlt	r2, r2, r3
   d5106:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5108:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d510c:	bfb8      	it	lt
   d510e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d5110:	18d4      	adds	r4, r2, r3
   d5112:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d5114:	bfc4      	itt	gt
   d5116:	1a83      	subgt	r3, r0, r2
   d5118:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d511a:	2b00      	cmp	r3, #0
   d511c:	f340 8081 	ble.w	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5120:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5122:	4e40      	ldr	r6, [pc, #256]	; (d5224 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5124:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5126:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d5128:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d512c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5130:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5134:	d017      	beq.n	d5166 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5136:	f1c4 0408 	rsb	r4, r4, #8
   d513a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d513c:	4c3a      	ldr	r4, [pc, #232]	; (d5228 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d513e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5140:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d5142:	bf3f      	itttt	cc
   d5144:	ebc2 0e00 	rsbcc	lr, r2, r0
   d5148:	24ff      	movcc	r4, #255	; 0xff
   d514a:	fa44 f40e 	asrcc.w	r4, r4, lr
   d514e:	4027      	andcc	r7, r4
   d5150:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d5152:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5154:	bf0c      	ite	eq
   d5156:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d5158:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d515a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d515c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d515e:	d360      	bcc.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d5160:	1a10      	subs	r0, r2, r0
   d5162:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5164:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5166:	2a07      	cmp	r2, #7
   d5168:	d917      	bls.n	d519a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d516a:	2d01      	cmp	r5, #1
   d516c:	bf0c      	ite	eq
   d516e:	24ff      	moveq	r4, #255	; 0xff
   d5170:	2400      	movne	r4, #0
   d5172:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d5176:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5178:	3908      	subs	r1, #8
   d517a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d517c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d517e:	f800 4c80 	strb.w	r4, [r0, #-128]
   d5182:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5186:	d8f7      	bhi.n	d5178 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d5188:	f1a2 0108 	sub.w	r1, r2, #8
   d518c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d5190:	3101      	adds	r1, #1
   d5192:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d5196:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d519a:	2a00      	cmp	r2, #0
   d519c:	d041      	beq.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d519e:	4923      	ldr	r1, [pc, #140]	; (d522c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d51a0:	5c89      	ldrb	r1, [r1, r2]
   d51a2:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d51a4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d51a6:	bf0c      	ite	eq
   d51a8:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d51aa:	438a      	bicne	r2, r1
   d51ac:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d51ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d51b2:	2900      	cmp	r1, #0
   d51b4:	db35      	blt.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51b6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51ba:	428c      	cmp	r4, r1
   d51bc:	dd31      	ble.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d51be:	2a00      	cmp	r2, #0
    w += x;
   d51c0:	bfbc      	itt	lt
   d51c2:	18d2      	addlt	r2, r2, r3
   d51c4:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51c6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d51ca:	bfb8      	it	lt
   d51cc:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51ce:	18d6      	adds	r6, r2, r3
   d51d0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d51d2:	bfc4      	itt	gt
   d51d4:	1aa3      	subgt	r3, r4, r2
   d51d6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d51d8:	2b00      	cmp	r3, #0
   d51da:	dd22      	ble.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d51dc:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d51de:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d51e2:	4810      	ldr	r0, [pc, #64]	; (d5224 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d51e4:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d51e8:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d51ea:	2201      	movs	r2, #1
   d51ec:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d51f0:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d51f2:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d51f4:	d109      	bne.n	d520a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d51f6:	1e5a      	subs	r2, r3, #1
   d51f8:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d51fa:	1c5c      	adds	r4, r3, #1
   d51fc:	d011      	beq.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5202:	430a      	orrs	r2, r1
   d5204:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5208:	e7f5      	b.n	d51f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d520a:	43c9      	mvns	r1, r1
   d520c:	b2c9      	uxtb	r1, r1
   d520e:	1e5a      	subs	r2, r3, #1
   d5210:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d5212:	1c5a      	adds	r2, r3, #1
   d5214:	d005      	beq.n	d5222 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5216:	f810 2b01 	ldrb.w	r2, [r0], #1
   d521a:	400a      	ands	r2, r1
   d521c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5220:	e7f5      	b.n	d520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d5222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5224:	2003de88 	.word	0x2003de88
   d5228:	2003de80 	.word	0x2003de80
   d522c:	2003de78 	.word	0x2003de78

000d5230 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5232:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5234:	4606      	mov	r6, r0
   d5236:	4614      	mov	r4, r2
   d5238:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d523a:	db3f      	blt.n	d52bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d523c:	f000 fbce 	bl	d59dc <_ZN12Adafruit_GFX5widthEv>
   d5240:	4285      	cmp	r5, r0
   d5242:	da3b      	bge.n	d52bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5244:	2c00      	cmp	r4, #0
   d5246:	db39      	blt.n	d52bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5248:	4630      	mov	r0, r6
   d524a:	f000 fbca 	bl	d59e2 <_ZN12Adafruit_GFX6heightEv>
   d524e:	4284      	cmp	r4, r0
   d5250:	da34      	bge.n	d52bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5252:	4630      	mov	r0, r6
   d5254:	f000 fbb1 	bl	d59ba <_ZN12Adafruit_GFX11getRotationEv>
   d5258:	2802      	cmp	r0, #2
   d525a:	d127      	bne.n	d52ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d525c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d525e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5260:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d5262:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5264:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d5266:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5268:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d526a:	b204      	sxth	r4, r0
   d526c:	e006      	b.n	d527c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d526e:	2801      	cmp	r0, #1
   d5270:	d104      	bne.n	d527c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d5272:	8933      	ldrh	r3, [r6, #8]
   d5274:	3b01      	subs	r3, #1
   d5276:	1b1b      	subs	r3, r3, r4
   d5278:	462c      	mov	r4, r5
   d527a:	b21d      	sxth	r5, r3
   d527c:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d527e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5280:	fb94 f0f0 	sdiv	r0, r4, r0
   d5284:	b200      	sxth	r0, r0
   d5286:	4b0e      	ldr	r3, [pc, #56]	; (d52c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5288:	f004 0207 	and.w	r2, r4, #7
   d528c:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d5290:	d104      	bne.n	d529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d5292:	4097      	lsls	r7, r2
   d5294:	5c5a      	ldrb	r2, [r3, r1]
   d5296:	4317      	orrs	r7, r2
   d5298:	545f      	strb	r7, [r3, r1]
   d529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d529c:	5c58      	ldrb	r0, [r3, r1]
   d529e:	2701      	movs	r7, #1
   d52a0:	fa07 f202 	lsl.w	r2, r7, r2
   d52a4:	ea20 0202 	bic.w	r2, r0, r2
   d52a8:	545a      	strb	r2, [r3, r1]
   d52aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d52ac:	2803      	cmp	r0, #3
   d52ae:	d1de      	bne.n	d526e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d52b0:	8973      	ldrh	r3, [r6, #10]
   d52b2:	3b01      	subs	r3, #1
   d52b4:	1b5b      	subs	r3, r3, r5
   d52b6:	4625      	mov	r5, r4
   d52b8:	b21c      	sxth	r4, r3
   d52ba:	e7df      	b.n	d527c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d52bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d52be:	bf00      	nop
   d52c0:	2003de88 	.word	0x2003de88

000d52c4 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52c4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52c6:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52c8:	4604      	mov	r4, r0
   d52ca:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52cc:	2180      	movs	r1, #128	; 0x80
   d52ce:	f000 fa87 	bl	d57e0 <_ZN12Adafruit_GFXC1Ess>
   d52d2:	4b06      	ldr	r3, [pc, #24]	; (d52ec <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d52d4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d52d6:	23ff      	movs	r3, #255	; 0xff
   d52d8:	7763      	strb	r3, [r4, #29]
   d52da:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d52de:	77e3      	strb	r3, [r4, #31]
   d52e0:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d52e2:	f884 5020 	strb.w	r5, [r4, #32]
}
   d52e6:	4620      	mov	r0, r4
   d52e8:	bd38      	pop	{r3, r4, r5, pc}
   d52ea:	bf00      	nop
   d52ec:	000d7d48 	.word	0x000d7d48

000d52f0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d52f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d52f4:	2100      	movs	r1, #0
   d52f6:	4801      	ldr	r0, [pc, #4]	; (d52fc <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d52f8:	f002 bb2d 	b.w	d7956 <memset>
   d52fc:	2003de88 	.word	0x2003de88

000d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5300:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5302:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5306:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5308:	4604      	mov	r4, r0
   d530a:	460d      	mov	r5, r1
  if (sid != -1)
   d530c:	d028      	beq.n	d5360 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d530e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d5312:	2101      	movs	r1, #1
   d5314:	b280      	uxth	r0, r0
   d5316:	f001 fcf2 	bl	d6cfe <digitalWrite>
    digitalWrite(dc, LOW);
   d531a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d531e:	2100      	movs	r1, #0
   d5320:	b280      	uxth	r0, r0
   d5322:	f001 fcec 	bl	d6cfe <digitalWrite>
    digitalWrite(cs, LOW);
   d5326:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d532a:	2100      	movs	r1, #0
   d532c:	b280      	uxth	r0, r0
   d532e:	f001 fce6 	bl	d6cfe <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5332:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5336:	b12b      	cbz	r3, d5344 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5338:	f7ff fa8e 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d533c:	4629      	mov	r1, r5
   d533e:	f000 ff01 	bl	d6144 <_ZN8SPIClass8transferEh>
   d5342:	e005      	b.n	d5350 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5344:	462b      	mov	r3, r5
   d5346:	2201      	movs	r2, #1
   d5348:	7fa1      	ldrb	r1, [r4, #30]
   d534a:	7f60      	ldrb	r0, [r4, #29]
   d534c:	f001 fd03 	bl	d6d56 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5350:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5354:	2101      	movs	r1, #1
   d5356:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d535c:	f001 bccf 	b.w	d6cfe <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d5360:	f001 fd36 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d5364:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5368:	f001 fad5 	bl	d6916 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d536c:	f001 fd30 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d5370:	6803      	ldr	r3, [r0, #0]
   d5372:	2100      	movs	r1, #0
   d5374:	689b      	ldr	r3, [r3, #8]
   d5376:	4798      	blx	r3
    Wire.write(c);
   d5378:	f001 fd2a 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d537c:	6803      	ldr	r3, [r0, #0]
   d537e:	4629      	mov	r1, r5
   d5380:	689b      	ldr	r3, [r3, #8]
   d5382:	4798      	blx	r3
    Wire.endTransmission();
   d5384:	f001 fd24 	bl	d6dd0 <_Z19__fetch_global_Wirev>
  }
}
   d5388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d538c:	f001 baca 	b.w	d6924 <_ZN7TwoWire15endTransmissionEv>

000d5390 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d5390:	b538      	push	{r3, r4, r5, lr}
   d5392:	4604      	mov	r4, r0
   d5394:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d5396:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5398:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d539c:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d539e:	3301      	adds	r3, #1
   d53a0:	d037      	beq.n	d5412 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d53a2:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d53a6:	2101      	movs	r1, #1
   d53a8:	b280      	uxth	r0, r0
   d53aa:	f001 fc97 	bl	d6cdc <pinMode>
    pinMode(cs, OUTPUT);
   d53ae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53b2:	2101      	movs	r1, #1
   d53b4:	b280      	uxth	r0, r0
   d53b6:	f001 fc91 	bl	d6cdc <pinMode>
    if (!hwSPI){
   d53ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53be:	b95b      	cbnz	r3, d53d8 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d53c0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53c4:	2101      	movs	r1, #1
   d53c6:	b280      	uxth	r0, r0
   d53c8:	f001 fc88 	bl	d6cdc <pinMode>
    	pinMode(sclk, OUTPUT);
   d53cc:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d53d0:	2101      	movs	r1, #1
   d53d2:	b280      	uxth	r0, r0
   d53d4:	f001 fc82 	bl	d6cdc <pinMode>
    	}
    if (hwSPI){
   d53d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53dc:	b1eb      	cbz	r3, d541a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d53de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53e2:	2101      	movs	r1, #1
   d53e4:	b280      	uxth	r0, r0
   d53e6:	f001 fc8a 	bl	d6cfe <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d53ea:	f7ff fa35 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53ee:	2101      	movs	r1, #1
   d53f0:	f000 fda7 	bl	d5f42 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d53f4:	f7ff fa30 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53f8:	2110      	movs	r1, #16
   d53fa:	f000 fe7f 	bl	d60fc <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d53fe:	f7ff fa2b 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5402:	2100      	movs	r1, #0
   d5404:	f000 fdae 	bl	d5f64 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5408:	f7ff fa26 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d540c:	f000 fd88 	bl	d5f20 <_ZN8SPIClass5beginEv>
   d5410:	e003      	b.n	d541a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d5412:	f001 fcdd 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d5416:	f001 fa43 	bl	d68a0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d541a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d541e:	2101      	movs	r1, #1
   d5420:	b280      	uxth	r0, r0
   d5422:	f001 fc5b 	bl	d6cdc <pinMode>
  digitalWrite(rst, HIGH);
   d5426:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d542a:	2101      	movs	r1, #1
   d542c:	b280      	uxth	r0, r0
   d542e:	f001 fc66 	bl	d6cfe <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d5432:	2001      	movs	r0, #1
   d5434:	f000 ffd2 	bl	d63dc <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5438:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d543c:	2100      	movs	r1, #0
   d543e:	b280      	uxth	r0, r0
   d5440:	f001 fc5d 	bl	d6cfe <digitalWrite>
  // wait 10ms
  delay(10);
   d5444:	200a      	movs	r0, #10
   d5446:	f000 ffc9 	bl	d63dc <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d544a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d544e:	2101      	movs	r1, #1
   d5450:	b280      	uxth	r0, r0
   d5452:	f001 fc54 	bl	d6cfe <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5456:	4620      	mov	r0, r4
   d5458:	21ae      	movs	r1, #174	; 0xae
   d545a:	f7ff ff51 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d545e:	4620      	mov	r0, r4
   d5460:	21d5      	movs	r1, #213	; 0xd5
   d5462:	f7ff ff4d 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5466:	4620      	mov	r0, r4
   d5468:	2180      	movs	r1, #128	; 0x80
   d546a:	f7ff ff49 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d546e:	4620      	mov	r0, r4
   d5470:	21a8      	movs	r1, #168	; 0xa8
   d5472:	f7ff ff45 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d5476:	4620      	mov	r0, r4
   d5478:	213f      	movs	r1, #63	; 0x3f
   d547a:	f7ff ff41 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d547e:	4620      	mov	r0, r4
   d5480:	21d3      	movs	r1, #211	; 0xd3
   d5482:	f7ff ff3d 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d5486:	4620      	mov	r0, r4
   d5488:	2100      	movs	r1, #0
   d548a:	f7ff ff39 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d548e:	4620      	mov	r0, r4
   d5490:	2140      	movs	r1, #64	; 0x40
   d5492:	f7ff ff35 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5496:	218d      	movs	r1, #141	; 0x8d
   d5498:	4620      	mov	r0, r4
   d549a:	f7ff ff31 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d549e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d54a0:	bf0c      	ite	eq
   d54a2:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d54a4:	2114      	movne	r1, #20
   d54a6:	4620      	mov	r0, r4
   d54a8:	f7ff ff2a 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d54ac:	4620      	mov	r0, r4
   d54ae:	2120      	movs	r1, #32
   d54b0:	f7ff ff26 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d54b4:	4620      	mov	r0, r4
   d54b6:	2100      	movs	r1, #0
   d54b8:	f7ff ff22 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d54bc:	4620      	mov	r0, r4
   d54be:	21a1      	movs	r1, #161	; 0xa1
   d54c0:	f7ff ff1e 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d54c4:	4620      	mov	r0, r4
   d54c6:	21c8      	movs	r1, #200	; 0xc8
   d54c8:	f7ff ff1a 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d54cc:	4620      	mov	r0, r4
   d54ce:	21da      	movs	r1, #218	; 0xda
   d54d0:	f7ff ff16 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d54d4:	4620      	mov	r0, r4
   d54d6:	2112      	movs	r1, #18
   d54d8:	f7ff ff12 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d54dc:	2181      	movs	r1, #129	; 0x81
   d54de:	4620      	mov	r0, r4
   d54e0:	f7ff ff0e 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54e4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d54e6:	bf0c      	ite	eq
   d54e8:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d54ea:	21cf      	movne	r1, #207	; 0xcf
   d54ec:	4620      	mov	r0, r4
   d54ee:	f7ff ff07 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d54f2:	21d9      	movs	r1, #217	; 0xd9
   d54f4:	4620      	mov	r0, r4
   d54f6:	f7ff ff03 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54fa:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d54fc:	bf0c      	ite	eq
   d54fe:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5500:	21f1      	movne	r1, #241	; 0xf1
   d5502:	4620      	mov	r0, r4
   d5504:	f7ff fefc 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5508:	4620      	mov	r0, r4
   d550a:	21db      	movs	r1, #219	; 0xdb
   d550c:	f7ff fef8 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5510:	4620      	mov	r0, r4
   d5512:	2140      	movs	r1, #64	; 0x40
   d5514:	f7ff fef4 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5518:	4620      	mov	r0, r4
   d551a:	21a4      	movs	r1, #164	; 0xa4
   d551c:	f7ff fef0 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5520:	4620      	mov	r0, r4
   d5522:	21a6      	movs	r1, #166	; 0xa6
   d5524:	f7ff feec 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5528:	4620      	mov	r0, r4
   d552a:	21af      	movs	r1, #175	; 0xaf
}
   d552c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5530:	f7ff bee6 	b.w	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5534 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5538:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d553a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d553c:	f7ff fee0 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5540:	2100      	movs	r1, #0
   d5542:	4620      	mov	r0, r4
   d5544:	f7ff fedc 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5548:	217f      	movs	r1, #127	; 0x7f
   d554a:	4620      	mov	r0, r4
   d554c:	f7ff fed8 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5550:	2122      	movs	r1, #34	; 0x22
   d5552:	4620      	mov	r0, r4
   d5554:	f7ff fed4 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5558:	2100      	movs	r1, #0
   d555a:	4620      	mov	r0, r4
   d555c:	f7ff fed0 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d5560:	2107      	movs	r1, #7
   d5562:	4620      	mov	r0, r4
   d5564:	f7ff fecc 	bl	d5300 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d5568:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d556c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d562c <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d5570:	3301      	adds	r3, #1
   d5572:	d035      	beq.n	d55e0 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5574:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5578:	2101      	movs	r1, #1
   d557a:	b280      	uxth	r0, r0
   d557c:	f001 fbbf 	bl	d6cfe <digitalWrite>
    digitalWrite(dc, HIGH);
   d5580:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5584:	2101      	movs	r1, #1
   d5586:	b280      	uxth	r0, r0
   d5588:	f001 fbb9 	bl	d6cfe <digitalWrite>
    digitalWrite(cs, LOW);
   d558c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5590:	2100      	movs	r1, #0
   d5592:	b280      	uxth	r0, r0
   d5594:	f001 fbb3 	bl	d6cfe <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5598:	2001      	movs	r0, #1
   d559a:	f000 fabf 	bl	d5b1c <HAL_Delay_Microseconds>
   d559e:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d55a4:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d55a8:	b12b      	cbz	r3, d55b6 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d55aa:	f7ff f955 	bl	d4858 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d55ae:	4631      	mov	r1, r6
   d55b0:	f000 fdc8 	bl	d6144 <_ZN8SPIClass8transferEh>
   d55b4:	e005      	b.n	d55c2 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d55b6:	4633      	mov	r3, r6
   d55b8:	2201      	movs	r2, #1
   d55ba:	7fa1      	ldrb	r1, [r4, #30]
   d55bc:	7f60      	ldrb	r0, [r4, #29]
   d55be:	f001 fbca 	bl	d6d56 <shiftOut>
   d55c2:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d55c4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d55c8:	d1ea      	bne.n	d55a0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d55ca:	2001      	movs	r0, #1
   d55cc:	f000 faa6 	bl	d5b1c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d55d4:	2101      	movs	r1, #1
   d55d6:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d55d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55dc:	f001 bb8f 	b.w	d6cfe <digitalWrite>
   d55e0:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d55e2:	f001 fbf5 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d55e6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d55ea:	f001 f994 	bl	d6916 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d55ee:	f001 fbef 	bl	d6dd0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d55f2:	6803      	ldr	r3, [r0, #0]
   d55f4:	2140      	movs	r1, #64	; 0x40
   d55f6:	689b      	ldr	r3, [r3, #8]
   d55f8:	4798      	blx	r3
   d55fa:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d55fc:	f001 fbe8 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d5600:	19af      	adds	r7, r5, r6
   d5602:	6803      	ldr	r3, [r0, #0]
   d5604:	b2bf      	uxth	r7, r7
   d5606:	689b      	ldr	r3, [r3, #8]
   d5608:	f818 1007 	ldrb.w	r1, [r8, r7]
   d560c:	3601      	adds	r6, #1
   d560e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5610:	2e10      	cmp	r6, #16
   d5612:	d1f3      	bne.n	d55fc <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5614:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5616:	f001 fbdb 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d561a:	b2ad      	uxth	r5, r5
   d561c:	f001 f982 	bl	d6924 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5620:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5624:	d1dd      	bne.n	d55e2 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d562a:	bf00      	nop
   d562c:	2003de88 	.word	0x2003de88

000d5630 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5630:	f000 b9ec 	b.w	d5a0c <HAL_Pin_Map>

000d5634 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5638:	b085      	sub	sp, #20
   d563a:	461e      	mov	r6, r3
   d563c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5640:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5644:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5646:	1a9a      	subs	r2, r3, r2
   d5648:	2a00      	cmp	r2, #0
   d564a:	bfb8      	it	lt
   d564c:	4252      	neglt	r2, r2
   d564e:	9200      	str	r2, [sp, #0]
   d5650:	1a72      	subs	r2, r6, r1
   d5652:	2a00      	cmp	r2, #0
   d5654:	bfb8      	it	lt
   d5656:	4252      	neglt	r2, r2
   d5658:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d565a:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d565c:	9a00      	ldr	r2, [sp, #0]
   d565e:	9901      	ldr	r1, [sp, #4]
   d5660:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5662:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5664:	dd05      	ble.n	d5672 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d5666:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d5668:	461e      	mov	r6, r3
   d566a:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d566c:	4622      	mov	r2, r4
    swap(x0, y0);
   d566e:	462c      	mov	r4, r5
   d5670:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d5672:	42b4      	cmp	r4, r6
   d5674:	dd05      	ble.n	d5682 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d5676:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5678:	461d      	mov	r5, r3
   d567a:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d567c:	4622      	mov	r2, r4
   d567e:	4634      	mov	r4, r6
   d5680:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d5682:	1b5a      	subs	r2, r3, r5
   d5684:	2a00      	cmp	r2, #0
   d5686:	bfb8      	it	lt
   d5688:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d568a:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d568e:	429d      	cmp	r5, r3
   d5690:	bfb4      	ite	lt
   d5692:	2301      	movlt	r3, #1
   d5694:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5698:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d569c:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d569e:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d56a0:	fa0f f788 	sxth.w	r7, r8
   d56a4:	2202      	movs	r2, #2
   d56a6:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d56aa:	42b4      	cmp	r4, r6
   d56ac:	dc1f      	bgt.n	d56ee <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d56ae:	9a01      	ldr	r2, [sp, #4]
   d56b0:	9b00      	ldr	r3, [sp, #0]
   d56b2:	4293      	cmp	r3, r2
   d56b4:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d56b8:	bfc8      	it	gt
   d56ba:	4622      	movgt	r2, r4
   d56bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d56c0:	bfc8      	it	gt
   d56c2:	4629      	movgt	r1, r5
   d56c4:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d56c6:	bfdc      	itt	le
   d56c8:	462a      	movle	r2, r5
   d56ca:	4621      	movle	r1, r4
   d56cc:	4648      	mov	r0, r9
   d56ce:	47d8      	blx	fp
    }
    err -= dy;
   d56d0:	9b03      	ldr	r3, [sp, #12]
   d56d2:	1aff      	subs	r7, r7, r3
   d56d4:	b2bb      	uxth	r3, r7
   d56d6:	b21f      	sxth	r7, r3
    if (err < 0) {
   d56d8:	2f00      	cmp	r7, #0
   d56da:	da05      	bge.n	d56e8 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d56dc:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d56de:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d56e2:	4415      	add	r5, r2
   d56e4:	b22d      	sxth	r5, r5
      err += dx;
   d56e6:	b23f      	sxth	r7, r7
   d56e8:	3401      	adds	r4, #1
   d56ea:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d56ec:	e7dd      	b.n	d56aa <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d56ee:	b005      	add	sp, #20
   d56f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d56f4 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d56f8:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d56fc:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56fe:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5702:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5704:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5706:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5708:	4691      	mov	r9, r2
   d570a:	460d      	mov	r5, r1
   d570c:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d570e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5710:	6823      	ldr	r3, [r4, #0]
   d5712:	9600      	str	r6, [sp, #0]
   d5714:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5718:	444a      	add	r2, r9
   d571a:	69df      	ldr	r7, [r3, #28]
   d571c:	4629      	mov	r1, r5
   d571e:	4643      	mov	r3, r8
   d5720:	4620      	mov	r0, r4
   d5722:	b212      	sxth	r2, r2
   d5724:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5726:	6823      	ldr	r3, [r4, #0]
   d5728:	9600      	str	r6, [sp, #0]
   d572a:	699f      	ldr	r7, [r3, #24]
   d572c:	464a      	mov	r2, r9
   d572e:	4653      	mov	r3, sl
   d5730:	4629      	mov	r1, r5
   d5732:	4620      	mov	r0, r4
   d5734:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5736:	6823      	ldr	r3, [r4, #0]
   d5738:	960a      	str	r6, [sp, #40]	; 0x28
   d573a:	f108 31ff 	add.w	r1, r8, #4294967295
   d573e:	4429      	add	r1, r5
   d5740:	699d      	ldr	r5, [r3, #24]
   d5742:	464a      	mov	r2, r9
   d5744:	4653      	mov	r3, sl
   d5746:	b209      	sxth	r1, r1
   d5748:	4620      	mov	r0, r4
   d574a:	46ac      	mov	ip, r5
}
   d574c:	b002      	add	sp, #8
   d574e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d5752:	4760      	bx	ip

000d5754 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5754:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5756:	3b01      	subs	r3, #1
   d5758:	4413      	add	r3, r2
   d575a:	6804      	ldr	r4, [r0, #0]
   d575c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5760:	9501      	str	r5, [sp, #4]
   d5762:	b21b      	sxth	r3, r3
   d5764:	9300      	str	r3, [sp, #0]
   d5766:	6964      	ldr	r4, [r4, #20]
   d5768:	460b      	mov	r3, r1
   d576a:	47a0      	blx	r4
}
   d576c:	b003      	add	sp, #12
   d576e:	bd30      	pop	{r4, r5, pc}

000d5770 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d5770:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d5772:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5776:	6804      	ldr	r4, [r0, #0]
   d5778:	e88d 0024 	stmia.w	sp, {r2, r5}
   d577c:	3b01      	subs	r3, #1
   d577e:	440b      	add	r3, r1
   d5780:	6964      	ldr	r4, [r4, #20]
   d5782:	b21b      	sxth	r3, r3
   d5784:	47a0      	blx	r4
}
   d5786:	b003      	add	sp, #12
   d5788:	bd30      	pop	{r4, r5, pc}

000d578a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d578a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d578e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d5792:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5796:	4605      	mov	r5, r0
   d5798:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d579a:	460c      	mov	r4, r1
   d579c:	eb01 0a03 	add.w	sl, r1, r3
   d57a0:	4554      	cmp	r4, sl
   d57a2:	da0b      	bge.n	d57bc <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d57a4:	682b      	ldr	r3, [r5, #0]
   d57a6:	f8cd 9000 	str.w	r9, [sp]
   d57aa:	699e      	ldr	r6, [r3, #24]
   d57ac:	4621      	mov	r1, r4
   d57ae:	4643      	mov	r3, r8
   d57b0:	463a      	mov	r2, r7
   d57b2:	4628      	mov	r0, r5
   d57b4:	3401      	adds	r4, #1
   d57b6:	47b0      	blx	r6
   d57b8:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d57ba:	e7f1      	b.n	d57a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d57bc:	b002      	add	sp, #8
   d57be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d57c2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d57c2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d57c4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d57c8:	6804      	ldr	r4, [r0, #0]
   d57ca:	9101      	str	r1, [sp, #4]
   d57cc:	9200      	str	r2, [sp, #0]
   d57ce:	2200      	movs	r2, #0
   d57d0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d57d4:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d57d6:	4611      	mov	r1, r2
   d57d8:	47a0      	blx	r4
}
   d57da:	b002      	add	sp, #8
   d57dc:	bd10      	pop	{r4, pc}

000d57de <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d57de:	4770      	bx	lr

000d57e0 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d57e0:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d57e2:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57e4:	2400      	movs	r4, #0
   d57e6:	4d08      	ldr	r5, [pc, #32]	; (d5808 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d57e8:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d57ea:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d57ec:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d57ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d57f2:	2201      	movs	r2, #1
   d57f4:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d57f6:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d57f8:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d57fa:	8204      	strh	r4, [r0, #16]
   d57fc:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d57fe:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d5800:	82c1      	strh	r1, [r0, #22]
   d5802:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5804:	7682      	strb	r2, [r0, #26]
}
   d5806:	bd30      	pop	{r4, r5, pc}
   d5808:	000d7d80 	.word	0x000d7d80

000d580c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5810:	b08f      	sub	sp, #60	; 0x3c
   d5812:	4605      	mov	r5, r0
   d5814:	9106      	str	r1, [sp, #24]
   d5816:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d581a:	9107      	str	r1, [sp, #28]
   d581c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5820:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d5822:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5826:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5828:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d582c:	4281      	cmp	r1, r0
   d582e:	dd7c      	ble.n	d592a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5830:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5834:	4291      	cmp	r1, r2
   d5836:	dd78      	ble.n	d592a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5838:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d583a:	fb11 0008 	smlabb	r0, r1, r8, r0
   d583e:	2800      	cmp	r0, #0
   d5840:	dd73      	ble.n	d592a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5842:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5846:	2800      	cmp	r0, #0
   d5848:	dd6f      	ble.n	d592a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d584a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d584e:	b296      	uxth	r6, r2
   d5850:	930c      	str	r3, [sp, #48]	; 0x30
   d5852:	f106 0308 	add.w	r3, r6, #8
   d5856:	b29b      	uxth	r3, r3
   d5858:	9109      	str	r1, [sp, #36]	; 0x24
   d585a:	2400      	movs	r4, #0
   d585c:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d585e:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5860:	bf1c      	itt	ne
   d5862:	4b33      	ldrne	r3, [pc, #204]	; (d5930 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d5864:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5866:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5868:	bf16      	itet	ne
   d586a:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d586c:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5870:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5874:	9604      	str	r6, [sp, #16]
   d5876:	fa1f f388 	uxth.w	r3, r8
   d587a:	9303      	str	r3, [sp, #12]
   d587c:	9a03      	ldr	r2, [sp, #12]
   d587e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d5882:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5886:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d588a:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d588c:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d588e:	920a      	str	r2, [sp, #40]	; 0x28
   d5890:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5892:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5896:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d5898:	f019 0f01 	tst.w	r9, #1
   d589c:	d011      	beq.n	d58c2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d589e:	f1b8 0f01 	cmp.w	r8, #1
   d58a2:	682b      	ldr	r3, [r5, #0]
   d58a4:	d103      	bne.n	d58ae <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d58a6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d58aa:	9b07      	ldr	r3, [sp, #28]
   d58ac:	e014      	b.n	d58d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d58ae:	9a07      	ldr	r2, [sp, #28]
   d58b0:	9201      	str	r2, [sp, #4]
   d58b2:	f8cd a000 	str.w	sl, [sp]
   d58b6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d58ba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d58be:	4653      	mov	r3, sl
   d58c0:	e018      	b.n	d58f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d58c2:	9b07      	ldr	r3, [sp, #28]
   d58c4:	9a08      	ldr	r2, [sp, #32]
   d58c6:	4293      	cmp	r3, r2
   d58c8:	d017      	beq.n	d58fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d58ca:	f1b8 0f01 	cmp.w	r8, #1
   d58ce:	682b      	ldr	r3, [r5, #0]
   d58d0:	d107      	bne.n	d58e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d58d2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d58d6:	4613      	mov	r3, r2
   d58d8:	b23a      	sxth	r2, r7
   d58da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d58dc:	4628      	mov	r0, r5
   d58de:	47d8      	blx	fp
   d58e0:	e00b      	b.n	d58fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d58e2:	9a08      	ldr	r2, [sp, #32]
   d58e4:	9201      	str	r2, [sp, #4]
   d58e6:	f8cd a000 	str.w	sl, [sp]
   d58ea:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d58ee:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d58f2:	4653      	mov	r3, sl
   d58f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   d58f6:	4628      	mov	r0, r5
   d58f8:	47d8      	blx	fp
   d58fa:	9b04      	ldr	r3, [sp, #16]
   d58fc:	9a03      	ldr	r2, [sp, #12]
   d58fe:	4413      	add	r3, r2
   d5900:	b29b      	uxth	r3, r3
   d5902:	9304      	str	r3, [sp, #16]
   d5904:	9b05      	ldr	r3, [sp, #20]
   d5906:	4413      	add	r3, r2
   d5908:	b29b      	uxth	r3, r3
   d590a:	3701      	adds	r7, #1
   d590c:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d590e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5910:	b2bf      	uxth	r7, r7
   d5912:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5914:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5918:	d1be      	bne.n	d5898 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d591a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d591c:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d591e:	3401      	adds	r4, #1
   d5920:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5924:	b264      	sxtb	r4, r4
   d5926:	9309      	str	r3, [sp, #36]	; 0x24
   d5928:	d199      	bne.n	d585e <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d592a:	b00f      	add	sp, #60	; 0x3c
   d592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5930:	000d7db0 	.word	0x000d7db0

000d5934 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5934:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5936:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5938:	b085      	sub	sp, #20
   d593a:	4604      	mov	r4, r0
   d593c:	460b      	mov	r3, r1

  if (c == '\n') {
   d593e:	d104      	bne.n	d594a <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5940:	7e02      	ldrb	r2, [r0, #24]
   d5942:	8a43      	ldrh	r3, [r0, #18]
   d5944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5948:	e023      	b.n	d5992 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d594a:	290d      	cmp	r1, #13
   d594c:	d024      	beq.n	d5998 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d594e:	7e05      	ldrb	r5, [r0, #24]
   d5950:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5954:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5958:	9502      	str	r5, [sp, #8]
   d595a:	8ac5      	ldrh	r5, [r0, #22]
   d595c:	9501      	str	r5, [sp, #4]
   d595e:	8a85      	ldrh	r5, [r0, #20]
   d5960:	9500      	str	r5, [sp, #0]
   d5962:	f7ff ff53 	bl	d580c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5966:	7e22      	ldrb	r2, [r4, #24]
   d5968:	8a23      	ldrh	r3, [r4, #16]
   d596a:	b291      	uxth	r1, r2
   d596c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5970:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5974:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d5976:	b21b      	sxth	r3, r3
   d5978:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d597a:	b168      	cbz	r0, d5998 <_ZN12Adafruit_GFX5writeEh+0x64>
   d597c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5980:	f06f 0505 	mvn.w	r5, #5
   d5984:	fb05 0202 	mla	r2, r5, r2, r0
   d5988:	4293      	cmp	r3, r2
   d598a:	dd05      	ble.n	d5998 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d598c:	8a63      	ldrh	r3, [r4, #18]
   d598e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d5992:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5994:	2300      	movs	r3, #0
   d5996:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5998:	2001      	movs	r0, #1
   d599a:	b005      	add	sp, #20
   d599c:	bd30      	pop	{r4, r5, pc}

000d599e <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d599e:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d59a0:	8242      	strh	r2, [r0, #18]
   d59a2:	4770      	bx	lr

000d59a4 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d59a4:	2900      	cmp	r1, #0
   d59a6:	bf08      	it	eq
   d59a8:	2101      	moveq	r1, #1
   d59aa:	7601      	strb	r1, [r0, #24]
   d59ac:	4770      	bx	lr

000d59ae <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d59ae:	82c1      	strh	r1, [r0, #22]
   d59b0:	8281      	strh	r1, [r0, #20]
   d59b2:	4770      	bx	lr

000d59b4 <_ZN12Adafruit_GFX12setTextColorEtt>:
}

void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {
  textcolor   = c;
   d59b4:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
   d59b6:	82c2      	strh	r2, [r0, #22]
   d59b8:	4770      	bx	lr

000d59ba <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d59ba:	7e40      	ldrb	r0, [r0, #25]
   d59bc:	4770      	bx	lr

000d59be <_ZN12Adafruit_GFX11setRotationEh>:

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d59be:	f001 0103 	and.w	r1, r1, #3
  switch(rotation) {
   d59c2:	2901      	cmp	r1, #1
uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d59c4:	7641      	strb	r1, [r0, #25]
   d59c6:	8903      	ldrh	r3, [r0, #8]
   d59c8:	8942      	ldrh	r2, [r0, #10]
  switch(rotation) {
   d59ca:	d004      	beq.n	d59d6 <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d59cc:	2903      	cmp	r1, #3
   d59ce:	d002      	beq.n	d59d6 <_ZN12Adafruit_GFX11setRotationEh+0x18>
   case 0:
   case 2:
    _width  = WIDTH;
   d59d0:	8183      	strh	r3, [r0, #12]
    _height = HEIGHT;
   d59d2:	81c2      	strh	r2, [r0, #14]
    break;
   d59d4:	4770      	bx	lr
   case 1:
   case 3:
    _width  = HEIGHT;
   d59d6:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
   d59d8:	81c3      	strh	r3, [r0, #14]
   d59da:	4770      	bx	lr

000d59dc <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d59dc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d59e0:	4770      	bx	lr

000d59e2 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d59e2:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d59e6:	4770      	bx	lr

000d59e8 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d59e8:	f000 b810 	b.w	d5a0c <HAL_Pin_Map>

000d59ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <netdb_freeaddrinfo+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	689b      	ldr	r3, [r3, #8]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	00030268 	.word	0x00030268

000d59fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <netdb_getaddrinfo+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	68db      	ldr	r3, [r3, #12]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030268 	.word	0x00030268

000d5a0c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <HAL_Pin_Map+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	681b      	ldr	r3, [r3, #0]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	0003022c 	.word	0x0003022c

000d5a1c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <HAL_Pin_Mode+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	689b      	ldr	r3, [r3, #8]
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	0003022c 	.word	0x0003022c

000d5a2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <HAL_Get_Pin_Mode+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	68db      	ldr	r3, [r3, #12]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	0003022c 	.word	0x0003022c

000d5a3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <HAL_GPIO_Write+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	691b      	ldr	r3, [r3, #16]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	0003022c 	.word	0x0003022c

000d5a4c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <HAL_GPIO_Read+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	695b      	ldr	r3, [r3, #20]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	0003022c 	.word	0x0003022c

000d5a5c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <HAL_SPI_Begin+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	681b      	ldr	r3, [r3, #0]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030230 	.word	0x00030230

000d5a6c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <HAL_SPI_Set_Bit_Order+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	689b      	ldr	r3, [r3, #8]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030230 	.word	0x00030230

000d5a7c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <HAL_SPI_Set_Data_Mode+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	68db      	ldr	r3, [r3, #12]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030230 	.word	0x00030230

000d5a8c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	691b      	ldr	r3, [r3, #16]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030230 	.word	0x00030230

000d5a9c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <HAL_SPI_Send_Receive_Data+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	695b      	ldr	r3, [r3, #20]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030230 	.word	0x00030230

000d5aac <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <HAL_SPI_Init+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	69db      	ldr	r3, [r3, #28]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030230 	.word	0x00030230

000d5abc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <HAL_SPI_Is_Enabled+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6a1b      	ldr	r3, [r3, #32]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030230 	.word	0x00030230

000d5acc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <HAL_SPI_Info+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030230 	.word	0x00030230

000d5adc <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <HAL_SPI_Set_Settings+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030230 	.word	0x00030230

000d5aec <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <HAL_SPI_Acquire+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030230 	.word	0x00030230

000d5afc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <HAL_SPI_Release+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030230 	.word	0x00030230

000d5b0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <HAL_RNG_GetRandomNumber+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	685b      	ldr	r3, [r3, #4]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030218 	.word	0x00030218

000d5b1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <HAL_Delay_Microseconds+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	68db      	ldr	r3, [r3, #12]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	00030218 	.word	0x00030218

000d5b2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	695b      	ldr	r3, [r3, #20]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	00030218 	.word	0x00030218

000d5b3c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <os_thread_is_current+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	689b      	ldr	r3, [r3, #8]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030248 	.word	0x00030248

000d5b4c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <os_thread_join+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	691b      	ldr	r3, [r3, #16]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030248 	.word	0x00030248

000d5b5c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <os_thread_cleanup+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	695b      	ldr	r3, [r3, #20]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030248 	.word	0x00030248

000d5b6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <os_mutex_recursive_create+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030248 	.word	0x00030248

000d5b7c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <os_mutex_recursive_destroy+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	00030248 	.word	0x00030248

000d5b8c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <inet_inet_ntop+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	695b      	ldr	r3, [r3, #20]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	00030264 	.word	0x00030264

000d5b9c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <HAL_USART_Init+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	681b      	ldr	r3, [r3, #0]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	0003023c 	.word	0x0003023c

000d5bac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <HAL_USART_Write_Data+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	68db      	ldr	r3, [r3, #12]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	0003023c 	.word	0x0003023c

000d5bbc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <HAL_USART_Available_Data+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	691b      	ldr	r3, [r3, #16]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003023c 	.word	0x0003023c

000d5bcc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_USART_Read_Data+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	695b      	ldr	r3, [r3, #20]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	0003023c 	.word	0x0003023c

000d5bdc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_USART_Peek_Data+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	699b      	ldr	r3, [r3, #24]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	0003023c 	.word	0x0003023c

000d5bec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <HAL_USART_Flush_Data+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	69db      	ldr	r3, [r3, #28]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	0003023c 	.word	0x0003023c

000d5bfc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_USART_Is_Enabled+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6a1b      	ldr	r3, [r3, #32]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003023c 	.word	0x0003023c

000d5c0c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_USART_Available_Data_For_Write+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003023c 	.word	0x0003023c

000d5c1c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_I2C_Begin+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	68db      	ldr	r3, [r3, #12]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030228 	.word	0x00030228

000d5c2c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <HAL_I2C_Begin_Transmission+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	699b      	ldr	r3, [r3, #24]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030228 	.word	0x00030228

000d5c3c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <HAL_I2C_End_Transmission+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	69db      	ldr	r3, [r3, #28]
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030228 	.word	0x00030228

000d5c4c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <HAL_I2C_Write_Data+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	6a1b      	ldr	r3, [r3, #32]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030228 	.word	0x00030228

000d5c5c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <HAL_I2C_Available_Data+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030228 	.word	0x00030228

000d5c6c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <HAL_I2C_Read_Data+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030228 	.word	0x00030228

000d5c7c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <HAL_I2C_Peek_Data+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030228 	.word	0x00030228

000d5c8c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <HAL_I2C_Flush_Data+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030228 	.word	0x00030228

000d5c9c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <HAL_I2C_Is_Enabled+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	00030228 	.word	0x00030228

000d5cac <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <HAL_I2C_Init+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	00030228 	.word	0x00030228

000d5cbc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <HAL_I2C_Request_Data_Ex+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	00030228 	.word	0x00030228

000d5ccc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <HAL_USB_USART_Init+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	681b      	ldr	r3, [r3, #0]
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	0003024c 	.word	0x0003024c

000d5cdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <HAL_USB_USART_Begin+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	685b      	ldr	r3, [r3, #4]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	0003024c 	.word	0x0003024c

000d5cec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <HAL_USB_USART_Available_Data+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	691b      	ldr	r3, [r3, #16]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	0003024c 	.word	0x0003024c

000d5cfc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	695b      	ldr	r3, [r3, #20]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	0003024c 	.word	0x0003024c

000d5d0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <HAL_USB_USART_Receive_Data+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	699b      	ldr	r3, [r3, #24]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	0003024c 	.word	0x0003024c

000d5d1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <HAL_USB_USART_Send_Data+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	69db      	ldr	r3, [r3, #28]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	0003024c 	.word	0x0003024c

000d5d2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <HAL_USB_USART_Flush_Data+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	6a1b      	ldr	r3, [r3, #32]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	0003024c 	.word	0x0003024c

000d5d3c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <panic_+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030260 	.word	0x00030260

000d5d4c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <set_system_mode+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	685b      	ldr	r3, [r3, #4]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030220 	.word	0x00030220

000d5d5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <system_delay_ms+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	695b      	ldr	r3, [r3, #20]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030220 	.word	0x00030220

000d5d6c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b03      	ldr	r3, [pc, #12]	; (d5d7c <system_ctrl_set_app_request_handler+0x10>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d76:	9301      	str	r3, [sp, #4]
   d5d78:	bd08      	pop	{r3, pc}
   d5d7a:	0000      	.short	0x0000
   d5d7c:	00030220 	.word	0x00030220

000d5d80 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b03      	ldr	r3, [pc, #12]	; (d5d90 <system_ctrl_set_result+0x10>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d8a:	9301      	str	r3, [sp, #4]
   d5d8c:	bd08      	pop	{r3, pc}
   d5d8e:	0000      	.short	0x0000
   d5d90:	00030220 	.word	0x00030220

000d5d94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <network_connect+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	685b      	ldr	r3, [r3, #4]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030240 	.word	0x00030240

000d5da4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <network_connecting+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	689b      	ldr	r3, [r3, #8]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030240 	.word	0x00030240

000d5db4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <network_disconnect+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	68db      	ldr	r3, [r3, #12]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030240 	.word	0x00030240

000d5dc4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <network_ready+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	691b      	ldr	r3, [r3, #16]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030240 	.word	0x00030240

000d5dd4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <network_on+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	695b      	ldr	r3, [r3, #20]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030240 	.word	0x00030240

000d5de4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <network_off+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	699b      	ldr	r3, [r3, #24]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030240 	.word	0x00030240

000d5df4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <network_listen+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	69db      	ldr	r3, [r3, #28]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030240 	.word	0x00030240

000d5e04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <network_listening+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6a1b      	ldr	r3, [r3, #32]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030240 	.word	0x00030240

000d5e14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <network_set_listen_timeout+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030240 	.word	0x00030240

000d5e24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <network_get_listen_timeout+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030240 	.word	0x00030240

000d5e34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030244 	.word	0x00030244

000d5e44 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <malloc+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	681b      	ldr	r3, [r3, #0]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	0003021c 	.word	0x0003021c

000d5e54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <free+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	685b      	ldr	r3, [r3, #4]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	0003021c 	.word	0x0003021c

000d5e64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <realloc+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	689b      	ldr	r3, [r3, #8]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	0003021c 	.word	0x0003021c

000d5e74 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <vsnprintf+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	0003021c 	.word	0x0003021c

000d5e84 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e84:	2200      	movs	r2, #0
   d5e86:	4611      	mov	r1, r2
   d5e88:	6840      	ldr	r0, [r0, #4]
   d5e8a:	f7ff bfbb 	b.w	d5e04 <network_listening>

000d5e8e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e8e:	2200      	movs	r2, #0
   d5e90:	4611      	mov	r1, r2
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7ff bfc6 	b.w	d5e24 <network_get_listen_timeout>

000d5e98 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e98:	2200      	movs	r2, #0
   d5e9a:	6840      	ldr	r0, [r0, #4]
   d5e9c:	f7ff bfba 	b.w	d5e14 <network_set_listen_timeout>

000d5ea0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	f081 0101 	eor.w	r1, r1, #1
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	f7ff bfa4 	b.w	d5df4 <network_listen>

000d5eac <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5eac:	2300      	movs	r3, #0
   d5eae:	461a      	mov	r2, r3
   d5eb0:	4619      	mov	r1, r3
   d5eb2:	6840      	ldr	r0, [r0, #4]
   d5eb4:	f7ff bf96 	b.w	d5de4 <network_off>

000d5eb8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5eb8:	2300      	movs	r3, #0
   d5eba:	461a      	mov	r2, r3
   d5ebc:	4619      	mov	r1, r3
   d5ebe:	6840      	ldr	r0, [r0, #4]
   d5ec0:	f7ff bf88 	b.w	d5dd4 <network_on>

000d5ec4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ec4:	2200      	movs	r2, #0
   d5ec6:	4611      	mov	r1, r2
   d5ec8:	6840      	ldr	r0, [r0, #4]
   d5eca:	f7ff bf7b 	b.w	d5dc4 <network_ready>

000d5ece <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ece:	2200      	movs	r2, #0
   d5ed0:	4611      	mov	r1, r2
   d5ed2:	6840      	ldr	r0, [r0, #4]
   d5ed4:	f7ff bf66 	b.w	d5da4 <network_connecting>

000d5ed8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ed8:	2200      	movs	r2, #0
   d5eda:	2102      	movs	r1, #2
   d5edc:	6840      	ldr	r0, [r0, #4]
   d5ede:	f7ff bf69 	b.w	d5db4 <network_disconnect>

000d5ee2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ee2:	2300      	movs	r3, #0
   d5ee4:	461a      	mov	r2, r3
   d5ee6:	6840      	ldr	r0, [r0, #4]
   d5ee8:	f7ff bf54 	b.w	d5d94 <network_connect>

000d5eec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5eec:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5eee:	2203      	movs	r2, #3
   d5ef0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ef2:	4a02      	ldr	r2, [pc, #8]	; (d5efc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ef4:	601a      	str	r2, [r3, #0]
   d5ef6:	4770      	bx	lr
   d5ef8:	2003e3dc 	.word	0x2003e3dc
   d5efc:	000d82b4 	.word	0x000d82b4

000d5f00 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5f00:	2100      	movs	r1, #0
   d5f02:	f7ff bdf3 	b.w	d5aec <HAL_SPI_Acquire>

000d5f06 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5f06:	2100      	movs	r1, #0
   d5f08:	f7ff bdf8 	b.w	d5afc <HAL_SPI_Release>

000d5f0c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	4604      	mov	r4, r0
{
    _spi = spi;
   d5f10:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5f12:	4608      	mov	r0, r1
   d5f14:	f7ff fdca 	bl	d5aac <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f18:	2300      	movs	r3, #0
   d5f1a:	6063      	str	r3, [r4, #4]
}
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	bd10      	pop	{r4, pc}

000d5f20 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5f20:	b510      	push	{r4, lr}
   d5f22:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5f24:	7800      	ldrb	r0, [r0, #0]
   d5f26:	f7ff ffeb 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d5f2a:	b948      	cbnz	r0, d5f40 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5f2c:	7820      	ldrb	r0, [r4, #0]
   d5f2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5f32:	f7ff fd93 	bl	d5a5c <HAL_SPI_Begin>
        unlock();
   d5f36:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5f3c:	f7ff bfe3 	b.w	d5f06 <_ZN8SPIClass6unlockEv.isra.1>
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f42:	b538      	push	{r3, r4, r5, lr}
   d5f44:	4604      	mov	r4, r0
    if (!lock())
   d5f46:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5f48:	460d      	mov	r5, r1
    if (!lock())
   d5f4a:	f7ff ffd9 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d5f4e:	b940      	cbnz	r0, d5f62 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5f50:	7820      	ldrb	r0, [r4, #0]
   d5f52:	4629      	mov	r1, r5
   d5f54:	f7ff fd8a 	bl	d5a6c <HAL_SPI_Set_Bit_Order>
        unlock();
   d5f58:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5f5e:	f7ff bfd2 	b.w	d5f06 <_ZN8SPIClass6unlockEv.isra.1>
   d5f62:	bd38      	pop	{r3, r4, r5, pc}

000d5f64 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f64:	b538      	push	{r3, r4, r5, lr}
   d5f66:	4604      	mov	r4, r0
    if (!lock())
   d5f68:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5f6a:	460d      	mov	r5, r1
    if (!lock())
   d5f6c:	f7ff ffc8 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d5f70:	b940      	cbnz	r0, d5f84 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5f72:	7820      	ldrb	r0, [r4, #0]
   d5f74:	4629      	mov	r1, r5
   d5f76:	f7ff fd81 	bl	d5a7c <HAL_SPI_Set_Data_Mode>
        unlock();
   d5f7a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5f80:	f7ff bfc1 	b.w	d5f06 <_ZN8SPIClass6unlockEv.isra.1>
   d5f84:	bd38      	pop	{r3, r4, r5, pc}

000d5f86 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5f86:	7800      	ldrb	r0, [r0, #0]
   d5f88:	f7ff bfbd 	b.w	d5f06 <_ZN8SPIClass6unlockEv.isra.1>

000d5f8c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f8c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5f8e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5f90:	6018      	str	r0, [r3, #0]
   d5f92:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5f94:	6818      	ldr	r0, [r3, #0]
   d5f96:	4288      	cmp	r0, r1
   d5f98:	b2e5      	uxtb	r5, r4
   d5f9a:	d906      	bls.n	d5faa <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5f9c:	3401      	adds	r4, #1
   d5f9e:	2c08      	cmp	r4, #8
   d5fa0:	d002      	beq.n	d5fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5fa2:	0840      	lsrs	r0, r0, #1
   d5fa4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5fa6:	e7f5      	b.n	d5f94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5fa8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5fac:	5d5b      	ldrb	r3, [r3, r5]
   d5fae:	7013      	strb	r3, [r2, #0]
   d5fb0:	bd30      	pop	{r4, r5, pc}
   d5fb2:	bf00      	nop
   d5fb4:	000d82e0 	.word	0x000d82e0

000d5fb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5fbc:	4607      	mov	r7, r0
   d5fbe:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5fc0:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5fc2:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5fc4:	f7ff ff9c 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d5fc8:	2800      	cmp	r0, #0
   d5fca:	db62      	blt.n	d6092 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5fcc:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5fce:	2214      	movs	r2, #20
   d5fd0:	2100      	movs	r1, #0
   d5fd2:	a809      	add	r0, sp, #36	; 0x24
   d5fd4:	f001 fcbf 	bl	d7956 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fd8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5fda:	4620      	mov	r0, r4
   d5fdc:	2200      	movs	r2, #0
   d5fde:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5fe0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5fe4:	f7ff fd72 	bl	d5acc <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5fe8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d5fec:	b154      	cbz	r4, d6004 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d5fee:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5ff2:	b935      	cbnz	r5, d6002 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5ff4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5ff8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5ffc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6000:	e003      	b.n	d600a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6002:	2400      	movs	r4, #0
   d6004:	46a1      	mov	r9, r4
   d6006:	46a0      	mov	r8, r4
   d6008:	2501      	movs	r5, #1
   d600a:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d600c:	b105      	cbz	r5, d6010 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d600e:	b9bb      	cbnz	r3, d6040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6010:	429d      	cmp	r5, r3
   d6012:	d10b      	bne.n	d602c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6014:	68b2      	ldr	r2, [r6, #8]
   d6016:	4542      	cmp	r2, r8
   d6018:	d108      	bne.n	d602c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d601a:	f88d 9020 	strb.w	r9, [sp, #32]
   d601e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6022:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6026:	89b2      	ldrh	r2, [r6, #12]
   d6028:	4291      	cmp	r1, r2
   d602a:	d009      	beq.n	d6040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d602c:	b153      	cbz	r3, d6044 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d602e:	2400      	movs	r4, #0
   d6030:	7838      	ldrb	r0, [r7, #0]
   d6032:	9401      	str	r4, [sp, #4]
   d6034:	9400      	str	r4, [sp, #0]
   d6036:	4623      	mov	r3, r4
   d6038:	4622      	mov	r2, r4
   d603a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d603c:	f7ff fd4e 	bl	d5adc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6040:	2000      	movs	r0, #0
   d6042:	e026      	b.n	d6092 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6044:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6048:	68b1      	ldr	r1, [r6, #8]
   d604a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d604c:	ab04      	add	r3, sp, #16
   d604e:	f10d 020f 	add.w	r2, sp, #15
   d6052:	f7ff ff9b 	bl	d5f8c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6056:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6058:	b105      	cbz	r5, d605c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d605a:	b9b1      	cbnz	r1, d608a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d605c:	42a9      	cmp	r1, r5
   d605e:	d008      	beq.n	d6072 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6060:	2400      	movs	r4, #0
   d6062:	7838      	ldrb	r0, [r7, #0]
   d6064:	9401      	str	r4, [sp, #4]
   d6066:	7b74      	ldrb	r4, [r6, #13]
   d6068:	7b33      	ldrb	r3, [r6, #12]
   d606a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d606e:	9400      	str	r4, [sp, #0]
   d6070:	e7e4      	b.n	d603c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6072:	68b3      	ldr	r3, [r6, #8]
   d6074:	4543      	cmp	r3, r8
   d6076:	d3f3      	bcc.n	d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6078:	f88d 9020 	strb.w	r9, [sp, #32]
   d607c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6080:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6084:	89b3      	ldrh	r3, [r6, #12]
   d6086:	429a      	cmp	r2, r3
   d6088:	d1ea      	bne.n	d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d608a:	9b04      	ldr	r3, [sp, #16]
   d608c:	4543      	cmp	r3, r8
   d608e:	d1e7      	bne.n	d6060 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6090:	e7d6      	b.n	d6040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6092:	b00f      	add	sp, #60	; 0x3c
   d6094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6098 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d609c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d609e:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60a0:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60a2:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d60a4:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d60a6:	460e      	mov	r6, r1
   d60a8:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d60aa:	f7ff ff29 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d60ae:	4605      	mov	r5, r0
   d60b0:	bb00      	cbnz	r0, d60f4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d60b2:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d60b6:	4601      	mov	r1, r0
   d60b8:	2214      	movs	r2, #20
   d60ba:	a803      	add	r0, sp, #12
   d60bc:	f001 fc4b 	bl	d7956 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d60c0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d60c2:	462a      	mov	r2, r5
   d60c4:	a903      	add	r1, sp, #12
   d60c6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d60c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d60cc:	f7ff fcfe 	bl	d5acc <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60d0:	ab02      	add	r3, sp, #8
   d60d2:	f10d 0207 	add.w	r2, sp, #7
   d60d6:	fb07 f106 	mul.w	r1, r7, r6
   d60da:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d60dc:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60e0:	f7ff ff54 	bl	d5f8c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d60e4:	7820      	ldrb	r0, [r4, #0]
   d60e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d60ea:	f7ff fccf 	bl	d5a8c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d60ee:	7820      	ldrb	r0, [r4, #0]
   d60f0:	f7ff ff09 	bl	d5f06 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d60f4:	9802      	ldr	r0, [sp, #8]
   d60f6:	b008      	add	sp, #32
   d60f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60fc <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d60fc:	b538      	push	{r3, r4, r5, lr}
   d60fe:	4604      	mov	r4, r0
    if (!lock())
   d6100:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6102:	460d      	mov	r5, r1
    if (!lock())
   d6104:	f7ff fefc 	bl	d5f00 <_ZN8SPIClass4lockEv.isra.0>
   d6108:	b9c8      	cbnz	r0, d613e <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d610a:	6861      	ldr	r1, [r4, #4]
   d610c:	b171      	cbz	r1, d612c <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d610e:	4b0c      	ldr	r3, [pc, #48]	; (d6140 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6110:	5cc2      	ldrb	r2, [r0, r3]
   d6112:	42aa      	cmp	r2, r5
   d6114:	d002      	beq.n	d611c <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6116:	3001      	adds	r0, #1
   d6118:	2808      	cmp	r0, #8
   d611a:	d1f9      	bne.n	d6110 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d611c:	3001      	adds	r0, #1
   d611e:	b2c0      	uxtb	r0, r0
   d6120:	40c1      	lsrs	r1, r0
   d6122:	2201      	movs	r2, #1
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff ffb7 	bl	d6098 <_ZN8SPIClass13setClockSpeedEjj>
   d612a:	e003      	b.n	d6134 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d612c:	4629      	mov	r1, r5
   d612e:	7820      	ldrb	r0, [r4, #0]
   d6130:	f7ff fcac 	bl	d5a8c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6134:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d613a:	f7ff bee4 	b.w	d5f06 <_ZN8SPIClass6unlockEv.isra.1>
   d613e:	bd38      	pop	{r3, r4, r5, pc}
   d6140:	000d82e0 	.word	0x000d82e0

000d6144 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6144:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6146:	7800      	ldrb	r0, [r0, #0]
   d6148:	f7ff fca8 	bl	d5a9c <HAL_SPI_Send_Receive_Data>
}
   d614c:	b2c0      	uxtb	r0, r0
   d614e:	bd08      	pop	{r3, pc}

000d6150 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6150:	7800      	ldrb	r0, [r0, #0]
   d6152:	f7ff bcb3 	b.w	d5abc <HAL_SPI_Is_Enabled>
	...

000d6158 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6158:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d615a:	4c09      	ldr	r4, [pc, #36]	; (d6180 <_GLOBAL__sub_I_System+0x28>)
   d615c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d615e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6162:	6020      	str	r0, [r4, #0]
   d6164:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6166:	71a0      	strb	r0, [r4, #6]
   d6168:	8120      	strh	r0, [r4, #8]
   d616a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d616c:	f7ff fdee 	bl	d5d4c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6170:	4620      	mov	r0, r4
   d6172:	4a04      	ldr	r2, [pc, #16]	; (d6184 <_GLOBAL__sub_I_System+0x2c>)
   d6174:	4904      	ldr	r1, [pc, #16]	; (d6188 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d617a:	f000 be4f 	b.w	d6e1c <__aeabi_atexit>
   d617e:	bf00      	nop
   d6180:	2003e3e4 	.word	0x2003e3e4
   d6184:	2003e2f0 	.word	0x2003e2f0
   d6188:	000d40cb 	.word	0x000d40cb

000d618c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d618c:	b510      	push	{r4, lr}
   d618e:	4604      	mov	r4, r0
{
	free(buffer);
   d6190:	6800      	ldr	r0, [r0, #0]
   d6192:	f7ff fe5f 	bl	d5e54 <free>
}
   d6196:	4620      	mov	r0, r4
   d6198:	bd10      	pop	{r4, pc}

000d619a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d619a:	b510      	push	{r4, lr}
   d619c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d619e:	6800      	ldr	r0, [r0, #0]
   d61a0:	b108      	cbz	r0, d61a6 <_ZN6String10invalidateEv+0xc>
   d61a2:	f7ff fe57 	bl	d5e54 <free>
	buffer = NULL;
   d61a6:	2300      	movs	r3, #0
   d61a8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d61aa:	60a3      	str	r3, [r4, #8]
   d61ac:	6063      	str	r3, [r4, #4]
   d61ae:	bd10      	pop	{r4, pc}

000d61b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d61b0:	b538      	push	{r3, r4, r5, lr}
   d61b2:	4604      	mov	r4, r0
   d61b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d61b6:	6800      	ldr	r0, [r0, #0]
   d61b8:	3101      	adds	r1, #1
   d61ba:	f7ff fe53 	bl	d5e64 <realloc>
	if (newbuffer) {
   d61be:	b110      	cbz	r0, d61c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d61c0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d61c4:	2001      	movs	r0, #1
	}
	return 0;
}
   d61c6:	bd38      	pop	{r3, r4, r5, pc}

000d61c8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d61c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d61ca:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d61cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d61ce:	b113      	cbz	r3, d61d6 <_ZN6String7reserveEj+0xe>
   d61d0:	6843      	ldr	r3, [r0, #4]
   d61d2:	428b      	cmp	r3, r1
   d61d4:	d207      	bcs.n	d61e6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d61d6:	4620      	mov	r0, r4
   d61d8:	f7ff ffea 	bl	d61b0 <_ZN6String12changeBufferEj>
   d61dc:	b120      	cbz	r0, d61e8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d61de:	68a3      	ldr	r3, [r4, #8]
   d61e0:	b90b      	cbnz	r3, d61e6 <_ZN6String7reserveEj+0x1e>
   d61e2:	6822      	ldr	r2, [r4, #0]
   d61e4:	7013      	strb	r3, [r2, #0]
   d61e6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d61e8:	bd10      	pop	{r4, pc}

000d61ea <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d61ea:	b570      	push	{r4, r5, r6, lr}
   d61ec:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d61ee:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d61f0:	4604      	mov	r4, r0
   d61f2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d61f4:	f7ff ffe8 	bl	d61c8 <_ZN6String7reserveEj>
   d61f8:	b918      	cbnz	r0, d6202 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d61fa:	4620      	mov	r0, r4
   d61fc:	f7ff ffcd 	bl	d619a <_ZN6String10invalidateEv>
		return *this;
   d6200:	e009      	b.n	d6216 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6202:	462a      	mov	r2, r5
   d6204:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6206:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6208:	6820      	ldr	r0, [r4, #0]
   d620a:	f001 fb99 	bl	d7940 <memcpy>
	buffer[len] = 0;
   d620e:	6822      	ldr	r2, [r4, #0]
   d6210:	68a3      	ldr	r3, [r4, #8]
   d6212:	2100      	movs	r1, #0
   d6214:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6216:	4620      	mov	r0, r4
   d6218:	bd70      	pop	{r4, r5, r6, pc}

000d621a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d621a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d621c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d621e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6220:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6222:	6043      	str	r3, [r0, #4]
	len = 0;
   d6224:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6226:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6228:	460d      	mov	r5, r1
   d622a:	b139      	cbz	r1, d623c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d622c:	4608      	mov	r0, r1
   d622e:	f001 fbc3 	bl	d79b8 <strlen>
   d6232:	4629      	mov	r1, r5
   d6234:	4602      	mov	r2, r0
   d6236:	4620      	mov	r0, r4
   d6238:	f7ff ffd7 	bl	d61ea <_ZN6String4copyEPKcj>
}
   d623c:	4620      	mov	r0, r4
   d623e:	bd38      	pop	{r3, r4, r5, pc}

000d6240 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6244:	6800      	ldr	r0, [r0, #0]
   d6246:	b108      	cbz	r0, d624c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6248:	f7ff fc98 	bl	d5b7c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d624c:	4620      	mov	r0, r4
   d624e:	bd10      	pop	{r4, pc}

000d6250 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6250:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6252:	4c06      	ldr	r4, [pc, #24]	; (d626c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6254:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6256:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6258:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d625a:	f7ff fc87 	bl	d5b6c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d625e:	4620      	mov	r0, r4
   d6260:	4a03      	ldr	r2, [pc, #12]	; (d6270 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6262:	4904      	ldr	r1, [pc, #16]	; (d6274 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6268:	f000 bdd8 	b.w	d6e1c <__aeabi_atexit>
   d626c:	2003e3f0 	.word	0x2003e3f0
   d6270:	2003e2f0 	.word	0x2003e2f0
   d6274:	000d6241 	.word	0x000d6241

000d6278 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d627a:	4606      	mov	r6, r0
   d627c:	460d      	mov	r5, r1
   d627e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6280:	2400      	movs	r4, #0
  while (size--) {
   d6282:	42bd      	cmp	r5, r7
   d6284:	d00c      	beq.n	d62a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6286:	6833      	ldr	r3, [r6, #0]
   d6288:	f815 1b01 	ldrb.w	r1, [r5], #1
   d628c:	689b      	ldr	r3, [r3, #8]
   d628e:	4630      	mov	r0, r6
   d6290:	4798      	blx	r3
     if (chunk>=0)
   d6292:	2800      	cmp	r0, #0
   d6294:	db01      	blt.n	d629a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6296:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6298:	e7f3      	b.n	d6282 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d629a:	2c00      	cmp	r4, #0
   d629c:	bf08      	it	eq
   d629e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d62a0:	4620      	mov	r0, r4
   d62a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62a4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d62a4:	b570      	push	{r4, r5, r6, lr}
   d62a6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d62a8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d62aa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d62ac:	b149      	cbz	r1, d62c2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d62ae:	f001 fb83 	bl	d79b8 <strlen>
   d62b2:	682b      	ldr	r3, [r5, #0]
   d62b4:	4602      	mov	r2, r0
   d62b6:	4621      	mov	r1, r4
   d62b8:	4628      	mov	r0, r5
   d62ba:	68db      	ldr	r3, [r3, #12]
    }
   d62bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d62c0:	4718      	bx	r3
    }
   d62c2:	bd70      	pop	{r4, r5, r6, pc}

000d62c4 <_ZN5Print5printEPKc>:
   d62c4:	b508      	push	{r3, lr}
   d62c6:	f7ff ffed 	bl	d62a4 <_ZN5Print5writeEPKc>
   d62ca:	bd08      	pop	{r3, pc}

000d62cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d62cc:	6803      	ldr	r3, [r0, #0]
   d62ce:	689b      	ldr	r3, [r3, #8]
   d62d0:	4718      	bx	r3

000d62d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d62d4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d62d8:	f7ff fff8 	bl	d62cc <_ZN5Print5printEc>
  n += print('\n');
   d62dc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d62de:	4604      	mov	r4, r0
  n += print('\n');
   d62e0:	4628      	mov	r0, r5
   d62e2:	f7ff fff3 	bl	d62cc <_ZN5Print5printEc>
  return n;
}
   d62e6:	4420      	add	r0, r4
   d62e8:	bd38      	pop	{r3, r4, r5, pc}

000d62ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d62ea:	b538      	push	{r3, r4, r5, lr}
   d62ec:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62ee:	f7ff ffd9 	bl	d62a4 <_ZN5Print5writeEPKc>
   d62f2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d62f4:	4628      	mov	r0, r5
   d62f6:	f7ff ffec 	bl	d62d2 <_ZN5Print7printlnEv>
  return n;
}
   d62fa:	4420      	add	r0, r4
   d62fc:	bd38      	pop	{r3, r4, r5, pc}

000d62fe <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d62fe:	f7ff bff4 	b.w	d62ea <_ZN5Print7printlnEPKc>

000d6302 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6302:	b530      	push	{r4, r5, lr}
   d6304:	b08b      	sub	sp, #44	; 0x2c
   d6306:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6308:	2100      	movs	r1, #0
   d630a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d630e:	2a01      	cmp	r2, #1
   d6310:	bf98      	it	ls
   d6312:	220a      	movls	r2, #10
   d6314:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6318:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d631c:	fb05 3312 	mls	r3, r5, r2, r3
   d6320:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6324:	2b09      	cmp	r3, #9
   d6326:	bf94      	ite	ls
   d6328:	3330      	addls	r3, #48	; 0x30
   d632a:	3337      	addhi	r3, #55	; 0x37
   d632c:	b2db      	uxtb	r3, r3
   d632e:	4621      	mov	r1, r4
   d6330:	f804 3901 	strb.w	r3, [r4], #-1
   d6334:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6336:	2d00      	cmp	r5, #0
   d6338:	d1ee      	bne.n	d6318 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d633a:	f7ff ffb3 	bl	d62a4 <_ZN5Print5writeEPKc>
}
   d633e:	b00b      	add	sp, #44	; 0x2c
   d6340:	bd30      	pop	{r4, r5, pc}

000d6342 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6342:	b40c      	push	{r2, r3}
   d6344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6348:	b087      	sub	sp, #28
   d634a:	af00      	add	r7, sp, #0
   d634c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6350:	4605      	mov	r5, r0
   d6352:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6356:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6358:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d635a:	4623      	mov	r3, r4
   d635c:	464a      	mov	r2, r9
   d635e:	2114      	movs	r1, #20
   d6360:	1d38      	adds	r0, r7, #4
   d6362:	f7ff fd87 	bl	d5e74 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6366:	2813      	cmp	r0, #19
   d6368:	d805      	bhi.n	d6376 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d636a:	1d39      	adds	r1, r7, #4
   d636c:	4628      	mov	r0, r5
   d636e:	f7ff ff99 	bl	d62a4 <_ZN5Print5writeEPKc>
   d6372:	4604      	mov	r4, r0
   d6374:	e013      	b.n	d639e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6376:	f100 0308 	add.w	r3, r0, #8
   d637a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d637e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6380:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6384:	1c41      	adds	r1, r0, #1
   d6386:	4623      	mov	r3, r4
   d6388:	464a      	mov	r2, r9
   d638a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d638c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d638e:	f7ff fd71 	bl	d5e74 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6392:	4669      	mov	r1, sp
   d6394:	4628      	mov	r0, r5
   d6396:	f7ff ff85 	bl	d62a4 <_ZN5Print5writeEPKc>
   d639a:	4604      	mov	r4, r0
   d639c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d639e:	b11e      	cbz	r6, d63a8 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d63a0:	4628      	mov	r0, r5
   d63a2:	f7ff ff96 	bl	d62d2 <_ZN5Print7printlnEv>
   d63a6:	4404      	add	r4, r0
    return n;
}
   d63a8:	4620      	mov	r0, r4
   d63aa:	371c      	adds	r7, #28
   d63ac:	46bd      	mov	sp, r7
   d63ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63b2:	b002      	add	sp, #8
   d63b4:	4770      	bx	lr
	...

000d63b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d63b8:	4b01      	ldr	r3, [pc, #4]	; (d63c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d63ba:	4a02      	ldr	r2, [pc, #8]	; (d63c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d63bc:	601a      	str	r2, [r3, #0]
   d63be:	4770      	bx	lr
   d63c0:	2003e3f4 	.word	0x2003e3f4
   d63c4:	000d835b 	.word	0x000d835b

000d63c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63c8:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63ce:	601a      	str	r2, [r3, #0]
   d63d0:	4770      	bx	lr
   d63d2:	bf00      	nop
   d63d4:	2003e288 	.word	0x2003e288
   d63d8:	2003e3f8 	.word	0x2003e3f8

000d63dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63dc:	2100      	movs	r1, #0
   d63de:	f7ff bcbd 	b.w	d5d5c <system_delay_ms>

000d63e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d63e8:	b113      	cbz	r3, d63f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63ea:	2203      	movs	r2, #3
   d63ec:	4601      	mov	r1, r0
   d63ee:	4798      	blx	r3
    }
   d63f0:	4620      	mov	r0, r4
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63f4:	b510      	push	{r4, lr}
   d63f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63f8:	f7ff fff3 	bl	d63e2 <_ZNSt14_Function_baseD1Ev>
   d63fc:	4620      	mov	r0, r4
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6400:	4803      	ldr	r0, [pc, #12]	; (d6410 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6402:	4a04      	ldr	r2, [pc, #16]	; (d6414 <_GLOBAL__sub_I_RGB+0x14>)
   d6404:	4904      	ldr	r1, [pc, #16]	; (d6418 <_GLOBAL__sub_I_RGB+0x18>)
   d6406:	2300      	movs	r3, #0
   d6408:	6083      	str	r3, [r0, #8]
   d640a:	f000 bd07 	b.w	d6e1c <__aeabi_atexit>
   d640e:	bf00      	nop
   d6410:	2003e3fc 	.word	0x2003e3fc
   d6414:	2003e2f0 	.word	0x2003e2f0
   d6418:	000d63f5 	.word	0x000d63f5

000d641c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d641c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d641e:	4b0c      	ldr	r3, [pc, #48]	; (d6450 <serialEventRun+0x34>)
   d6420:	b133      	cbz	r3, d6430 <serialEventRun+0x14>
   d6422:	f000 f957 	bl	d66d4 <_Z16_fetch_usbserialv>
   d6426:	6803      	ldr	r3, [r0, #0]
   d6428:	691b      	ldr	r3, [r3, #16]
   d642a:	4798      	blx	r3
   d642c:	2800      	cmp	r0, #0
   d642e:	dc09      	bgt.n	d6444 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6430:	4b08      	ldr	r3, [pc, #32]	; (d6454 <serialEventRun+0x38>)
   d6432:	b163      	cbz	r3, d644e <serialEventRun+0x32>
   d6434:	f000 f9d0 	bl	d67d8 <_Z22__fetch_global_Serial1v>
   d6438:	6803      	ldr	r3, [r0, #0]
   d643a:	691b      	ldr	r3, [r3, #16]
   d643c:	4798      	blx	r3
   d643e:	2800      	cmp	r0, #0
   d6440:	dc03      	bgt.n	d644a <serialEventRun+0x2e>
   d6442:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6444:	f3af 8000 	nop.w
   d6448:	e7f2      	b.n	d6430 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d644a:	f3af 8000 	nop.w
   d644e:	bd08      	pop	{r3, pc}
	...

000d6458 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6458:	b508      	push	{r3, lr}
	serialEventRun();
   d645a:	f7ff ffdf 	bl	d641c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d645e:	f7ff fb65 	bl	d5b2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6462:	4b01      	ldr	r3, [pc, #4]	; (d6468 <_post_loop+0x10>)
   d6464:	6018      	str	r0, [r3, #0]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	2003e730 	.word	0x2003e730

000d646c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d646c:	4802      	ldr	r0, [pc, #8]	; (d6478 <_Z33system_initialize_user_backup_ramv+0xc>)
   d646e:	4a03      	ldr	r2, [pc, #12]	; (d647c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6470:	4903      	ldr	r1, [pc, #12]	; (d6480 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6472:	1a12      	subs	r2, r2, r0
   d6474:	f001 ba64 	b.w	d7940 <memcpy>
   d6478:	2003f400 	.word	0x2003f400
   d647c:	2003f404 	.word	0x2003f404
   d6480:	000d85e0 	.word	0x000d85e0

000d6484 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6484:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6486:	2300      	movs	r3, #0
   d6488:	9300      	str	r3, [sp, #0]
   d648a:	461a      	mov	r2, r3
   d648c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6490:	f7ff fc76 	bl	d5d80 <system_ctrl_set_result>
}
   d6494:	b003      	add	sp, #12
   d6496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d649c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d649c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d649e:	8843      	ldrh	r3, [r0, #2]
   d64a0:	2b0a      	cmp	r3, #10
   d64a2:	d008      	beq.n	d64b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64a4:	2b50      	cmp	r3, #80	; 0x50
   d64a6:	d109      	bne.n	d64bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d64a8:	4b09      	ldr	r3, [pc, #36]	; (d64d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64aa:	681b      	ldr	r3, [r3, #0]
   d64ac:	b13b      	cbz	r3, d64be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d64ae:	b003      	add	sp, #12
   d64b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d64b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d64b6:	f7ff ffe5 	bl	d6484 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d64ba:	e006      	b.n	d64ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64bc:	2300      	movs	r3, #0
   d64be:	9300      	str	r3, [sp, #0]
   d64c0:	461a      	mov	r2, r3
   d64c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64c6:	f7ff fc5b 	bl	d5d80 <system_ctrl_set_result>
        break;
    }
}
   d64ca:	b003      	add	sp, #12
   d64cc:	f85d fb04 	ldr.w	pc, [sp], #4
   d64d0:	2003e40c 	.word	0x2003e40c

000d64d4 <module_user_init_hook>:

void module_user_init_hook()
{
   d64d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64d6:	4c10      	ldr	r4, [pc, #64]	; (d6518 <module_user_init_hook+0x44>)
   d64d8:	4d10      	ldr	r5, [pc, #64]	; (d651c <module_user_init_hook+0x48>)
   d64da:	6823      	ldr	r3, [r4, #0]
   d64dc:	42ab      	cmp	r3, r5
   d64de:	4b10      	ldr	r3, [pc, #64]	; (d6520 <module_user_init_hook+0x4c>)
   d64e0:	bf0c      	ite	eq
   d64e2:	2201      	moveq	r2, #1
   d64e4:	2200      	movne	r2, #0
   d64e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d64e8:	d002      	beq.n	d64f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d64ea:	f7ff ffbf 	bl	d646c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d64ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d64f0:	f7ff fb0c 	bl	d5b0c <HAL_RNG_GetRandomNumber>
   d64f4:	4604      	mov	r4, r0
    srand(seed);
   d64f6:	f001 fa37 	bl	d7968 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64fa:	4b0a      	ldr	r3, [pc, #40]	; (d6524 <module_user_init_hook+0x50>)
   d64fc:	b113      	cbz	r3, d6504 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d64fe:	4620      	mov	r0, r4
   d6500:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6504:	2100      	movs	r1, #0
   d6506:	4807      	ldr	r0, [pc, #28]	; (d6524 <module_user_init_hook+0x50>)
   d6508:	f7ff fc94 	bl	d5e34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d650c:	2100      	movs	r1, #0
   d650e:	4806      	ldr	r0, [pc, #24]	; (d6528 <module_user_init_hook+0x54>)
}
   d6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6514:	f7ff bc2a 	b.w	d5d6c <system_ctrl_set_app_request_handler>
   d6518:	2003f400 	.word	0x2003f400
   d651c:	9a271c1e 	.word	0x9a271c1e
   d6520:	2003e410 	.word	0x2003e410
   d6524:	00000000 	.word	0x00000000
   d6528:	000d649d 	.word	0x000d649d

000d652c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d652c:	4770      	bx	lr

000d652e <_ZN9IPAddressD0Ev>:
   d652e:	b510      	push	{r4, lr}
   d6530:	2118      	movs	r1, #24
   d6532:	4604      	mov	r4, r0
   d6534:	f000 fc80 	bl	d6e38 <_ZdlPvj>
   d6538:	4620      	mov	r0, r4
   d653a:	bd10      	pop	{r4, pc}

000d653c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d653c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d653e:	7d03      	ldrb	r3, [r0, #20]
   d6540:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6542:	b08d      	sub	sp, #52	; 0x34
   d6544:	460e      	mov	r6, r1
   d6546:	f100 0704 	add.w	r7, r0, #4
   d654a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d654e:	d002      	beq.n	d6556 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6550:	f100 0508 	add.w	r5, r0, #8
   d6554:	e018      	b.n	d6588 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6556:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6558:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d655a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d655e:	232f      	movs	r3, #47	; 0x2f
   d6560:	462a      	mov	r2, r5
   d6562:	200a      	movs	r0, #10
   d6564:	f7ff fb12 	bl	d5b8c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6568:	4628      	mov	r0, r5
   d656a:	f001 fa25 	bl	d79b8 <strlen>
   d656e:	6833      	ldr	r3, [r6, #0]
   d6570:	4602      	mov	r2, r0
   d6572:	68db      	ldr	r3, [r3, #12]
   d6574:	4629      	mov	r1, r5
   d6576:	4630      	mov	r0, r6
   d6578:	4798      	blx	r3
   d657a:	e00f      	b.n	d659c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d657c:	b124      	cbz	r4, d6588 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d657e:	212e      	movs	r1, #46	; 0x2e
   d6580:	4630      	mov	r0, r6
   d6582:	f7ff fea3 	bl	d62cc <_ZN5Print5printEc>
   d6586:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6588:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d658c:	220a      	movs	r2, #10
   d658e:	4630      	mov	r0, r6
   d6590:	f7ff feb7 	bl	d6302 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6594:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6596:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6598:	d1f0      	bne.n	d657c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d659a:	4620      	mov	r0, r4
    }
    return n;
}
   d659c:	b00d      	add	sp, #52	; 0x34
   d659e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d65a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d65a0:	b510      	push	{r4, lr}
   d65a2:	4b05      	ldr	r3, [pc, #20]	; (d65b8 <_ZN9IPAddressC1Ev+0x18>)
   d65a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d65a6:	2211      	movs	r2, #17
   d65a8:	f840 3b04 	str.w	r3, [r0], #4
   d65ac:	2100      	movs	r1, #0
   d65ae:	f001 f9d2 	bl	d7956 <memset>
{
    clear();
}
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd10      	pop	{r4, pc}
   d65b6:	bf00      	nop
   d65b8:	000d83f8 	.word	0x000d83f8

000d65bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d65bc:	4603      	mov	r3, r0
   d65be:	4a07      	ldr	r2, [pc, #28]	; (d65dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d65c0:	b510      	push	{r4, lr}
   d65c2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d65c6:	f101 0210 	add.w	r2, r1, #16
   d65ca:	f851 4b04 	ldr.w	r4, [r1], #4
   d65ce:	f843 4b04 	str.w	r4, [r3], #4
   d65d2:	4291      	cmp	r1, r2
   d65d4:	d1f9      	bne.n	d65ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65d6:	780a      	ldrb	r2, [r1, #0]
   d65d8:	701a      	strb	r2, [r3, #0]
}
   d65da:	bd10      	pop	{r4, pc}
   d65dc:	000d83f8 	.word	0x000d83f8

000d65e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65f2:	2304      	movs	r3, #4
   d65f4:	6041      	str	r1, [r0, #4]
   d65f6:	7503      	strb	r3, [r0, #20]
   d65f8:	bd10      	pop	{r4, pc}

000d65fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65fc:	780d      	ldrb	r5, [r1, #0]
   d65fe:	788b      	ldrb	r3, [r1, #2]
   d6600:	784a      	ldrb	r2, [r1, #1]
   d6602:	78c9      	ldrb	r1, [r1, #3]
   d6604:	9100      	str	r1, [sp, #0]
   d6606:	4629      	mov	r1, r5
   d6608:	f7ff ffea 	bl	d65e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d660c:	b003      	add	sp, #12
   d660e:	bd30      	pop	{r4, r5, pc}

000d6610 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6610:	7441      	strb	r1, [r0, #17]
   d6612:	4770      	bx	lr

000d6614 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6614:	4770      	bx	lr

000d6616 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6616:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6618:	2100      	movs	r1, #0
   d661a:	7c00      	ldrb	r0, [r0, #16]
   d661c:	f7ff fb76 	bl	d5d0c <HAL_USB_USART_Receive_Data>
}
   d6620:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6624:	bf28      	it	cs
   d6626:	f04f 30ff 	movcs.w	r0, #4294967295
   d662a:	bd08      	pop	{r3, pc}

000d662c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d662c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d662e:	2101      	movs	r1, #1
   d6630:	7c00      	ldrb	r0, [r0, #16]
   d6632:	f7ff fb6b 	bl	d5d0c <HAL_USB_USART_Receive_Data>
}
   d6636:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d663a:	bf28      	it	cs
   d663c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6640:	bd08      	pop	{r3, pc}

000d6642 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6642:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6644:	7c00      	ldrb	r0, [r0, #16]
   d6646:	f7ff fb59 	bl	d5cfc <HAL_USB_USART_Available_Data_For_Write>
}
   d664a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d664e:	bd08      	pop	{r3, pc}

000d6650 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6650:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6652:	7c00      	ldrb	r0, [r0, #16]
   d6654:	f7ff fb4a 	bl	d5cec <HAL_USB_USART_Available_Data>
}
   d6658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d665c:	bd08      	pop	{r3, pc}

000d665e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7ff bb64 	b.w	d5d2c <HAL_USB_USART_Flush_Data>

000d6664 <_ZN9USBSerialD0Ev>:
   d6664:	b510      	push	{r4, lr}
   d6666:	2114      	movs	r1, #20
   d6668:	4604      	mov	r4, r0
   d666a:	f000 fbe5 	bl	d6e38 <_ZdlPvj>
   d666e:	4620      	mov	r0, r4
   d6670:	bd10      	pop	{r4, pc}

000d6672 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6672:	b538      	push	{r3, r4, r5, lr}
   d6674:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6676:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6678:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d667a:	f7ff fb3f 	bl	d5cfc <HAL_USB_USART_Available_Data_For_Write>
   d667e:	2800      	cmp	r0, #0
   d6680:	dc01      	bgt.n	d6686 <_ZN9USBSerial5writeEh+0x14>
   d6682:	7c60      	ldrb	r0, [r4, #17]
   d6684:	b128      	cbz	r0, d6692 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6686:	4629      	mov	r1, r5
   d6688:	7c20      	ldrb	r0, [r4, #16]
   d668a:	f7ff fb47 	bl	d5d1c <HAL_USB_USART_Send_Data>
   d668e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6692:	bd38      	pop	{r3, r4, r5, pc}

000d6694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6694:	b510      	push	{r4, lr}
   d6696:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6698:	2300      	movs	r3, #0
   d669a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d669c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66a0:	60a3      	str	r3, [r4, #8]
   d66a2:	4b05      	ldr	r3, [pc, #20]	; (d66b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d66a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d66a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d66aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d66ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d66ae:	4611      	mov	r1, r2
   d66b0:	f7ff fb0c 	bl	d5ccc <HAL_USB_USART_Init>
}
   d66b4:	4620      	mov	r0, r4
   d66b6:	bd10      	pop	{r4, pc}
   d66b8:	000d840c 	.word	0x000d840c

000d66bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d66bc:	2200      	movs	r2, #0
   d66be:	7c00      	ldrb	r0, [r0, #16]
   d66c0:	f7ff bb0c 	b.w	d5cdc <HAL_USB_USART_Begin>

000d66c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d66c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66ca:	2100      	movs	r1, #0
   d66cc:	f001 f943 	bl	d7956 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66d0:	4620      	mov	r0, r4
   d66d2:	bd10      	pop	{r4, pc}

000d66d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66d6:	4d0e      	ldr	r5, [pc, #56]	; (d6710 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d66d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66da:	a801      	add	r0, sp, #4
   d66dc:	f7ff fff2 	bl	d66c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66e0:	6829      	ldr	r1, [r5, #0]
   d66e2:	f011 0401 	ands.w	r4, r1, #1
   d66e6:	d110      	bne.n	d670a <_Z16_fetch_usbserialv+0x36>
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7fd fce5 	bl	d40b8 <__cxa_guard_acquire>
   d66ee:	b160      	cbz	r0, d670a <_Z16_fetch_usbserialv+0x36>
   d66f0:	aa01      	add	r2, sp, #4
   d66f2:	4621      	mov	r1, r4
   d66f4:	4807      	ldr	r0, [pc, #28]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d66f6:	f7ff ffcd 	bl	d6694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7fd fce1 	bl	d40c2 <__cxa_guard_release>
   d6700:	4a05      	ldr	r2, [pc, #20]	; (d6718 <_Z16_fetch_usbserialv+0x44>)
   d6702:	4906      	ldr	r1, [pc, #24]	; (d671c <_Z16_fetch_usbserialv+0x48>)
   d6704:	4803      	ldr	r0, [pc, #12]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d6706:	f000 fb89 	bl	d6e1c <__aeabi_atexit>
	return _usbserial;
}
   d670a:	4802      	ldr	r0, [pc, #8]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d670c:	b007      	add	sp, #28
   d670e:	bd30      	pop	{r4, r5, pc}
   d6710:	2003e414 	.word	0x2003e414
   d6714:	2003e418 	.word	0x2003e418
   d6718:	2003e2f0 	.word	0x2003e2f0
   d671c:	000d6615 	.word	0x000d6615

000d6720 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6720:	4770      	bx	lr

000d6722 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6722:	7441      	strb	r1, [r0, #17]
   d6724:	4770      	bx	lr

000d6726 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6726:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6728:	7c00      	ldrb	r0, [r0, #16]
   d672a:	f7ff fa6f 	bl	d5c0c <HAL_USART_Available_Data_For_Write>
}
   d672e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6732:	bd08      	pop	{r3, pc}

000d6734 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6734:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6736:	7c00      	ldrb	r0, [r0, #16]
   d6738:	f7ff fa40 	bl	d5bbc <HAL_USART_Available_Data>
}
   d673c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6740:	bd08      	pop	{r3, pc}

000d6742 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6742:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	f7ff fa49 	bl	d5bdc <HAL_USART_Peek_Data>
}
   d674a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d674e:	bf28      	it	cs
   d6750:	f04f 30ff 	movcs.w	r0, #4294967295
   d6754:	bd08      	pop	{r3, pc}

000d6756 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6756:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6758:	7c00      	ldrb	r0, [r0, #16]
   d675a:	f7ff fa37 	bl	d5bcc <HAL_USART_Read_Data>
}
   d675e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6762:	bf28      	it	cs
   d6764:	f04f 30ff 	movcs.w	r0, #4294967295
   d6768:	bd08      	pop	{r3, pc}

000d676a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d676a:	7c00      	ldrb	r0, [r0, #16]
   d676c:	f7ff ba3e 	b.w	d5bec <HAL_USART_Flush_Data>

000d6770 <_ZN11USARTSerialD0Ev>:
   d6770:	b510      	push	{r4, lr}
   d6772:	2114      	movs	r1, #20
   d6774:	4604      	mov	r4, r0
   d6776:	f000 fb5f 	bl	d6e38 <_ZdlPvj>
   d677a:	4620      	mov	r0, r4
   d677c:	bd10      	pop	{r4, pc}

000d677e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d677e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6780:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6782:	4604      	mov	r4, r0
   d6784:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6786:	b925      	cbnz	r5, d6792 <_ZN11USARTSerial5writeEh+0x14>
   d6788:	7c00      	ldrb	r0, [r0, #16]
   d678a:	f7ff fa3f 	bl	d5c0c <HAL_USART_Available_Data_For_Write>
   d678e:	2800      	cmp	r0, #0
   d6790:	dd05      	ble.n	d679e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6792:	4631      	mov	r1, r6
   d6794:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d679a:	f7ff ba07 	b.w	d5bac <HAL_USART_Write_Data>
  }
  return 0;
}
   d679e:	4628      	mov	r0, r5
   d67a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d67a4:	b510      	push	{r4, lr}
   d67a6:	4604      	mov	r4, r0
   d67a8:	4608      	mov	r0, r1
   d67aa:	4611      	mov	r1, r2
   d67ac:	2200      	movs	r2, #0
   d67ae:	6062      	str	r2, [r4, #4]
   d67b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d67b4:	60a2      	str	r2, [r4, #8]
   d67b6:	4a05      	ldr	r2, [pc, #20]	; (d67cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d67b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d67ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d67bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d67be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d67c0:	461a      	mov	r2, r3
   d67c2:	f7ff f9eb 	bl	d5b9c <HAL_USART_Init>
}
   d67c6:	4620      	mov	r0, r4
   d67c8:	bd10      	pop	{r4, pc}
   d67ca:	bf00      	nop
   d67cc:	000d843c 	.word	0x000d843c

000d67d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d67d0:	7c00      	ldrb	r0, [r0, #16]
   d67d2:	f7ff ba13 	b.w	d5bfc <HAL_USART_Is_Enabled>
	...

000d67d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d67d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d67da:	4d0c      	ldr	r5, [pc, #48]	; (d680c <_Z22__fetch_global_Serial1v+0x34>)
   d67dc:	6829      	ldr	r1, [r5, #0]
   d67de:	f011 0401 	ands.w	r4, r1, #1
   d67e2:	d111      	bne.n	d6808 <_Z22__fetch_global_Serial1v+0x30>
   d67e4:	4628      	mov	r0, r5
   d67e6:	f7fd fc67 	bl	d40b8 <__cxa_guard_acquire>
   d67ea:	b168      	cbz	r0, d6808 <_Z22__fetch_global_Serial1v+0x30>
   d67ec:	4a08      	ldr	r2, [pc, #32]	; (d6810 <_Z22__fetch_global_Serial1v+0x38>)
   d67ee:	4b09      	ldr	r3, [pc, #36]	; (d6814 <_Z22__fetch_global_Serial1v+0x3c>)
   d67f0:	4809      	ldr	r0, [pc, #36]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d67f2:	4621      	mov	r1, r4
   d67f4:	f7ff ffd6 	bl	d67a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67f8:	4628      	mov	r0, r5
   d67fa:	f7fd fc62 	bl	d40c2 <__cxa_guard_release>
   d67fe:	4a07      	ldr	r2, [pc, #28]	; (d681c <_Z22__fetch_global_Serial1v+0x44>)
   d6800:	4907      	ldr	r1, [pc, #28]	; (d6820 <_Z22__fetch_global_Serial1v+0x48>)
   d6802:	4805      	ldr	r0, [pc, #20]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d6804:	f000 fb0a 	bl	d6e1c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6808:	4803      	ldr	r0, [pc, #12]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d680a:	bd38      	pop	{r3, r4, r5, pc}
   d680c:	2003e4c4 	.word	0x2003e4c4
   d6810:	2003e4c8 	.word	0x2003e4c8
   d6814:	2003e440 	.word	0x2003e440
   d6818:	2003e42c 	.word	0x2003e42c
   d681c:	2003e2f0 	.word	0x2003e2f0
   d6820:	000d6721 	.word	0x000d6721

000d6824 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6824:	4770      	bx	lr

000d6826 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6828:	4606      	mov	r6, r0
   d682a:	4615      	mov	r5, r2
   d682c:	460c      	mov	r4, r1
   d682e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6830:	42bc      	cmp	r4, r7
   d6832:	d006      	beq.n	d6842 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6834:	6833      	ldr	r3, [r6, #0]
   d6836:	f814 1b01 	ldrb.w	r1, [r4], #1
   d683a:	689b      	ldr	r3, [r3, #8]
   d683c:	4630      	mov	r0, r6
   d683e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6840:	e7f6      	b.n	d6830 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6842:	4628      	mov	r0, r5
   d6844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6846 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6846:	2200      	movs	r2, #0
   d6848:	7c00      	ldrb	r0, [r0, #16]
   d684a:	f7ff b9ff 	b.w	d5c4c <HAL_I2C_Write_Data>

000d684e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d684e:	2100      	movs	r1, #0
   d6850:	7c00      	ldrb	r0, [r0, #16]
   d6852:	f7ff ba03 	b.w	d5c5c <HAL_I2C_Available_Data>

000d6856 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6856:	2100      	movs	r1, #0
   d6858:	7c00      	ldrb	r0, [r0, #16]
   d685a:	f7ff ba07 	b.w	d5c6c <HAL_I2C_Read_Data>

000d685e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d685e:	2100      	movs	r1, #0
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7ff ba0b 	b.w	d5c7c <HAL_I2C_Peek_Data>

000d6866 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6866:	2100      	movs	r1, #0
   d6868:	7c00      	ldrb	r0, [r0, #16]
   d686a:	f7ff ba0f 	b.w	d5c8c <HAL_I2C_Flush_Data>

000d686e <_ZN7TwoWireD0Ev>:
   d686e:	b510      	push	{r4, lr}
   d6870:	2114      	movs	r1, #20
   d6872:	4604      	mov	r4, r0
   d6874:	f000 fae0 	bl	d6e38 <_ZdlPvj>
   d6878:	4620      	mov	r0, r4
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d687c:	b510      	push	{r4, lr}
   d687e:	4604      	mov	r4, r0
   d6880:	2300      	movs	r3, #0
   d6882:	6063      	str	r3, [r4, #4]
   d6884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6888:	60a3      	str	r3, [r4, #8]
   d688a:	4b04      	ldr	r3, [pc, #16]	; (d689c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d688c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d688e:	4608      	mov	r0, r1
   d6890:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6892:	4611      	mov	r1, r2
   d6894:	f7ff fa0a 	bl	d5cac <HAL_I2C_Init>
}
   d6898:	4620      	mov	r0, r4
   d689a:	bd10      	pop	{r4, pc}
   d689c:	000d846c 	.word	0x000d846c

000d68a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d68a0:	2300      	movs	r3, #0
   d68a2:	461a      	mov	r2, r3
   d68a4:	4619      	mov	r1, r3
   d68a6:	7c00      	ldrb	r0, [r0, #16]
   d68a8:	f7ff b9b8 	b.w	d5c1c <HAL_I2C_Begin>

000d68ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d68ac:	b570      	push	{r4, r5, r6, lr}
   d68ae:	460c      	mov	r4, r1
   d68b0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d68b2:	2514      	movs	r5, #20
   d68b4:	4606      	mov	r6, r0
   d68b6:	462a      	mov	r2, r5
   d68b8:	2100      	movs	r1, #0
   d68ba:	a801      	add	r0, sp, #4
   d68bc:	f001 f84b 	bl	d7956 <memset>
   d68c0:	7823      	ldrb	r3, [r4, #0]
   d68c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d68c6:	6863      	ldr	r3, [r4, #4]
   d68c8:	9303      	str	r3, [sp, #12]
   d68ca:	68e3      	ldr	r3, [r4, #12]
   d68cc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d68ce:	2200      	movs	r2, #0
   d68d0:	7a23      	ldrb	r3, [r4, #8]
   d68d2:	7c30      	ldrb	r0, [r6, #16]
   d68d4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d68d8:	a901      	add	r1, sp, #4
   d68da:	9305      	str	r3, [sp, #20]
   d68dc:	f7ff f9ee 	bl	d5cbc <HAL_I2C_Request_Data_Ex>
}
   d68e0:	b006      	add	sp, #24
   d68e2:	bd70      	pop	{r4, r5, r6, pc}

000d68e4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d68e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d68e6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d68e8:	f88d 1000 	strb.w	r1, [sp]
   d68ec:	f04f 0164 	mov.w	r1, #100	; 0x64
   d68f0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d68f2:	bf18      	it	ne
   d68f4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d68f6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d68f8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d68fa:	f88d 3008 	strb.w	r3, [sp, #8]
   d68fe:	f7ff ffd5 	bl	d68ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6902:	b005      	add	sp, #20
   d6904:	f85d fb04 	ldr.w	pc, [sp], #4

000d6908 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6908:	2301      	movs	r3, #1
   d690a:	f7ff bfeb 	b.w	d68e4 <_ZN7TwoWire11requestFromEhjh>

000d690e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d690e:	2200      	movs	r2, #0
   d6910:	7c00      	ldrb	r0, [r0, #16]
   d6912:	f7ff b98b 	b.w	d5c2c <HAL_I2C_Begin_Transmission>

000d6916 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6916:	b2c9      	uxtb	r1, r1
   d6918:	f7ff bff9 	b.w	d690e <_ZN7TwoWire17beginTransmissionEh>

000d691c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d691c:	2200      	movs	r2, #0
   d691e:	7c00      	ldrb	r0, [r0, #16]
   d6920:	f7ff b98c 	b.w	d5c3c <HAL_I2C_End_Transmission>

000d6924 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6924:	2101      	movs	r1, #1
   d6926:	f7ff bff9 	b.w	d691c <_ZN7TwoWire15endTransmissionEh>

000d692a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d692a:	2100      	movs	r1, #0
   d692c:	7c00      	ldrb	r0, [r0, #16]
   d692e:	f7ff b9b5 	b.w	d5c9c <HAL_I2C_Is_Enabled>

000d6932 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6932:	2200      	movs	r2, #0
   d6934:	4611      	mov	r1, r2
   d6936:	6840      	ldr	r0, [r0, #4]
   d6938:	f7ff ba64 	b.w	d5e04 <network_listening>

000d693c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d693c:	2200      	movs	r2, #0
   d693e:	4611      	mov	r1, r2
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	f7ff ba6f 	b.w	d5e24 <network_get_listen_timeout>

000d6946 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6946:	2200      	movs	r2, #0
   d6948:	6840      	ldr	r0, [r0, #4]
   d694a:	f7ff ba63 	b.w	d5e14 <network_set_listen_timeout>

000d694e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d694e:	2200      	movs	r2, #0
   d6950:	f081 0101 	eor.w	r1, r1, #1
   d6954:	6840      	ldr	r0, [r0, #4]
   d6956:	f7ff ba4d 	b.w	d5df4 <network_listen>

000d695a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d695a:	2300      	movs	r3, #0
   d695c:	461a      	mov	r2, r3
   d695e:	2101      	movs	r1, #1
   d6960:	6840      	ldr	r0, [r0, #4]
   d6962:	f7ff ba3f 	b.w	d5de4 <network_off>

000d6966 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6966:	2300      	movs	r3, #0
   d6968:	461a      	mov	r2, r3
   d696a:	4619      	mov	r1, r3
   d696c:	6840      	ldr	r0, [r0, #4]
   d696e:	f7ff ba31 	b.w	d5dd4 <network_on>

000d6972 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6972:	2200      	movs	r2, #0
   d6974:	4611      	mov	r1, r2
   d6976:	6840      	ldr	r0, [r0, #4]
   d6978:	f7ff ba24 	b.w	d5dc4 <network_ready>

000d697c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d697c:	2200      	movs	r2, #0
   d697e:	4611      	mov	r1, r2
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	f7ff ba0f 	b.w	d5da4 <network_connecting>

000d6986 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6986:	2200      	movs	r2, #0
   d6988:	2102      	movs	r1, #2
   d698a:	6840      	ldr	r0, [r0, #4]
   d698c:	f7ff ba12 	b.w	d5db4 <network_disconnect>

000d6990 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6990:	2300      	movs	r3, #0
   d6992:	461a      	mov	r2, r3
   d6994:	6840      	ldr	r0, [r0, #4]
   d6996:	f7ff b9fd 	b.w	d5d94 <network_connect>

000d699a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d699a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d699c:	4605      	mov	r5, r0
   d699e:	b188      	cbz	r0, d69c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69a0:	6804      	ldr	r4, [r0, #0]
   d69a2:	b14c      	cbz	r4, d69b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d69a4:	68a3      	ldr	r3, [r4, #8]
   d69a6:	b11b      	cbz	r3, d69b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d69a8:	2203      	movs	r2, #3
   d69aa:	4621      	mov	r1, r4
   d69ac:	4620      	mov	r0, r4
   d69ae:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69b0:	2110      	movs	r1, #16
   d69b2:	4620      	mov	r0, r4
   d69b4:	f000 fa40 	bl	d6e38 <_ZdlPvj>
   d69b8:	4628      	mov	r0, r5
   d69ba:	2114      	movs	r1, #20
      }
   d69bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69c0:	f000 ba3a 	b.w	d6e38 <_ZdlPvj>
   d69c4:	bd38      	pop	{r3, r4, r5, pc}

000d69c6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d69c6:	b110      	cbz	r0, d69ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d69c8:	6803      	ldr	r3, [r0, #0]
   d69ca:	685b      	ldr	r3, [r3, #4]
   d69cc:	4718      	bx	r3
   d69ce:	4770      	bx	lr

000d69d0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d69d0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d69d2:	6803      	ldr	r3, [r0, #0]
   d69d4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d69d6:	b1bb      	cbz	r3, d6a08 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d69d8:	6858      	ldr	r0, [r3, #4]
   d69da:	f7ff f8af 	bl	d5b3c <os_thread_is_current>
   d69de:	b978      	cbnz	r0, d6a00 <_ZN6ThreadD1Ev+0x30>
   d69e0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d69e2:	7c5a      	ldrb	r2, [r3, #17]
   d69e4:	b912      	cbnz	r2, d69ec <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d69e6:	6858      	ldr	r0, [r3, #4]
   d69e8:	f7ff f8b0 	bl	d5b4c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d69ec:	6823      	ldr	r3, [r4, #0]
   d69ee:	6858      	ldr	r0, [r3, #4]
   d69f0:	f7ff f8b4 	bl	d5b5c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69f4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d69f6:	2300      	movs	r3, #0
   d69f8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d69fa:	b128      	cbz	r0, d6a08 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d69fc:	f7ff ffcd 	bl	d699a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a00:	6820      	ldr	r0, [r4, #0]
   d6a02:	b108      	cbz	r0, d6a08 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6a04:	f7ff ffc9 	bl	d699a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6a08:	4620      	mov	r0, r4
   d6a0a:	bd10      	pop	{r4, pc}

000d6a0c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6a0c:	b538      	push	{r3, r4, r5, lr}
   d6a0e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a10:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6a14:	b108      	cbz	r0, d6a1a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6a16:	f7fd fb42 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a1a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6a1e:	b108      	cbz	r0, d6a24 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6a20:	f7ff f8ac 	bl	d5b7c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a24:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6a28:	b135      	cbz	r5, d6a38 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a2a:	4628      	mov	r0, r5
   d6a2c:	f7ff ffd0 	bl	d69d0 <_ZN6ThreadD1Ev>
   d6a30:	2104      	movs	r1, #4
   d6a32:	4628      	mov	r0, r5
   d6a34:	f000 fa00 	bl	d6e38 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a38:	6820      	ldr	r0, [r4, #0]
   d6a3a:	b108      	cbz	r0, d6a40 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6a3c:	f7ff ffc3 	bl	d69c6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6a40:	4620      	mov	r0, r4
   d6a42:	bd38      	pop	{r3, r4, r5, pc}

000d6a44 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6a44:	b510      	push	{r4, lr}
   d6a46:	4b04      	ldr	r3, [pc, #16]	; (d6a58 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6a48:	4604      	mov	r4, r0
   d6a4a:	f840 3b08 	str.w	r3, [r0], #8
   d6a4e:	f7ff ffdd 	bl	d6a0c <_ZN5spark11MeshPublishD1Ev>
   d6a52:	4620      	mov	r0, r4
   d6a54:	bd10      	pop	{r4, pc}
   d6a56:	bf00      	nop
   d6a58:	000d8494 	.word	0x000d8494

000d6a5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6a5c:	b538      	push	{r3, r4, r5, lr}
   d6a5e:	4c0e      	ldr	r4, [pc, #56]	; (d6a98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a60:	4b0e      	ldr	r3, [pc, #56]	; (d6a9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a64:	2500      	movs	r5, #0
   d6a66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a6c:	6063      	str	r3, [r4, #4]
   d6a6e:	60a5      	str	r5, [r4, #8]
   d6a70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a78:	f7ff f878 	bl	d5b6c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a7c:	4b08      	ldr	r3, [pc, #32]	; (d6aa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a82:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a88:	4620      	mov	r0, r4
   d6a8a:	4a06      	ldr	r2, [pc, #24]	; (d6aa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a8c:	4906      	ldr	r1, [pc, #24]	; (d6aa8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a92:	f000 b9c3 	b.w	d6e1c <__aeabi_atexit>
   d6a96:	bf00      	nop
   d6a98:	2003e54c 	.word	0x2003e54c
   d6a9c:	000d84fc 	.word	0x000d84fc
   d6aa0:	000d8494 	.word	0x000d8494
   d6aa4:	2003e2f0 	.word	0x2003e2f0
   d6aa8:	000d6a45 	.word	0x000d6a45

000d6aac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6aac:	2200      	movs	r2, #0
   d6aae:	4611      	mov	r1, r2
   d6ab0:	6840      	ldr	r0, [r0, #4]
   d6ab2:	f7ff b987 	b.w	d5dc4 <network_ready>

000d6ab6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ab6:	2200      	movs	r2, #0
   d6ab8:	4611      	mov	r1, r2
   d6aba:	6840      	ldr	r0, [r0, #4]
   d6abc:	f7ff b9a2 	b.w	d5e04 <network_listening>

000d6ac0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ac0:	2200      	movs	r2, #0
   d6ac2:	4611      	mov	r1, r2
   d6ac4:	6840      	ldr	r0, [r0, #4]
   d6ac6:	f7ff b9ad 	b.w	d5e24 <network_get_listen_timeout>

000d6aca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6aca:	2200      	movs	r2, #0
   d6acc:	6840      	ldr	r0, [r0, #4]
   d6ace:	f7ff b9a1 	b.w	d5e14 <network_set_listen_timeout>

000d6ad2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ad2:	2200      	movs	r2, #0
   d6ad4:	f081 0101 	eor.w	r1, r1, #1
   d6ad8:	6840      	ldr	r0, [r0, #4]
   d6ada:	f7ff b98b 	b.w	d5df4 <network_listen>

000d6ade <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6ade:	2300      	movs	r3, #0
   d6ae0:	461a      	mov	r2, r3
   d6ae2:	4619      	mov	r1, r3
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7ff b97d 	b.w	d5de4 <network_off>

000d6aea <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6aea:	2300      	movs	r3, #0
   d6aec:	461a      	mov	r2, r3
   d6aee:	4619      	mov	r1, r3
   d6af0:	6840      	ldr	r0, [r0, #4]
   d6af2:	f7ff b96f 	b.w	d5dd4 <network_on>

000d6af6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6af6:	2200      	movs	r2, #0
   d6af8:	4611      	mov	r1, r2
   d6afa:	6840      	ldr	r0, [r0, #4]
   d6afc:	f7ff b952 	b.w	d5da4 <network_connecting>

000d6b00 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b00:	2200      	movs	r2, #0
   d6b02:	2102      	movs	r1, #2
   d6b04:	6840      	ldr	r0, [r0, #4]
   d6b06:	f7ff b955 	b.w	d5db4 <network_disconnect>

000d6b0a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b0a:	2300      	movs	r3, #0
   d6b0c:	461a      	mov	r2, r3
   d6b0e:	6840      	ldr	r0, [r0, #4]
   d6b10:	f7ff b940 	b.w	d5d94 <network_connect>

000d6b14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6b14:	4b02      	ldr	r3, [pc, #8]	; (d6b20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6b16:	2204      	movs	r2, #4
   d6b18:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6b1a:	4a02      	ldr	r2, [pc, #8]	; (d6b24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6b1c:	601a      	str	r2, [r3, #0]
   d6b1e:	4770      	bx	lr
   d6b20:	2003e720 	.word	0x2003e720
   d6b24:	000d84c8 	.word	0x000d84c8

000d6b28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b28:	2300      	movs	r3, #0
   d6b2a:	461a      	mov	r2, r3
   d6b2c:	6840      	ldr	r0, [r0, #4]
   d6b2e:	f7ff b931 	b.w	d5d94 <network_connect>

000d6b32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b32:	2200      	movs	r2, #0
   d6b34:	2102      	movs	r1, #2
   d6b36:	6840      	ldr	r0, [r0, #4]
   d6b38:	f7ff b93c 	b.w	d5db4 <network_disconnect>

000d6b3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b3c:	2200      	movs	r2, #0
   d6b3e:	4611      	mov	r1, r2
   d6b40:	6840      	ldr	r0, [r0, #4]
   d6b42:	f7ff b92f 	b.w	d5da4 <network_connecting>

000d6b46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b46:	2200      	movs	r2, #0
   d6b48:	4611      	mov	r1, r2
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	f7ff b93a 	b.w	d5dc4 <network_ready>

000d6b50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b50:	2300      	movs	r3, #0
   d6b52:	461a      	mov	r2, r3
   d6b54:	4619      	mov	r1, r3
   d6b56:	6840      	ldr	r0, [r0, #4]
   d6b58:	f7ff b93c 	b.w	d5dd4 <network_on>

000d6b5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	461a      	mov	r2, r3
   d6b60:	4619      	mov	r1, r3
   d6b62:	6840      	ldr	r0, [r0, #4]
   d6b64:	f7ff b93e 	b.w	d5de4 <network_off>

000d6b68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b68:	2200      	movs	r2, #0
   d6b6a:	f081 0101 	eor.w	r1, r1, #1
   d6b6e:	6840      	ldr	r0, [r0, #4]
   d6b70:	f7ff b940 	b.w	d5df4 <network_listen>

000d6b74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b74:	2200      	movs	r2, #0
   d6b76:	6840      	ldr	r0, [r0, #4]
   d6b78:	f7ff b94c 	b.w	d5e14 <network_set_listen_timeout>

000d6b7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b7c:	2200      	movs	r2, #0
   d6b7e:	4611      	mov	r1, r2
   d6b80:	6840      	ldr	r0, [r0, #4]
   d6b82:	f7ff b94f 	b.w	d5e24 <network_get_listen_timeout>

000d6b86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b86:	2200      	movs	r2, #0
   d6b88:	4611      	mov	r1, r2
   d6b8a:	6840      	ldr	r0, [r0, #4]
   d6b8c:	f7ff b93a 	b.w	d5e04 <network_listening>

000d6b90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b94:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b96:	b095      	sub	sp, #84	; 0x54
   d6b98:	4616      	mov	r6, r2
   d6b9a:	460d      	mov	r5, r1
   d6b9c:	4607      	mov	r7, r0
    IPAddress addr;
   d6b9e:	f7ff fcff 	bl	d65a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6ba2:	4621      	mov	r1, r4
   d6ba4:	2220      	movs	r2, #32
   d6ba6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ba8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6baa:	f000 fed4 	bl	d7956 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6bae:	2340      	movs	r3, #64	; 0x40
   d6bb0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6bb2:	4621      	mov	r1, r4
   d6bb4:	466b      	mov	r3, sp
   d6bb6:	aa0c      	add	r2, sp, #48	; 0x30
   d6bb8:	4630      	mov	r0, r6
   d6bba:	f7fe ff1f 	bl	d59fc <netdb_getaddrinfo>
    if (!r) {
   d6bbe:	4604      	mov	r4, r0
   d6bc0:	2800      	cmp	r0, #0
   d6bc2:	d144      	bne.n	d6c4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bc4:	4602      	mov	r2, r0
   d6bc6:	2101      	movs	r1, #1
   d6bc8:	6868      	ldr	r0, [r5, #4]
   d6bca:	f7ff f8fb 	bl	d5dc4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bd0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bd2:	4622      	mov	r2, r4
   d6bd4:	6868      	ldr	r0, [r5, #4]
   d6bd6:	f7ff f8f5 	bl	d5dc4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bda:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6bdc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6bde:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6be0:	2e00      	cmp	r6, #0
   d6be2:	d034      	beq.n	d6c4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6be4:	2900      	cmp	r1, #0
   d6be6:	d132      	bne.n	d6c4e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6be8:	6873      	ldr	r3, [r6, #4]
   d6bea:	2b02      	cmp	r3, #2
   d6bec:	d002      	beq.n	d6bf4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6bee:	2b0a      	cmp	r3, #10
   d6bf0:	d009      	beq.n	d6c06 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6bf2:	e02a      	b.n	d6c4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6bf4:	f1b8 0f00 	cmp.w	r8, #0
   d6bf8:	d027      	beq.n	d6c4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6bfa:	6971      	ldr	r1, [r6, #20]
   d6bfc:	4638      	mov	r0, r7
   d6bfe:	3104      	adds	r1, #4
   d6c00:	f7ff fcfb 	bl	d65fa <_ZN9IPAddressaSEPKh>
   d6c04:	e020      	b.n	d6c48 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c06:	f1b9 0f00 	cmp.w	r9, #0
   d6c0a:	d01e      	beq.n	d6c4a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c0c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c0e:	2211      	movs	r2, #17
   d6c10:	a801      	add	r0, sp, #4
   d6c12:	f000 fea0 	bl	d7956 <memset>
                    a.v = 6;
   d6c16:	2306      	movs	r3, #6
   d6c18:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c1c:	ad01      	add	r5, sp, #4
   d6c1e:	f104 0308 	add.w	r3, r4, #8
   d6c22:	3418      	adds	r4, #24
   d6c24:	6818      	ldr	r0, [r3, #0]
   d6c26:	6859      	ldr	r1, [r3, #4]
   d6c28:	462a      	mov	r2, r5
   d6c2a:	c203      	stmia	r2!, {r0, r1}
   d6c2c:	3308      	adds	r3, #8
   d6c2e:	42a3      	cmp	r3, r4
   d6c30:	4615      	mov	r5, r2
   d6c32:	d1f7      	bne.n	d6c24 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6c34:	a901      	add	r1, sp, #4
   d6c36:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c38:	ad07      	add	r5, sp, #28
   d6c3a:	f7ff fcbf 	bl	d65bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c40:	1d3c      	adds	r4, r7, #4
   d6c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c44:	682b      	ldr	r3, [r5, #0]
   d6c46:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6c48:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c4a:	69f6      	ldr	r6, [r6, #28]
   d6c4c:	e7c8      	b.n	d6be0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c4e:	9800      	ldr	r0, [sp, #0]
   d6c50:	f7fe fecc 	bl	d59ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c54:	4638      	mov	r0, r7
   d6c56:	b015      	add	sp, #84	; 0x54
   d6c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c5c:	4b02      	ldr	r3, [pc, #8]	; (d6c68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c5e:	4a03      	ldr	r2, [pc, #12]	; (d6c6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c60:	601a      	str	r2, [r3, #0]
   d6c62:	2200      	movs	r2, #0
   d6c64:	605a      	str	r2, [r3, #4]
   d6c66:	4770      	bx	lr
   d6c68:	2003e728 	.word	0x2003e728
   d6c6c:	000d84fc 	.word	0x000d84fc

000d6c70 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6c70:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6c72:	4e18      	ldr	r6, [pc, #96]	; (d6cd4 <pinAvailable+0x64>)
   d6c74:	6831      	ldr	r1, [r6, #0]
   d6c76:	f011 0501 	ands.w	r5, r1, #1
   d6c7a:	4604      	mov	r4, r0
   d6c7c:	d10a      	bne.n	d6c94 <pinAvailable+0x24>
   d6c7e:	4630      	mov	r0, r6
   d6c80:	f7fd fa1a 	bl	d40b8 <__cxa_guard_acquire>
   d6c84:	b130      	cbz	r0, d6c94 <pinAvailable+0x24>
   d6c86:	4629      	mov	r1, r5
   d6c88:	4813      	ldr	r0, [pc, #76]	; (d6cd8 <pinAvailable+0x68>)
   d6c8a:	f7ff f93f 	bl	d5f0c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c8e:	4630      	mov	r0, r6
   d6c90:	f7fd fa17 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6c94:	4810      	ldr	r0, [pc, #64]	; (d6cd8 <pinAvailable+0x68>)
   d6c96:	f7ff fa5b 	bl	d6150 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6c9a:	b128      	cbz	r0, d6ca8 <pinAvailable+0x38>
   d6c9c:	f1a4 030b 	sub.w	r3, r4, #11
   d6ca0:	2b02      	cmp	r3, #2
   d6ca2:	d801      	bhi.n	d6ca8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6ca4:	2000      	movs	r0, #0
   d6ca6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6ca8:	f000 f892 	bl	d6dd0 <_Z19__fetch_global_Wirev>
   d6cac:	f7ff fe3d 	bl	d692a <_ZN7TwoWire9isEnabledEv>
   d6cb0:	b108      	cbz	r0, d6cb6 <pinAvailable+0x46>
   d6cb2:	2c01      	cmp	r4, #1
   d6cb4:	d9f6      	bls.n	d6ca4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6cb6:	f7ff fd8f 	bl	d67d8 <_Z22__fetch_global_Serial1v>
   d6cba:	f7ff fd89 	bl	d67d0 <_ZN11USARTSerial9isEnabledEv>
   d6cbe:	b118      	cbz	r0, d6cc8 <pinAvailable+0x58>
   d6cc0:	f1a4 0309 	sub.w	r3, r4, #9
   d6cc4:	2b01      	cmp	r3, #1
   d6cc6:	d9ed      	bls.n	d6ca4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6cc8:	2c23      	cmp	r4, #35	; 0x23
   d6cca:	bf8c      	ite	hi
   d6ccc:	2000      	movhi	r0, #0
   d6cce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6cd0:	bd70      	pop	{r4, r5, r6, pc}
   d6cd2:	bf00      	nop
   d6cd4:	2003e3d0 	.word	0x2003e3d0
   d6cd8:	2003e3d4 	.word	0x2003e3d4

000d6cdc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6cdc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6cde:	b538      	push	{r3, r4, r5, lr}
   d6ce0:	4604      	mov	r4, r0
   d6ce2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ce4:	d80a      	bhi.n	d6cfc <pinMode+0x20>
   d6ce6:	29ff      	cmp	r1, #255	; 0xff
   d6ce8:	d008      	beq.n	d6cfc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6cea:	f7ff ffc1 	bl	d6c70 <pinAvailable>
   d6cee:	b128      	cbz	r0, d6cfc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6cf0:	4629      	mov	r1, r5
   d6cf2:	4620      	mov	r0, r4
}
   d6cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6cf8:	f7fe be90 	b.w	d5a1c <HAL_Pin_Mode>
   d6cfc:	bd38      	pop	{r3, r4, r5, pc}

000d6cfe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6cfe:	b538      	push	{r3, r4, r5, lr}
   d6d00:	4604      	mov	r4, r0
   d6d02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d04:	f7fe fe92 	bl	d5a2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6d08:	28ff      	cmp	r0, #255	; 0xff
   d6d0a:	d010      	beq.n	d6d2e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6d0c:	2806      	cmp	r0, #6
   d6d0e:	d804      	bhi.n	d6d1a <digitalWrite+0x1c>
   d6d10:	234d      	movs	r3, #77	; 0x4d
   d6d12:	fa23 f000 	lsr.w	r0, r3, r0
   d6d16:	07c3      	lsls	r3, r0, #31
   d6d18:	d409      	bmi.n	d6d2e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6d1a:	4620      	mov	r0, r4
   d6d1c:	f7ff ffa8 	bl	d6c70 <pinAvailable>
   d6d20:	b128      	cbz	r0, d6d2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d22:	4629      	mov	r1, r5
   d6d24:	4620      	mov	r0, r4
}
   d6d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6d2a:	f7fe be87 	b.w	d5a3c <HAL_GPIO_Write>
   d6d2e:	bd38      	pop	{r3, r4, r5, pc}

000d6d30 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6d30:	b510      	push	{r4, lr}
   d6d32:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6d34:	f7fe fe7a 	bl	d5a2c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6d38:	3804      	subs	r0, #4
   d6d3a:	b2c0      	uxtb	r0, r0
   d6d3c:	2801      	cmp	r0, #1
   d6d3e:	d908      	bls.n	d6d52 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6d40:	4620      	mov	r0, r4
   d6d42:	f7ff ff95 	bl	d6c70 <pinAvailable>
   d6d46:	b120      	cbz	r0, d6d52 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6d48:	4620      	mov	r0, r4
}
   d6d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6d4e:	f7fe be7d 	b.w	d5a4c <HAL_GPIO_Read>
}
   d6d52:	2000      	movs	r0, #0
   d6d54:	bd10      	pop	{r4, pc}

000d6d56 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d5a:	4690      	mov	r8, r2
   d6d5c:	461e      	mov	r6, r3
   d6d5e:	2407      	movs	r4, #7
   d6d60:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6d62:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d6d64:	f1b8 0f00 	cmp.w	r8, #0
   d6d68:	d104      	bne.n	d6d74 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6d6a:	f1c4 0107 	rsb	r1, r4, #7
   d6d6e:	fa46 f101 	asr.w	r1, r6, r1
   d6d72:	e001      	b.n	d6d78 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6d74:	fa46 f104 	asr.w	r1, r6, r4
   d6d78:	f001 0101 	and.w	r1, r1, #1
   d6d7c:	4638      	mov	r0, r7
   d6d7e:	f7ff ffbe 	bl	d6cfe <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6d82:	2101      	movs	r1, #1
   d6d84:	4628      	mov	r0, r5
   d6d86:	f7ff ffba 	bl	d6cfe <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6d8a:	2100      	movs	r1, #0
   d6d8c:	4628      	mov	r0, r5
   d6d8e:	f7ff ffb6 	bl	d6cfe <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6d92:	f114 34ff 	adds.w	r4, r4, #4294967295
   d6d96:	d2e5      	bcs.n	d6d64 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d9c <_Z17acquireWireBufferv>:
   d6d9c:	b570      	push	{r4, r5, r6, lr}
   d6d9e:	4604      	mov	r4, r0
   d6da0:	2514      	movs	r5, #20
   d6da2:	462a      	mov	r2, r5
   d6da4:	4e09      	ldr	r6, [pc, #36]	; (d6dcc <_Z17acquireWireBufferv+0x30>)
   d6da6:	2100      	movs	r1, #0
   d6da8:	f000 fdd5 	bl	d7956 <memset>
   d6dac:	8025      	strh	r5, [r4, #0]
   d6dae:	2520      	movs	r5, #32
   d6db0:	4631      	mov	r1, r6
   d6db2:	60a5      	str	r5, [r4, #8]
   d6db4:	6125      	str	r5, [r4, #16]
   d6db6:	4628      	mov	r0, r5
   d6db8:	f000 f840 	bl	d6e3c <_ZnajRKSt9nothrow_t>
   d6dbc:	4631      	mov	r1, r6
   d6dbe:	6060      	str	r0, [r4, #4]
   d6dc0:	4628      	mov	r0, r5
   d6dc2:	f000 f83b 	bl	d6e3c <_ZnajRKSt9nothrow_t>
   d6dc6:	60e0      	str	r0, [r4, #12]
   d6dc8:	4620      	mov	r0, r4
   d6dca:	bd70      	pop	{r4, r5, r6, pc}
   d6dcc:	000d8528 	.word	0x000d8528

000d6dd0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6dd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6dd2:	4d0e      	ldr	r5, [pc, #56]	; (d6e0c <_Z19__fetch_global_Wirev+0x3c>)
   d6dd4:	6829      	ldr	r1, [r5, #0]
   d6dd6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6dda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ddc:	d113      	bne.n	d6e06 <_Z19__fetch_global_Wirev+0x36>
   d6dde:	4628      	mov	r0, r5
   d6de0:	f7fd f96a 	bl	d40b8 <__cxa_guard_acquire>
   d6de4:	b178      	cbz	r0, d6e06 <_Z19__fetch_global_Wirev+0x36>
   d6de6:	a801      	add	r0, sp, #4
   d6de8:	f7ff ffd8 	bl	d6d9c <_Z17acquireWireBufferv>
   d6dec:	aa01      	add	r2, sp, #4
   d6dee:	4621      	mov	r1, r4
   d6df0:	4807      	ldr	r0, [pc, #28]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6df2:	f7ff fd43 	bl	d687c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6df6:	4628      	mov	r0, r5
   d6df8:	f7fd f963 	bl	d40c2 <__cxa_guard_release>
   d6dfc:	4a05      	ldr	r2, [pc, #20]	; (d6e14 <_Z19__fetch_global_Wirev+0x44>)
   d6dfe:	4906      	ldr	r1, [pc, #24]	; (d6e18 <_Z19__fetch_global_Wirev+0x48>)
   d6e00:	4803      	ldr	r0, [pc, #12]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6e02:	f000 f80b 	bl	d6e1c <__aeabi_atexit>
	return wire;
}
   d6e06:	4802      	ldr	r0, [pc, #8]	; (d6e10 <_Z19__fetch_global_Wirev+0x40>)
   d6e08:	b007      	add	sp, #28
   d6e0a:	bd30      	pop	{r4, r5, pc}
   d6e0c:	2003e734 	.word	0x2003e734
   d6e10:	2003e738 	.word	0x2003e738
   d6e14:	2003e2f0 	.word	0x2003e2f0
   d6e18:	000d6825 	.word	0x000d6825

000d6e1c <__aeabi_atexit>:
   d6e1c:	460b      	mov	r3, r1
   d6e1e:	4601      	mov	r1, r0
   d6e20:	4618      	mov	r0, r3
   d6e22:	f000 bd7f 	b.w	d7924 <__cxa_atexit>
	...

000d6e28 <_ZSt15get_new_handlerv>:
   d6e28:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <_ZSt15get_new_handlerv+0xc>)
   d6e2a:	6818      	ldr	r0, [r3, #0]
   d6e2c:	f3bf 8f5f 	dmb	sy
   d6e30:	4770      	bx	lr
   d6e32:	bf00      	nop
   d6e34:	2003e74c 	.word	0x2003e74c

000d6e38 <_ZdlPvj>:
   d6e38:	f7fd b92f 	b.w	d409a <_ZdlPv>

000d6e3c <_ZnajRKSt9nothrow_t>:
   d6e3c:	f000 b800 	b.w	d6e40 <_ZnwjRKSt9nothrow_t>

000d6e40 <_ZnwjRKSt9nothrow_t>:
   d6e40:	b510      	push	{r4, lr}
   d6e42:	2800      	cmp	r0, #0
   d6e44:	bf14      	ite	ne
   d6e46:	4604      	movne	r4, r0
   d6e48:	2401      	moveq	r4, #1
   d6e4a:	4620      	mov	r0, r4
   d6e4c:	f7fe fffa 	bl	d5e44 <malloc>
   d6e50:	b920      	cbnz	r0, d6e5c <_ZnwjRKSt9nothrow_t+0x1c>
   d6e52:	f7ff ffe9 	bl	d6e28 <_ZSt15get_new_handlerv>
   d6e56:	b108      	cbz	r0, d6e5c <_ZnwjRKSt9nothrow_t+0x1c>
   d6e58:	4780      	blx	r0
   d6e5a:	e7f6      	b.n	d6e4a <_ZnwjRKSt9nothrow_t+0xa>
   d6e5c:	bd10      	pop	{r4, pc}
	...

000d6e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e60:	4b18      	ldr	r3, [pc, #96]	; (d6ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e62:	681a      	ldr	r2, [r3, #0]
   d6e64:	07d1      	lsls	r1, r2, #31
   d6e66:	bf5c      	itt	pl
   d6e68:	2201      	movpl	r2, #1
   d6e6a:	601a      	strpl	r2, [r3, #0]
   d6e6c:	4b16      	ldr	r3, [pc, #88]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e6e:	681a      	ldr	r2, [r3, #0]
   d6e70:	07d2      	lsls	r2, r2, #31
   d6e72:	bf5c      	itt	pl
   d6e74:	2201      	movpl	r2, #1
   d6e76:	601a      	strpl	r2, [r3, #0]
   d6e78:	4b14      	ldr	r3, [pc, #80]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e7a:	681a      	ldr	r2, [r3, #0]
   d6e7c:	07d0      	lsls	r0, r2, #31
   d6e7e:	bf5c      	itt	pl
   d6e80:	2201      	movpl	r2, #1
   d6e82:	601a      	strpl	r2, [r3, #0]
   d6e84:	4b12      	ldr	r3, [pc, #72]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e86:	681a      	ldr	r2, [r3, #0]
   d6e88:	07d1      	lsls	r1, r2, #31
   d6e8a:	bf5c      	itt	pl
   d6e8c:	2201      	movpl	r2, #1
   d6e8e:	601a      	strpl	r2, [r3, #0]
   d6e90:	4b10      	ldr	r3, [pc, #64]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e92:	681a      	ldr	r2, [r3, #0]
   d6e94:	07d2      	lsls	r2, r2, #31
   d6e96:	bf5c      	itt	pl
   d6e98:	2201      	movpl	r2, #1
   d6e9a:	601a      	strpl	r2, [r3, #0]
   d6e9c:	4b0e      	ldr	r3, [pc, #56]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e9e:	681a      	ldr	r2, [r3, #0]
   d6ea0:	07d0      	lsls	r0, r2, #31
   d6ea2:	bf5c      	itt	pl
   d6ea4:	2201      	movpl	r2, #1
   d6ea6:	601a      	strpl	r2, [r3, #0]
   d6ea8:	4b0c      	ldr	r3, [pc, #48]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6eaa:	681a      	ldr	r2, [r3, #0]
   d6eac:	07d1      	lsls	r1, r2, #31
   d6eae:	bf5c      	itt	pl
   d6eb0:	2201      	movpl	r2, #1
   d6eb2:	601a      	strpl	r2, [r3, #0]
   d6eb4:	4b0a      	ldr	r3, [pc, #40]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6eb6:	681a      	ldr	r2, [r3, #0]
   d6eb8:	07d2      	lsls	r2, r2, #31
   d6eba:	bf5c      	itt	pl
   d6ebc:	2201      	movpl	r2, #1
   d6ebe:	601a      	strpl	r2, [r3, #0]
   d6ec0:	4770      	bx	lr
   d6ec2:	bf00      	nop
   d6ec4:	2003e76c 	.word	0x2003e76c
   d6ec8:	2003e768 	.word	0x2003e768
   d6ecc:	2003e764 	.word	0x2003e764
   d6ed0:	2003e760 	.word	0x2003e760
   d6ed4:	2003e75c 	.word	0x2003e75c
   d6ed8:	2003e758 	.word	0x2003e758
   d6edc:	2003e754 	.word	0x2003e754
   d6ee0:	2003e750 	.word	0x2003e750

000d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6ee4:	4b24      	ldr	r3, [pc, #144]	; (d6f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6ee6:	681a      	ldr	r2, [r3, #0]
   d6ee8:	07d0      	lsls	r0, r2, #31
   d6eea:	bf5c      	itt	pl
   d6eec:	2201      	movpl	r2, #1
   d6eee:	601a      	strpl	r2, [r3, #0]
   d6ef0:	4b22      	ldr	r3, [pc, #136]	; (d6f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6ef2:	681a      	ldr	r2, [r3, #0]
   d6ef4:	07d1      	lsls	r1, r2, #31
   d6ef6:	bf5c      	itt	pl
   d6ef8:	2201      	movpl	r2, #1
   d6efa:	601a      	strpl	r2, [r3, #0]
   d6efc:	4b20      	ldr	r3, [pc, #128]	; (d6f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6efe:	681a      	ldr	r2, [r3, #0]
   d6f00:	07d2      	lsls	r2, r2, #31
   d6f02:	bf5c      	itt	pl
   d6f04:	2201      	movpl	r2, #1
   d6f06:	601a      	strpl	r2, [r3, #0]
   d6f08:	4b1e      	ldr	r3, [pc, #120]	; (d6f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6f0a:	681a      	ldr	r2, [r3, #0]
   d6f0c:	07d0      	lsls	r0, r2, #31
   d6f0e:	bf5c      	itt	pl
   d6f10:	2201      	movpl	r2, #1
   d6f12:	601a      	strpl	r2, [r3, #0]
   d6f14:	4b1c      	ldr	r3, [pc, #112]	; (d6f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6f16:	681a      	ldr	r2, [r3, #0]
   d6f18:	07d1      	lsls	r1, r2, #31
   d6f1a:	bf5c      	itt	pl
   d6f1c:	2201      	movpl	r2, #1
   d6f1e:	601a      	strpl	r2, [r3, #0]
   d6f20:	4b1a      	ldr	r3, [pc, #104]	; (d6f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6f22:	681a      	ldr	r2, [r3, #0]
   d6f24:	07d2      	lsls	r2, r2, #31
   d6f26:	bf5c      	itt	pl
   d6f28:	2201      	movpl	r2, #1
   d6f2a:	601a      	strpl	r2, [r3, #0]
   d6f2c:	4b18      	ldr	r3, [pc, #96]	; (d6f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6f2e:	681a      	ldr	r2, [r3, #0]
   d6f30:	07d0      	lsls	r0, r2, #31
   d6f32:	bf5c      	itt	pl
   d6f34:	2201      	movpl	r2, #1
   d6f36:	601a      	strpl	r2, [r3, #0]
   d6f38:	4b16      	ldr	r3, [pc, #88]	; (d6f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6f3a:	681a      	ldr	r2, [r3, #0]
   d6f3c:	07d1      	lsls	r1, r2, #31
   d6f3e:	bf5c      	itt	pl
   d6f40:	2201      	movpl	r2, #1
   d6f42:	601a      	strpl	r2, [r3, #0]
   d6f44:	4b14      	ldr	r3, [pc, #80]	; (d6f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6f46:	681a      	ldr	r2, [r3, #0]
   d6f48:	07d2      	lsls	r2, r2, #31
   d6f4a:	bf5c      	itt	pl
   d6f4c:	2201      	movpl	r2, #1
   d6f4e:	601a      	strpl	r2, [r3, #0]
   d6f50:	4b12      	ldr	r3, [pc, #72]	; (d6f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6f52:	681a      	ldr	r2, [r3, #0]
   d6f54:	07d0      	lsls	r0, r2, #31
   d6f56:	bf5c      	itt	pl
   d6f58:	2201      	movpl	r2, #1
   d6f5a:	601a      	strpl	r2, [r3, #0]
   d6f5c:	4b10      	ldr	r3, [pc, #64]	; (d6fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6f5e:	681a      	ldr	r2, [r3, #0]
   d6f60:	07d1      	lsls	r1, r2, #31
   d6f62:	bf5c      	itt	pl
   d6f64:	2201      	movpl	r2, #1
   d6f66:	601a      	strpl	r2, [r3, #0]
   d6f68:	4b0e      	ldr	r3, [pc, #56]	; (d6fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6f6a:	681a      	ldr	r2, [r3, #0]
   d6f6c:	07d2      	lsls	r2, r2, #31
   d6f6e:	bf5c      	itt	pl
   d6f70:	2201      	movpl	r2, #1
   d6f72:	601a      	strpl	r2, [r3, #0]
   d6f74:	4770      	bx	lr
   d6f76:	bf00      	nop
   d6f78:	2003e79c 	.word	0x2003e79c
   d6f7c:	2003e798 	.word	0x2003e798
   d6f80:	2003e794 	.word	0x2003e794
   d6f84:	2003e790 	.word	0x2003e790
   d6f88:	2003e78c 	.word	0x2003e78c
   d6f8c:	2003e788 	.word	0x2003e788
   d6f90:	2003e784 	.word	0x2003e784
   d6f94:	2003e780 	.word	0x2003e780
   d6f98:	2003e77c 	.word	0x2003e77c
   d6f9c:	2003e778 	.word	0x2003e778
   d6fa0:	2003e774 	.word	0x2003e774
   d6fa4:	2003e770 	.word	0x2003e770

000d6fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6fa8:	4b24      	ldr	r3, [pc, #144]	; (d703c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6faa:	681a      	ldr	r2, [r3, #0]
   d6fac:	07d0      	lsls	r0, r2, #31
   d6fae:	bf5c      	itt	pl
   d6fb0:	2201      	movpl	r2, #1
   d6fb2:	601a      	strpl	r2, [r3, #0]
   d6fb4:	4b22      	ldr	r3, [pc, #136]	; (d7040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6fb6:	681a      	ldr	r2, [r3, #0]
   d6fb8:	07d1      	lsls	r1, r2, #31
   d6fba:	bf5c      	itt	pl
   d6fbc:	2201      	movpl	r2, #1
   d6fbe:	601a      	strpl	r2, [r3, #0]
   d6fc0:	4b20      	ldr	r3, [pc, #128]	; (d7044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6fc2:	681a      	ldr	r2, [r3, #0]
   d6fc4:	07d2      	lsls	r2, r2, #31
   d6fc6:	bf5c      	itt	pl
   d6fc8:	2201      	movpl	r2, #1
   d6fca:	601a      	strpl	r2, [r3, #0]
   d6fcc:	4b1e      	ldr	r3, [pc, #120]	; (d7048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6fce:	681a      	ldr	r2, [r3, #0]
   d6fd0:	07d0      	lsls	r0, r2, #31
   d6fd2:	bf5c      	itt	pl
   d6fd4:	2201      	movpl	r2, #1
   d6fd6:	601a      	strpl	r2, [r3, #0]
   d6fd8:	4b1c      	ldr	r3, [pc, #112]	; (d704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6fda:	681a      	ldr	r2, [r3, #0]
   d6fdc:	07d1      	lsls	r1, r2, #31
   d6fde:	bf5c      	itt	pl
   d6fe0:	2201      	movpl	r2, #1
   d6fe2:	601a      	strpl	r2, [r3, #0]
   d6fe4:	4b1a      	ldr	r3, [pc, #104]	; (d7050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6fe6:	681a      	ldr	r2, [r3, #0]
   d6fe8:	07d2      	lsls	r2, r2, #31
   d6fea:	bf5c      	itt	pl
   d6fec:	2201      	movpl	r2, #1
   d6fee:	601a      	strpl	r2, [r3, #0]
   d6ff0:	4b18      	ldr	r3, [pc, #96]	; (d7054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6ff2:	681a      	ldr	r2, [r3, #0]
   d6ff4:	07d0      	lsls	r0, r2, #31
   d6ff6:	bf5c      	itt	pl
   d6ff8:	2201      	movpl	r2, #1
   d6ffa:	601a      	strpl	r2, [r3, #0]
   d6ffc:	4b16      	ldr	r3, [pc, #88]	; (d7058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6ffe:	681a      	ldr	r2, [r3, #0]
   d7000:	07d1      	lsls	r1, r2, #31
   d7002:	bf5c      	itt	pl
   d7004:	2201      	movpl	r2, #1
   d7006:	601a      	strpl	r2, [r3, #0]
   d7008:	4b14      	ldr	r3, [pc, #80]	; (d705c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d700a:	681a      	ldr	r2, [r3, #0]
   d700c:	07d2      	lsls	r2, r2, #31
   d700e:	bf5c      	itt	pl
   d7010:	2201      	movpl	r2, #1
   d7012:	601a      	strpl	r2, [r3, #0]
   d7014:	4b12      	ldr	r3, [pc, #72]	; (d7060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7016:	681a      	ldr	r2, [r3, #0]
   d7018:	07d0      	lsls	r0, r2, #31
   d701a:	bf5c      	itt	pl
   d701c:	2201      	movpl	r2, #1
   d701e:	601a      	strpl	r2, [r3, #0]
   d7020:	4b10      	ldr	r3, [pc, #64]	; (d7064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7022:	681a      	ldr	r2, [r3, #0]
   d7024:	07d1      	lsls	r1, r2, #31
   d7026:	bf5c      	itt	pl
   d7028:	2201      	movpl	r2, #1
   d702a:	601a      	strpl	r2, [r3, #0]
   d702c:	4b0e      	ldr	r3, [pc, #56]	; (d7068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d702e:	681a      	ldr	r2, [r3, #0]
   d7030:	07d2      	lsls	r2, r2, #31
   d7032:	bf5c      	itt	pl
   d7034:	2201      	movpl	r2, #1
   d7036:	601a      	strpl	r2, [r3, #0]
   d7038:	4770      	bx	lr
   d703a:	bf00      	nop
   d703c:	2003e7cc 	.word	0x2003e7cc
   d7040:	2003e7c8 	.word	0x2003e7c8
   d7044:	2003e7c4 	.word	0x2003e7c4
   d7048:	2003e7c0 	.word	0x2003e7c0
   d704c:	2003e7bc 	.word	0x2003e7bc
   d7050:	2003e7b8 	.word	0x2003e7b8
   d7054:	2003e7b4 	.word	0x2003e7b4
   d7058:	2003e7b0 	.word	0x2003e7b0
   d705c:	2003e7ac 	.word	0x2003e7ac
   d7060:	2003e7a8 	.word	0x2003e7a8
   d7064:	2003e7a4 	.word	0x2003e7a4
   d7068:	2003e7a0 	.word	0x2003e7a0

000d706c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d706c:	4b18      	ldr	r3, [pc, #96]	; (d70d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d706e:	681a      	ldr	r2, [r3, #0]
   d7070:	07d1      	lsls	r1, r2, #31
   d7072:	bf5c      	itt	pl
   d7074:	2201      	movpl	r2, #1
   d7076:	601a      	strpl	r2, [r3, #0]
   d7078:	4b16      	ldr	r3, [pc, #88]	; (d70d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d707a:	681a      	ldr	r2, [r3, #0]
   d707c:	07d2      	lsls	r2, r2, #31
   d707e:	bf5c      	itt	pl
   d7080:	2201      	movpl	r2, #1
   d7082:	601a      	strpl	r2, [r3, #0]
   d7084:	4b14      	ldr	r3, [pc, #80]	; (d70d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7086:	681a      	ldr	r2, [r3, #0]
   d7088:	07d0      	lsls	r0, r2, #31
   d708a:	bf5c      	itt	pl
   d708c:	2201      	movpl	r2, #1
   d708e:	601a      	strpl	r2, [r3, #0]
   d7090:	4b12      	ldr	r3, [pc, #72]	; (d70dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7092:	681a      	ldr	r2, [r3, #0]
   d7094:	07d1      	lsls	r1, r2, #31
   d7096:	bf5c      	itt	pl
   d7098:	2201      	movpl	r2, #1
   d709a:	601a      	strpl	r2, [r3, #0]
   d709c:	4b10      	ldr	r3, [pc, #64]	; (d70e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d709e:	681a      	ldr	r2, [r3, #0]
   d70a0:	07d2      	lsls	r2, r2, #31
   d70a2:	bf5c      	itt	pl
   d70a4:	2201      	movpl	r2, #1
   d70a6:	601a      	strpl	r2, [r3, #0]
   d70a8:	4b0e      	ldr	r3, [pc, #56]	; (d70e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d70aa:	681a      	ldr	r2, [r3, #0]
   d70ac:	07d0      	lsls	r0, r2, #31
   d70ae:	bf5c      	itt	pl
   d70b0:	2201      	movpl	r2, #1
   d70b2:	601a      	strpl	r2, [r3, #0]
   d70b4:	4b0c      	ldr	r3, [pc, #48]	; (d70e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d70b6:	681a      	ldr	r2, [r3, #0]
   d70b8:	07d1      	lsls	r1, r2, #31
   d70ba:	bf5c      	itt	pl
   d70bc:	2201      	movpl	r2, #1
   d70be:	601a      	strpl	r2, [r3, #0]
   d70c0:	4b0a      	ldr	r3, [pc, #40]	; (d70ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d70c2:	681a      	ldr	r2, [r3, #0]
   d70c4:	07d2      	lsls	r2, r2, #31
   d70c6:	bf5c      	itt	pl
   d70c8:	2201      	movpl	r2, #1
   d70ca:	601a      	strpl	r2, [r3, #0]
   d70cc:	4770      	bx	lr
   d70ce:	bf00      	nop
   d70d0:	2003e7ec 	.word	0x2003e7ec
   d70d4:	2003e7e8 	.word	0x2003e7e8
   d70d8:	2003e7e4 	.word	0x2003e7e4
   d70dc:	2003e7e0 	.word	0x2003e7e0
   d70e0:	2003e7dc 	.word	0x2003e7dc
   d70e4:	2003e7d8 	.word	0x2003e7d8
   d70e8:	2003e7d4 	.word	0x2003e7d4
   d70ec:	2003e7d0 	.word	0x2003e7d0

000d70f0 <__aeabi_drsub>:
   d70f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d70f4:	e002      	b.n	d70fc <__adddf3>
   d70f6:	bf00      	nop

000d70f8 <__aeabi_dsub>:
   d70f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d70fc <__adddf3>:
   d70fc:	b530      	push	{r4, r5, lr}
   d70fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7102:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7106:	ea94 0f05 	teq	r4, r5
   d710a:	bf08      	it	eq
   d710c:	ea90 0f02 	teqeq	r0, r2
   d7110:	bf1f      	itttt	ne
   d7112:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7116:	ea55 0c02 	orrsne.w	ip, r5, r2
   d711a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d711e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7122:	f000 80e2 	beq.w	d72ea <__adddf3+0x1ee>
   d7126:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d712a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d712e:	bfb8      	it	lt
   d7130:	426d      	neglt	r5, r5
   d7132:	dd0c      	ble.n	d714e <__adddf3+0x52>
   d7134:	442c      	add	r4, r5
   d7136:	ea80 0202 	eor.w	r2, r0, r2
   d713a:	ea81 0303 	eor.w	r3, r1, r3
   d713e:	ea82 0000 	eor.w	r0, r2, r0
   d7142:	ea83 0101 	eor.w	r1, r3, r1
   d7146:	ea80 0202 	eor.w	r2, r0, r2
   d714a:	ea81 0303 	eor.w	r3, r1, r3
   d714e:	2d36      	cmp	r5, #54	; 0x36
   d7150:	bf88      	it	hi
   d7152:	bd30      	pophi	{r4, r5, pc}
   d7154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7158:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d715c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7164:	d002      	beq.n	d716c <__adddf3+0x70>
   d7166:	4240      	negs	r0, r0
   d7168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d716c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7170:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7178:	d002      	beq.n	d7180 <__adddf3+0x84>
   d717a:	4252      	negs	r2, r2
   d717c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7180:	ea94 0f05 	teq	r4, r5
   d7184:	f000 80a7 	beq.w	d72d6 <__adddf3+0x1da>
   d7188:	f1a4 0401 	sub.w	r4, r4, #1
   d718c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7190:	db0d      	blt.n	d71ae <__adddf3+0xb2>
   d7192:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7196:	fa22 f205 	lsr.w	r2, r2, r5
   d719a:	1880      	adds	r0, r0, r2
   d719c:	f141 0100 	adc.w	r1, r1, #0
   d71a0:	fa03 f20e 	lsl.w	r2, r3, lr
   d71a4:	1880      	adds	r0, r0, r2
   d71a6:	fa43 f305 	asr.w	r3, r3, r5
   d71aa:	4159      	adcs	r1, r3
   d71ac:	e00e      	b.n	d71cc <__adddf3+0xd0>
   d71ae:	f1a5 0520 	sub.w	r5, r5, #32
   d71b2:	f10e 0e20 	add.w	lr, lr, #32
   d71b6:	2a01      	cmp	r2, #1
   d71b8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d71bc:	bf28      	it	cs
   d71be:	f04c 0c02 	orrcs.w	ip, ip, #2
   d71c2:	fa43 f305 	asr.w	r3, r3, r5
   d71c6:	18c0      	adds	r0, r0, r3
   d71c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d71cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d71d0:	d507      	bpl.n	d71e2 <__adddf3+0xe6>
   d71d2:	f04f 0e00 	mov.w	lr, #0
   d71d6:	f1dc 0c00 	rsbs	ip, ip, #0
   d71da:	eb7e 0000 	sbcs.w	r0, lr, r0
   d71de:	eb6e 0101 	sbc.w	r1, lr, r1
   d71e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d71e6:	d31b      	bcc.n	d7220 <__adddf3+0x124>
   d71e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d71ec:	d30c      	bcc.n	d7208 <__adddf3+0x10c>
   d71ee:	0849      	lsrs	r1, r1, #1
   d71f0:	ea5f 0030 	movs.w	r0, r0, rrx
   d71f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d71f8:	f104 0401 	add.w	r4, r4, #1
   d71fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7204:	f080 809a 	bcs.w	d733c <__adddf3+0x240>
   d7208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d720c:	bf08      	it	eq
   d720e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7212:	f150 0000 	adcs.w	r0, r0, #0
   d7216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d721a:	ea41 0105 	orr.w	r1, r1, r5
   d721e:	bd30      	pop	{r4, r5, pc}
   d7220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7224:	4140      	adcs	r0, r0
   d7226:	eb41 0101 	adc.w	r1, r1, r1
   d722a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d722e:	f1a4 0401 	sub.w	r4, r4, #1
   d7232:	d1e9      	bne.n	d7208 <__adddf3+0x10c>
   d7234:	f091 0f00 	teq	r1, #0
   d7238:	bf04      	itt	eq
   d723a:	4601      	moveq	r1, r0
   d723c:	2000      	moveq	r0, #0
   d723e:	fab1 f381 	clz	r3, r1
   d7242:	bf08      	it	eq
   d7244:	3320      	addeq	r3, #32
   d7246:	f1a3 030b 	sub.w	r3, r3, #11
   d724a:	f1b3 0220 	subs.w	r2, r3, #32
   d724e:	da0c      	bge.n	d726a <__adddf3+0x16e>
   d7250:	320c      	adds	r2, #12
   d7252:	dd08      	ble.n	d7266 <__adddf3+0x16a>
   d7254:	f102 0c14 	add.w	ip, r2, #20
   d7258:	f1c2 020c 	rsb	r2, r2, #12
   d725c:	fa01 f00c 	lsl.w	r0, r1, ip
   d7260:	fa21 f102 	lsr.w	r1, r1, r2
   d7264:	e00c      	b.n	d7280 <__adddf3+0x184>
   d7266:	f102 0214 	add.w	r2, r2, #20
   d726a:	bfd8      	it	le
   d726c:	f1c2 0c20 	rsble	ip, r2, #32
   d7270:	fa01 f102 	lsl.w	r1, r1, r2
   d7274:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7278:	bfdc      	itt	le
   d727a:	ea41 010c 	orrle.w	r1, r1, ip
   d727e:	4090      	lslle	r0, r2
   d7280:	1ae4      	subs	r4, r4, r3
   d7282:	bfa2      	ittt	ge
   d7284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7288:	4329      	orrge	r1, r5
   d728a:	bd30      	popge	{r4, r5, pc}
   d728c:	ea6f 0404 	mvn.w	r4, r4
   d7290:	3c1f      	subs	r4, #31
   d7292:	da1c      	bge.n	d72ce <__adddf3+0x1d2>
   d7294:	340c      	adds	r4, #12
   d7296:	dc0e      	bgt.n	d72b6 <__adddf3+0x1ba>
   d7298:	f104 0414 	add.w	r4, r4, #20
   d729c:	f1c4 0220 	rsb	r2, r4, #32
   d72a0:	fa20 f004 	lsr.w	r0, r0, r4
   d72a4:	fa01 f302 	lsl.w	r3, r1, r2
   d72a8:	ea40 0003 	orr.w	r0, r0, r3
   d72ac:	fa21 f304 	lsr.w	r3, r1, r4
   d72b0:	ea45 0103 	orr.w	r1, r5, r3
   d72b4:	bd30      	pop	{r4, r5, pc}
   d72b6:	f1c4 040c 	rsb	r4, r4, #12
   d72ba:	f1c4 0220 	rsb	r2, r4, #32
   d72be:	fa20 f002 	lsr.w	r0, r0, r2
   d72c2:	fa01 f304 	lsl.w	r3, r1, r4
   d72c6:	ea40 0003 	orr.w	r0, r0, r3
   d72ca:	4629      	mov	r1, r5
   d72cc:	bd30      	pop	{r4, r5, pc}
   d72ce:	fa21 f004 	lsr.w	r0, r1, r4
   d72d2:	4629      	mov	r1, r5
   d72d4:	bd30      	pop	{r4, r5, pc}
   d72d6:	f094 0f00 	teq	r4, #0
   d72da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d72de:	bf06      	itte	eq
   d72e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d72e4:	3401      	addeq	r4, #1
   d72e6:	3d01      	subne	r5, #1
   d72e8:	e74e      	b.n	d7188 <__adddf3+0x8c>
   d72ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d72ee:	bf18      	it	ne
   d72f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d72f4:	d029      	beq.n	d734a <__adddf3+0x24e>
   d72f6:	ea94 0f05 	teq	r4, r5
   d72fa:	bf08      	it	eq
   d72fc:	ea90 0f02 	teqeq	r0, r2
   d7300:	d005      	beq.n	d730e <__adddf3+0x212>
   d7302:	ea54 0c00 	orrs.w	ip, r4, r0
   d7306:	bf04      	itt	eq
   d7308:	4619      	moveq	r1, r3
   d730a:	4610      	moveq	r0, r2
   d730c:	bd30      	pop	{r4, r5, pc}
   d730e:	ea91 0f03 	teq	r1, r3
   d7312:	bf1e      	ittt	ne
   d7314:	2100      	movne	r1, #0
   d7316:	2000      	movne	r0, #0
   d7318:	bd30      	popne	{r4, r5, pc}
   d731a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d731e:	d105      	bne.n	d732c <__adddf3+0x230>
   d7320:	0040      	lsls	r0, r0, #1
   d7322:	4149      	adcs	r1, r1
   d7324:	bf28      	it	cs
   d7326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d732a:	bd30      	pop	{r4, r5, pc}
   d732c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7330:	bf3c      	itt	cc
   d7332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7336:	bd30      	popcc	{r4, r5, pc}
   d7338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d733c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7344:	f04f 0000 	mov.w	r0, #0
   d7348:	bd30      	pop	{r4, r5, pc}
   d734a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d734e:	bf1a      	itte	ne
   d7350:	4619      	movne	r1, r3
   d7352:	4610      	movne	r0, r2
   d7354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7358:	bf1c      	itt	ne
   d735a:	460b      	movne	r3, r1
   d735c:	4602      	movne	r2, r0
   d735e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7362:	bf06      	itte	eq
   d7364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7368:	ea91 0f03 	teqeq	r1, r3
   d736c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7370:	bd30      	pop	{r4, r5, pc}
   d7372:	bf00      	nop

000d7374 <__aeabi_ui2d>:
   d7374:	f090 0f00 	teq	r0, #0
   d7378:	bf04      	itt	eq
   d737a:	2100      	moveq	r1, #0
   d737c:	4770      	bxeq	lr
   d737e:	b530      	push	{r4, r5, lr}
   d7380:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7384:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7388:	f04f 0500 	mov.w	r5, #0
   d738c:	f04f 0100 	mov.w	r1, #0
   d7390:	e750      	b.n	d7234 <__adddf3+0x138>
   d7392:	bf00      	nop

000d7394 <__aeabi_i2d>:
   d7394:	f090 0f00 	teq	r0, #0
   d7398:	bf04      	itt	eq
   d739a:	2100      	moveq	r1, #0
   d739c:	4770      	bxeq	lr
   d739e:	b530      	push	{r4, r5, lr}
   d73a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d73a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d73a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d73ac:	bf48      	it	mi
   d73ae:	4240      	negmi	r0, r0
   d73b0:	f04f 0100 	mov.w	r1, #0
   d73b4:	e73e      	b.n	d7234 <__adddf3+0x138>
   d73b6:	bf00      	nop

000d73b8 <__aeabi_f2d>:
   d73b8:	0042      	lsls	r2, r0, #1
   d73ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d73be:	ea4f 0131 	mov.w	r1, r1, rrx
   d73c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d73c6:	bf1f      	itttt	ne
   d73c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d73cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d73d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d73d4:	4770      	bxne	lr
   d73d6:	f092 0f00 	teq	r2, #0
   d73da:	bf14      	ite	ne
   d73dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d73e0:	4770      	bxeq	lr
   d73e2:	b530      	push	{r4, r5, lr}
   d73e4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d73e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d73ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73f0:	e720      	b.n	d7234 <__adddf3+0x138>
   d73f2:	bf00      	nop

000d73f4 <__aeabi_ul2d>:
   d73f4:	ea50 0201 	orrs.w	r2, r0, r1
   d73f8:	bf08      	it	eq
   d73fa:	4770      	bxeq	lr
   d73fc:	b530      	push	{r4, r5, lr}
   d73fe:	f04f 0500 	mov.w	r5, #0
   d7402:	e00a      	b.n	d741a <__aeabi_l2d+0x16>

000d7404 <__aeabi_l2d>:
   d7404:	ea50 0201 	orrs.w	r2, r0, r1
   d7408:	bf08      	it	eq
   d740a:	4770      	bxeq	lr
   d740c:	b530      	push	{r4, r5, lr}
   d740e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7412:	d502      	bpl.n	d741a <__aeabi_l2d+0x16>
   d7414:	4240      	negs	r0, r0
   d7416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d741a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d741e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7422:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7426:	f43f aedc 	beq.w	d71e2 <__adddf3+0xe6>
   d742a:	f04f 0203 	mov.w	r2, #3
   d742e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7432:	bf18      	it	ne
   d7434:	3203      	addne	r2, #3
   d7436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d743a:	bf18      	it	ne
   d743c:	3203      	addne	r2, #3
   d743e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7442:	f1c2 0320 	rsb	r3, r2, #32
   d7446:	fa00 fc03 	lsl.w	ip, r0, r3
   d744a:	fa20 f002 	lsr.w	r0, r0, r2
   d744e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7452:	ea40 000e 	orr.w	r0, r0, lr
   d7456:	fa21 f102 	lsr.w	r1, r1, r2
   d745a:	4414      	add	r4, r2
   d745c:	e6c1      	b.n	d71e2 <__adddf3+0xe6>
   d745e:	bf00      	nop

000d7460 <__aeabi_dmul>:
   d7460:	b570      	push	{r4, r5, r6, lr}
   d7462:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7466:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d746a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d746e:	bf1d      	ittte	ne
   d7470:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7474:	ea94 0f0c 	teqne	r4, ip
   d7478:	ea95 0f0c 	teqne	r5, ip
   d747c:	f000 f8de 	bleq	d763c <__aeabi_dmul+0x1dc>
   d7480:	442c      	add	r4, r5
   d7482:	ea81 0603 	eor.w	r6, r1, r3
   d7486:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d748a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d748e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7492:	bf18      	it	ne
   d7494:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d749c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d74a0:	d038      	beq.n	d7514 <__aeabi_dmul+0xb4>
   d74a2:	fba0 ce02 	umull	ip, lr, r0, r2
   d74a6:	f04f 0500 	mov.w	r5, #0
   d74aa:	fbe1 e502 	umlal	lr, r5, r1, r2
   d74ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d74b2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d74b6:	f04f 0600 	mov.w	r6, #0
   d74ba:	fbe1 5603 	umlal	r5, r6, r1, r3
   d74be:	f09c 0f00 	teq	ip, #0
   d74c2:	bf18      	it	ne
   d74c4:	f04e 0e01 	orrne.w	lr, lr, #1
   d74c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d74cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d74d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d74d4:	d204      	bcs.n	d74e0 <__aeabi_dmul+0x80>
   d74d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d74da:	416d      	adcs	r5, r5
   d74dc:	eb46 0606 	adc.w	r6, r6, r6
   d74e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d74e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d74e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d74ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d74f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d74f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d74f8:	bf88      	it	hi
   d74fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d74fe:	d81e      	bhi.n	d753e <__aeabi_dmul+0xde>
   d7500:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7504:	bf08      	it	eq
   d7506:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d750a:	f150 0000 	adcs.w	r0, r0, #0
   d750e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7512:	bd70      	pop	{r4, r5, r6, pc}
   d7514:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7518:	ea46 0101 	orr.w	r1, r6, r1
   d751c:	ea40 0002 	orr.w	r0, r0, r2
   d7520:	ea81 0103 	eor.w	r1, r1, r3
   d7524:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7528:	bfc2      	ittt	gt
   d752a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d752e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7532:	bd70      	popgt	{r4, r5, r6, pc}
   d7534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7538:	f04f 0e00 	mov.w	lr, #0
   d753c:	3c01      	subs	r4, #1
   d753e:	f300 80ab 	bgt.w	d7698 <__aeabi_dmul+0x238>
   d7542:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7546:	bfde      	ittt	le
   d7548:	2000      	movle	r0, #0
   d754a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d754e:	bd70      	pople	{r4, r5, r6, pc}
   d7550:	f1c4 0400 	rsb	r4, r4, #0
   d7554:	3c20      	subs	r4, #32
   d7556:	da35      	bge.n	d75c4 <__aeabi_dmul+0x164>
   d7558:	340c      	adds	r4, #12
   d755a:	dc1b      	bgt.n	d7594 <__aeabi_dmul+0x134>
   d755c:	f104 0414 	add.w	r4, r4, #20
   d7560:	f1c4 0520 	rsb	r5, r4, #32
   d7564:	fa00 f305 	lsl.w	r3, r0, r5
   d7568:	fa20 f004 	lsr.w	r0, r0, r4
   d756c:	fa01 f205 	lsl.w	r2, r1, r5
   d7570:	ea40 0002 	orr.w	r0, r0, r2
   d7574:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d757c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7580:	fa21 f604 	lsr.w	r6, r1, r4
   d7584:	eb42 0106 	adc.w	r1, r2, r6
   d7588:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d758c:	bf08      	it	eq
   d758e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7592:	bd70      	pop	{r4, r5, r6, pc}
   d7594:	f1c4 040c 	rsb	r4, r4, #12
   d7598:	f1c4 0520 	rsb	r5, r4, #32
   d759c:	fa00 f304 	lsl.w	r3, r0, r4
   d75a0:	fa20 f005 	lsr.w	r0, r0, r5
   d75a4:	fa01 f204 	lsl.w	r2, r1, r4
   d75a8:	ea40 0002 	orr.w	r0, r0, r2
   d75ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d75b4:	f141 0100 	adc.w	r1, r1, #0
   d75b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75bc:	bf08      	it	eq
   d75be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75c2:	bd70      	pop	{r4, r5, r6, pc}
   d75c4:	f1c4 0520 	rsb	r5, r4, #32
   d75c8:	fa00 f205 	lsl.w	r2, r0, r5
   d75cc:	ea4e 0e02 	orr.w	lr, lr, r2
   d75d0:	fa20 f304 	lsr.w	r3, r0, r4
   d75d4:	fa01 f205 	lsl.w	r2, r1, r5
   d75d8:	ea43 0302 	orr.w	r3, r3, r2
   d75dc:	fa21 f004 	lsr.w	r0, r1, r4
   d75e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75e4:	fa21 f204 	lsr.w	r2, r1, r4
   d75e8:	ea20 0002 	bic.w	r0, r0, r2
   d75ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d75f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d75f4:	bf08      	it	eq
   d75f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d75fa:	bd70      	pop	{r4, r5, r6, pc}
   d75fc:	f094 0f00 	teq	r4, #0
   d7600:	d10f      	bne.n	d7622 <__aeabi_dmul+0x1c2>
   d7602:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7606:	0040      	lsls	r0, r0, #1
   d7608:	eb41 0101 	adc.w	r1, r1, r1
   d760c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7610:	bf08      	it	eq
   d7612:	3c01      	subeq	r4, #1
   d7614:	d0f7      	beq.n	d7606 <__aeabi_dmul+0x1a6>
   d7616:	ea41 0106 	orr.w	r1, r1, r6
   d761a:	f095 0f00 	teq	r5, #0
   d761e:	bf18      	it	ne
   d7620:	4770      	bxne	lr
   d7622:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7626:	0052      	lsls	r2, r2, #1
   d7628:	eb43 0303 	adc.w	r3, r3, r3
   d762c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7630:	bf08      	it	eq
   d7632:	3d01      	subeq	r5, #1
   d7634:	d0f7      	beq.n	d7626 <__aeabi_dmul+0x1c6>
   d7636:	ea43 0306 	orr.w	r3, r3, r6
   d763a:	4770      	bx	lr
   d763c:	ea94 0f0c 	teq	r4, ip
   d7640:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7644:	bf18      	it	ne
   d7646:	ea95 0f0c 	teqne	r5, ip
   d764a:	d00c      	beq.n	d7666 <__aeabi_dmul+0x206>
   d764c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7650:	bf18      	it	ne
   d7652:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7656:	d1d1      	bne.n	d75fc <__aeabi_dmul+0x19c>
   d7658:	ea81 0103 	eor.w	r1, r1, r3
   d765c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7660:	f04f 0000 	mov.w	r0, #0
   d7664:	bd70      	pop	{r4, r5, r6, pc}
   d7666:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d766a:	bf06      	itte	eq
   d766c:	4610      	moveq	r0, r2
   d766e:	4619      	moveq	r1, r3
   d7670:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7674:	d019      	beq.n	d76aa <__aeabi_dmul+0x24a>
   d7676:	ea94 0f0c 	teq	r4, ip
   d767a:	d102      	bne.n	d7682 <__aeabi_dmul+0x222>
   d767c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7680:	d113      	bne.n	d76aa <__aeabi_dmul+0x24a>
   d7682:	ea95 0f0c 	teq	r5, ip
   d7686:	d105      	bne.n	d7694 <__aeabi_dmul+0x234>
   d7688:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d768c:	bf1c      	itt	ne
   d768e:	4610      	movne	r0, r2
   d7690:	4619      	movne	r1, r3
   d7692:	d10a      	bne.n	d76aa <__aeabi_dmul+0x24a>
   d7694:	ea81 0103 	eor.w	r1, r1, r3
   d7698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d769c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d76a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d76a4:	f04f 0000 	mov.w	r0, #0
   d76a8:	bd70      	pop	{r4, r5, r6, pc}
   d76aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d76ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d76b2:	bd70      	pop	{r4, r5, r6, pc}

000d76b4 <__aeabi_ddiv>:
   d76b4:	b570      	push	{r4, r5, r6, lr}
   d76b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d76ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d76be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d76c2:	bf1d      	ittte	ne
   d76c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d76c8:	ea94 0f0c 	teqne	r4, ip
   d76cc:	ea95 0f0c 	teqne	r5, ip
   d76d0:	f000 f8a7 	bleq	d7822 <__aeabi_ddiv+0x16e>
   d76d4:	eba4 0405 	sub.w	r4, r4, r5
   d76d8:	ea81 0e03 	eor.w	lr, r1, r3
   d76dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d76e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d76e4:	f000 8088 	beq.w	d77f8 <__aeabi_ddiv+0x144>
   d76e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d76ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d76f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d76f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d76f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d76fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7700:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7704:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7708:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d770c:	429d      	cmp	r5, r3
   d770e:	bf08      	it	eq
   d7710:	4296      	cmpeq	r6, r2
   d7712:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7716:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d771a:	d202      	bcs.n	d7722 <__aeabi_ddiv+0x6e>
   d771c:	085b      	lsrs	r3, r3, #1
   d771e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7722:	1ab6      	subs	r6, r6, r2
   d7724:	eb65 0503 	sbc.w	r5, r5, r3
   d7728:	085b      	lsrs	r3, r3, #1
   d772a:	ea4f 0232 	mov.w	r2, r2, rrx
   d772e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7732:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7736:	ebb6 0e02 	subs.w	lr, r6, r2
   d773a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d773e:	bf22      	ittt	cs
   d7740:	1ab6      	subcs	r6, r6, r2
   d7742:	4675      	movcs	r5, lr
   d7744:	ea40 000c 	orrcs.w	r0, r0, ip
   d7748:	085b      	lsrs	r3, r3, #1
   d774a:	ea4f 0232 	mov.w	r2, r2, rrx
   d774e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7752:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7756:	bf22      	ittt	cs
   d7758:	1ab6      	subcs	r6, r6, r2
   d775a:	4675      	movcs	r5, lr
   d775c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7760:	085b      	lsrs	r3, r3, #1
   d7762:	ea4f 0232 	mov.w	r2, r2, rrx
   d7766:	ebb6 0e02 	subs.w	lr, r6, r2
   d776a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d776e:	bf22      	ittt	cs
   d7770:	1ab6      	subcs	r6, r6, r2
   d7772:	4675      	movcs	r5, lr
   d7774:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7778:	085b      	lsrs	r3, r3, #1
   d777a:	ea4f 0232 	mov.w	r2, r2, rrx
   d777e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7782:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7786:	bf22      	ittt	cs
   d7788:	1ab6      	subcs	r6, r6, r2
   d778a:	4675      	movcs	r5, lr
   d778c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7790:	ea55 0e06 	orrs.w	lr, r5, r6
   d7794:	d018      	beq.n	d77c8 <__aeabi_ddiv+0x114>
   d7796:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d779a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d779e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d77a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d77a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d77aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d77ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d77b2:	d1c0      	bne.n	d7736 <__aeabi_ddiv+0x82>
   d77b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77b8:	d10b      	bne.n	d77d2 <__aeabi_ddiv+0x11e>
   d77ba:	ea41 0100 	orr.w	r1, r1, r0
   d77be:	f04f 0000 	mov.w	r0, #0
   d77c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d77c6:	e7b6      	b.n	d7736 <__aeabi_ddiv+0x82>
   d77c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d77cc:	bf04      	itt	eq
   d77ce:	4301      	orreq	r1, r0
   d77d0:	2000      	moveq	r0, #0
   d77d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d77d6:	bf88      	it	hi
   d77d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d77dc:	f63f aeaf 	bhi.w	d753e <__aeabi_dmul+0xde>
   d77e0:	ebb5 0c03 	subs.w	ip, r5, r3
   d77e4:	bf04      	itt	eq
   d77e6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d77ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d77ee:	f150 0000 	adcs.w	r0, r0, #0
   d77f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77f6:	bd70      	pop	{r4, r5, r6, pc}
   d77f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d77fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7800:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7804:	bfc2      	ittt	gt
   d7806:	ebd4 050c 	rsbsgt	r5, r4, ip
   d780a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d780e:	bd70      	popgt	{r4, r5, r6, pc}
   d7810:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7814:	f04f 0e00 	mov.w	lr, #0
   d7818:	3c01      	subs	r4, #1
   d781a:	e690      	b.n	d753e <__aeabi_dmul+0xde>
   d781c:	ea45 0e06 	orr.w	lr, r5, r6
   d7820:	e68d      	b.n	d753e <__aeabi_dmul+0xde>
   d7822:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7826:	ea94 0f0c 	teq	r4, ip
   d782a:	bf08      	it	eq
   d782c:	ea95 0f0c 	teqeq	r5, ip
   d7830:	f43f af3b 	beq.w	d76aa <__aeabi_dmul+0x24a>
   d7834:	ea94 0f0c 	teq	r4, ip
   d7838:	d10a      	bne.n	d7850 <__aeabi_ddiv+0x19c>
   d783a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d783e:	f47f af34 	bne.w	d76aa <__aeabi_dmul+0x24a>
   d7842:	ea95 0f0c 	teq	r5, ip
   d7846:	f47f af25 	bne.w	d7694 <__aeabi_dmul+0x234>
   d784a:	4610      	mov	r0, r2
   d784c:	4619      	mov	r1, r3
   d784e:	e72c      	b.n	d76aa <__aeabi_dmul+0x24a>
   d7850:	ea95 0f0c 	teq	r5, ip
   d7854:	d106      	bne.n	d7864 <__aeabi_ddiv+0x1b0>
   d7856:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d785a:	f43f aefd 	beq.w	d7658 <__aeabi_dmul+0x1f8>
   d785e:	4610      	mov	r0, r2
   d7860:	4619      	mov	r1, r3
   d7862:	e722      	b.n	d76aa <__aeabi_dmul+0x24a>
   d7864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7868:	bf18      	it	ne
   d786a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d786e:	f47f aec5 	bne.w	d75fc <__aeabi_dmul+0x19c>
   d7872:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7876:	f47f af0d 	bne.w	d7694 <__aeabi_dmul+0x234>
   d787a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d787e:	f47f aeeb 	bne.w	d7658 <__aeabi_dmul+0x1f8>
   d7882:	e712      	b.n	d76aa <__aeabi_dmul+0x24a>

000d7884 <__aeabi_d2f>:
   d7884:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7888:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d788c:	bf24      	itt	cs
   d788e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7892:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7896:	d90d      	bls.n	d78b4 <__aeabi_d2f+0x30>
   d7898:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d789c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d78a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d78a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d78a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d78ac:	bf08      	it	eq
   d78ae:	f020 0001 	biceq.w	r0, r0, #1
   d78b2:	4770      	bx	lr
   d78b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d78b8:	d121      	bne.n	d78fe <__aeabi_d2f+0x7a>
   d78ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d78be:	bfbc      	itt	lt
   d78c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d78c4:	4770      	bxlt	lr
   d78c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d78ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d78ce:	f1c2 0218 	rsb	r2, r2, #24
   d78d2:	f1c2 0c20 	rsb	ip, r2, #32
   d78d6:	fa10 f30c 	lsls.w	r3, r0, ip
   d78da:	fa20 f002 	lsr.w	r0, r0, r2
   d78de:	bf18      	it	ne
   d78e0:	f040 0001 	orrne.w	r0, r0, #1
   d78e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d78e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d78ec:	fa03 fc0c 	lsl.w	ip, r3, ip
   d78f0:	ea40 000c 	orr.w	r0, r0, ip
   d78f4:	fa23 f302 	lsr.w	r3, r3, r2
   d78f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d78fc:	e7cc      	b.n	d7898 <__aeabi_d2f+0x14>
   d78fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7902:	d107      	bne.n	d7914 <__aeabi_d2f+0x90>
   d7904:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7908:	bf1e      	ittt	ne
   d790a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d790e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7912:	4770      	bxne	lr
   d7914:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7918:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d791c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7920:	4770      	bx	lr
   d7922:	bf00      	nop

000d7924 <__cxa_atexit>:
   d7924:	b510      	push	{r4, lr}
   d7926:	4c05      	ldr	r4, [pc, #20]	; (d793c <__cxa_atexit+0x18>)
   d7928:	4613      	mov	r3, r2
   d792a:	b12c      	cbz	r4, d7938 <__cxa_atexit+0x14>
   d792c:	460a      	mov	r2, r1
   d792e:	4601      	mov	r1, r0
   d7930:	2002      	movs	r0, #2
   d7932:	f3af 8000 	nop.w
   d7936:	bd10      	pop	{r4, pc}
   d7938:	4620      	mov	r0, r4
   d793a:	bd10      	pop	{r4, pc}
   d793c:	00000000 	.word	0x00000000

000d7940 <memcpy>:
   d7940:	b510      	push	{r4, lr}
   d7942:	1e43      	subs	r3, r0, #1
   d7944:	440a      	add	r2, r1
   d7946:	4291      	cmp	r1, r2
   d7948:	d004      	beq.n	d7954 <memcpy+0x14>
   d794a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d794e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7952:	e7f8      	b.n	d7946 <memcpy+0x6>
   d7954:	bd10      	pop	{r4, pc}

000d7956 <memset>:
   d7956:	4402      	add	r2, r0
   d7958:	4603      	mov	r3, r0
   d795a:	4293      	cmp	r3, r2
   d795c:	d002      	beq.n	d7964 <memset+0xe>
   d795e:	f803 1b01 	strb.w	r1, [r3], #1
   d7962:	e7fa      	b.n	d795a <memset+0x4>
   d7964:	4770      	bx	lr
	...

000d7968 <srand>:
   d7968:	b538      	push	{r3, r4, r5, lr}
   d796a:	4b12      	ldr	r3, [pc, #72]	; (d79b4 <srand+0x4c>)
   d796c:	681c      	ldr	r4, [r3, #0]
   d796e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7970:	4605      	mov	r5, r0
   d7972:	b9d3      	cbnz	r3, d79aa <srand+0x42>
   d7974:	2018      	movs	r0, #24
   d7976:	f7fe fa65 	bl	d5e44 <malloc>
   d797a:	f243 330e 	movw	r3, #13070	; 0x330e
   d797e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7980:	8003      	strh	r3, [r0, #0]
   d7982:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7986:	8043      	strh	r3, [r0, #2]
   d7988:	f241 2334 	movw	r3, #4660	; 0x1234
   d798c:	8083      	strh	r3, [r0, #4]
   d798e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7992:	80c3      	strh	r3, [r0, #6]
   d7994:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7998:	8103      	strh	r3, [r0, #8]
   d799a:	2305      	movs	r3, #5
   d799c:	8143      	strh	r3, [r0, #10]
   d799e:	230b      	movs	r3, #11
   d79a0:	8183      	strh	r3, [r0, #12]
   d79a2:	2201      	movs	r2, #1
   d79a4:	2300      	movs	r3, #0
   d79a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d79aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d79ac:	2200      	movs	r2, #0
   d79ae:	611d      	str	r5, [r3, #16]
   d79b0:	615a      	str	r2, [r3, #20]
   d79b2:	bd38      	pop	{r3, r4, r5, pc}
   d79b4:	2003e2ec 	.word	0x2003e2ec

000d79b8 <strlen>:
   d79b8:	4603      	mov	r3, r0
   d79ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d79be:	2a00      	cmp	r2, #0
   d79c0:	d1fb      	bne.n	d79ba <strlen+0x2>
   d79c2:	1a18      	subs	r0, r3, r0
   d79c4:	3801      	subs	r0, #1
   d79c6:	4770      	bx	lr

000d79c8 <dynalib_user>:
   d79c8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d79d8:	0000 0000 423c 5455 4f54 3e4e 000a 2020     ....<BUTTON>..  
   d79e8:	2020 2020 4f4d 4544 000a 593c 4c45 4f4c         MODE..<YELLO
   d79f8:	3e57 000a 2020 2020 2020 2000 2020 4d20     W>..      .    M
   d7a08:	4e41 4155 0a4c 3c00 4552 3e44 4120 5455     ANUAL..<RED> AUT
   d7a18:	0a4f 2000 2020 2020 4f20 4646 000a 5250     O..      OFF..PR
   d7a28:	474f 4152 204d 7441 6974 4663 6e61 6f43     OGRAM AtticFanCo
   d7a38:	746e 6f72 6c6c 7265 765f 0a32 4200 454d     ntroller_v2..BME
   d7a48:	3832 2030 6574 7473 4300 756f 646c 6e20     280 test.Could n
   d7a58:	746f 6620 6e69 2064 2061 6176 696c 2064     ot find a valid 
   d7a68:	4d42 3245 3038 7320 6e65 6f73 2c72 6320     BME280 sensor, c
   d7a78:	6568 6b63 7720 7269 6e69 2c67 6120 6464     heck wiring, add
   d7a88:	6572 7373 202c 6573 736e 726f 4920 2144     ress, sensor ID!
   d7a98:	5300 6e65 6f73 4972 2044 6177 3a73 3020     .SensorID was: 0
   d7aa8:	0078 2020 2020 2020 2020 4449 6f20 2066     x.        ID of 
   d7ab8:	7830 4646 7020 6f72 6162 6c62 2079 656d     0xFF probably me
   d7ac8:	6e61 2073 2061 6162 2064 6461 7264 7365     ans a bad addres
   d7ad8:	2c73 6120 4220 504d 3120 3038 6f20 2072     s, a BMP 180 or 
   d7ae8:	4d42 2050 3830 0035 2020 4920 2044 666f     BMP 085.   ID of
   d7af8:	3020 3578 2d36 7830 3835 7220 7065 6572      0x56-0x58 repre
   d7b08:	6573 746e 2073 2061 4d42 2050 3832 2c30     sents a BMP 280,
   d7b18:	2000 2020 2020 2020 4920 2044 666f 3020     .        ID of 0
   d7b28:	3678 2030 6572 7270 7365 6e65 7374 6120     x60 represents a
   d7b38:	4220 454d 3220 3038 002e 2020 2020 2020      BME 280..      
   d7b48:	2020 4449 6f20 2066 7830 3136 7220 7065       ID of 0x61 rep
   d7b58:	6572 6573 746e 2073 2061 4d42 2045 3836     resents a BME 68
   d7b68:	2e30 4200 454d 3832 2030 7055 6120 646e     0..BME280 Up and
   d7b78:	5220 6e75 696e 676e 2000 4554 504d 4820      Running. TEMP H
   d7b88:	4d55 000a 5320 5445 4954 474e 0a53 2000     UM.. SETTINGS.. 
   d7b98:	3225 302e 2066 2020 3225 302e 0a66 2000     %2.0f   %2.0f.. 
   d7ba8:	4553 534e 524f 000a 2520 2e32 6630 3c00     SENSOR.. %2.0f.<
   d7bb8:	4552 3e44 4100 5455 4d4f 646f 2065 4554     RED>.AUTOMode TE
   d7bc8:	504d 5245 5441 5255 2045 203e 3225 302e     MPERATURE > %2.0
   d7bd8:	0a66 4100 5455 4d4f 646f 2065 5548 494d     f..AUTOMode HUMI
   d7be8:	4944 5954 3e20 2520 2e32 6630 000a 5541     DITY > %2.0f..AU
   d7bf8:	4f54 6f4d 6564 2020 203e 6925 000a 414d     TOMode  > %i..MA
   d7c08:	4e49 4c20 4f4f 3a50 5541 4f54 6f4d 6564     IN LOOP:AUTOMode
   d7c18:	6920 2073 204f 2046 2046 203e 6925 000a      is O F F > %i..
   d7c28:	5541 4f54 6f4d 6564 6920 2073 204f 204e     AUTOMode is O N 
   d7c38:	203e 6925 6520 6578 7563 6574 4d20 304c     > %i execute ML0
   d7c48:	5f33 4843 4345 5f4b 5541 4f54 545f 5248     3_CHECK_AUTO_THR
   d7c58:	5345 4f48 444c 2853 0a29 4f00 454c 2044     ESHOLDS()..OLED 
   d7c68:	4944 5053 414c 2059 5753 5449 4843 4320     DISPLAY SWITCH C
   d7c78:	5341 2045 5245 4f52 2d52 4d2d 4120 4e20     ASE ERROR--M A N
   d7c88:	5520 4120 4c20 2020 4f4d 4544 4f00 454c      U A L  MODE.OLE
   d7c98:	2044 4944 5053 414c 2059 5753 5449 4843     D DISPLAY SWITCH
   d7ca8:	4320 5341 2045 5245 4f52 2d52 412d 5520      CASE ERROR--A U
   d7cb8:	5420 4f20 4d20 444f 0045 504f 4e45 5720      T O MODE.OPEN W
   d7cc8:	4449 2045 5441 4954 2043 4f44 524f 2026     IDE ATTIC DOOR& 
   d7cd8:	4957 444e 574f 0053 2a2a 2a2a 2a2a 2a2a     WINDOWS.********
   d7ce8:	002a 0000                                   *...

000d7cec <_ZTVN8particle13__SPISettingsE>:
	...
   d7cf4:	47f1 000d 6564 6166 6c75 2074 4d00 4253     .G..default .MSB
   d7d04:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d7d14:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d7d24:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d7d34:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d7d40 <_ZTV16Adafruit_SSD1306>:
	...
   d7d48:	40c9 000d 4709 000d 5935 000d 6279 000d     .@...G..5Y..yb..
   d7d58:	5231 000d 5635 000d 50b9 000d 4f45 000d     1R..5V...P..EO..
   d7d68:	56f5 000d 578b 000d 57c3 000d 57df 000d     .V...W...W...W..

000d7d78 <_ZTV12Adafruit_GFX>:
	...
   d7d88:	5935 000d 6279 000d 40a5 000d 5635 000d     5Y..yb...@..5V..
   d7d98:	5755 000d 5771 000d 56f5 000d 578b 000d     UW..qW...V...W..
   d7da8:	57c3 000d 57df 000d                         .W...W..

000d7db0 <_ZL4font>:
   d7db0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7dc0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7dd0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7de0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7df0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7e00:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7e10:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7e20:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7e30:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7e40:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7e50:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7e60:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7e70:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7e80:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7e90:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7ea0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7eb0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7ec0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7ed0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7ee0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7ef0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7f00:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7f10:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7f20:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7f30:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7f40:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7f50:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7f60:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7f70:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7f80:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7f90:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7fa0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7fb0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7fc0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7fd0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7fe0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7ff0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8000:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8010:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8020:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8030:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8040:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8050:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8060:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8070:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8080:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8090:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d80a0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d80b0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d80c0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d80d0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d80e0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d80f0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8100:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8110:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8120:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8130:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8140:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8150:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8160:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8170:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8180:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8190:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d81a0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d81b0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d81c0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d81d0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d81e0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d81f0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8200:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d8210:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8220:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8230:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8240:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8250:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8260:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8270:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8280:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8290:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d82a0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d82ac <_ZTVN5spark13EthernetClassE>:
	...
   d82b4:	5ee3 000d 5ed9 000d 5ecf 000d 5ec5 000d     .^...^...^...^..
   d82c4:	5eb9 000d 5ead 000d 5ea1 000d 5e99 000d     .^...^...^...^..
   d82d4:	5e8f 000d 5e85 000d 6b91 000d               .^...^...k..

000d82e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d82e0:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d82f0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8300:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8310:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8320:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8330:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8340:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8350:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8360:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d8370:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d8380:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d8390:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d83a0:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d83b0:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d83c0:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d83d0:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d83e0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d83f0 <_ZTV9IPAddress>:
	...
   d83f8:	653d 000d 652d 000d 652f 000d               =e..-e../e..

000d8404 <_ZTV9USBSerial>:
	...
   d840c:	6615 000d 6665 000d 6673 000d 6279 000d     .f..ef..sf..yb..
   d841c:	6651 000d 6617 000d 662d 000d 665f 000d     Qf...f..-f.._f..
   d842c:	6643 000d 6611 000d                         Cf...f..

000d8434 <_ZTV11USARTSerial>:
	...
   d843c:	6721 000d 6771 000d 677f 000d 6279 000d     !g..qg...g..yb..
   d844c:	6735 000d 6757 000d 6743 000d 676b 000d     5g..Wg..Cg..kg..
   d845c:	6723 000d 6727 000d                         #g..'g..

000d8464 <_ZTV7TwoWire>:
	...
   d846c:	6825 000d 686f 000d 6847 000d 6827 000d     %h..oh..Gh..'h..
   d847c:	684f 000d 6857 000d 685f 000d 6867 000d     Oh..Wh.._h..gh..

000d848c <_ZTVN5spark9MeshClassE>:
	...
   d8494:	6991 000d 6987 000d 697d 000d 6973 000d     .i...i..}i..si..
   d84a4:	6967 000d 695b 000d 694f 000d 6947 000d     gi..[i..Oi..Gi..
   d84b4:	693d 000d 6933 000d 6b91 000d               =i..3i...k..

000d84c0 <_ZTVN5spark9WiFiClassE>:
	...
   d84c8:	6b0b 000d 6b01 000d 6af7 000d 6aad 000d     .k...k...j...j..
   d84d8:	6aeb 000d 6adf 000d 6ad3 000d 6acb 000d     .j...j...j...j..
   d84e8:	6ac1 000d 6ab7 000d 6b91 000d               .j...j...k..

000d84f4 <_ZTVN5spark12NetworkClassE>:
	...
   d84fc:	6b29 000d 6b33 000d 6b3d 000d 6b47 000d     )k..3k..=k..Gk..
   d850c:	6b51 000d 6b5d 000d 6b69 000d 6b75 000d     Qk..]k..ik..uk..
   d851c:	6b7d 000d 6b87 000d 6b91 000d               }k...k...k..

000d8528 <_ZSt7nothrow>:
   d8528:	0000 0000                                   ....

000d852c <__sf_fake_stdin>:
	...

000d854c <__sf_fake_stdout>:
	...

000d856c <__sf_fake_stderr>:
	...
   d858c:	0043                                        C.

000d858e <link_const_variable_data_end>:
	...

000d8590 <link_constructors_location>:
   d8590:	000d4719 	.word	0x000d4719
   d8594:	000d4f3f 	.word	0x000d4f3f
   d8598:	000d5631 	.word	0x000d5631
   d859c:	000d59e9 	.word	0x000d59e9
   d85a0:	000d5eed 	.word	0x000d5eed
   d85a4:	000d6159 	.word	0x000d6159
   d85a8:	000d6251 	.word	0x000d6251
   d85ac:	000d63b9 	.word	0x000d63b9
   d85b0:	000d63c9 	.word	0x000d63c9
   d85b4:	000d6401 	.word	0x000d6401
   d85b8:	000d6a5d 	.word	0x000d6a5d
   d85bc:	000d6b15 	.word	0x000d6b15
   d85c0:	000d6c5d 	.word	0x000d6c5d
   d85c4:	000d6e61 	.word	0x000d6e61
   d85c8:	000d6ee5 	.word	0x000d6ee5
   d85cc:	000d6fa9 	.word	0x000d6fa9
   d85d0:	000d706d 	.word	0x000d706d

000d85d4 <link_constructors_end>:
	...
